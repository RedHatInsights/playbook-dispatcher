---
openapi: 3.0.3
info:
  title: Playbook Dispatcher
  version: 0.0.1
paths:

  /internal/dispatch:
    post:
      operationId: api.internal.runs.create
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RunInput'
              minItems: 1
              maxItems: 10 # TODO
      responses:
        '207':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunsCreated'

  /api/playbook-dispatcher/v1/runs:
    get:
      operationId: api.runs.list
      parameters:
      - $ref: '#/components/parameters/RunsFilter'
      - $ref: '#/components/parameters/RunsSortBy'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runs'

components:
  schemas:
    RunId:
      type: string
      format: uuid

    RunRecipient:
      type: string
      format: uuid

    RunTimeout:
      type: integer
      description: Amount of seconds after which the run is considered failed due to timeout
      default: 3600

    Account:
      type: string
      minLength: 1
      maxLength: 10

    Url:
      type: string
      format: url

    Labels:
      type: object
      additionalProperties:
        type: string
        default: {}

    RunStatus:
      type: string
      enum:
        - running
        - success
        - failure
        - timeout

    Runs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Run'
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta

    RunInput:
      type: object
      properties:
        recipient:
          $ref: '#/components/schemas/RunRecipient'
        account:
          $ref: '#/components/schemas/Account'
        url:
          $ref: '#/components/schemas/Url'
        labels:
          $ref: '#/components/schemas/Labels'
        timeout:
          $ref: '#/components/schemas/RunTimeout'
      required:
      - recipient
      - account
      - url

    Run:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RunId'
        account:
          $ref: '#/components/schemas/Account'
        recipient:
          $ref: '#/components/schemas/RunRecipient'
        url:
          $ref: '#/components/schemas/Url'
        labels:
          $ref: '#/components/schemas/Labels'
        timeout:
          $ref: '#/components/schemas/RunTimeout'
        status:
          $ref: '#/components/schemas/RunStatus'
      required:
      - id
      - account
      - recipient
      - url
      - labels
      - timeout
      - status

    RunCreated:
      type: object
      properties:
        code:
          type: integer
          example: 201
          description: status code of the request
        id:
          $ref: '#/components/schemas/RunId'
      required:
      - code

    RunsCreated:
      type: array
      items:
        $ref: '#/components/schemas/RunCreated'

    Meta:
      type: object
      additionalProperties: false
      properties:
        count:
          type: integer
          description: number of results returned
          example: 50
      required:
      - count

  parameters:
    RunsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        type: object
        properties:
          labels:
            type: object
            additionalProperties:
              type: string
          status:
            type: string
    RunsSortBy:
      in: query
      name: sort_by
      required: false
      schema:
        type: string
        enum:
          - created_at
          - created_at:asc
          - created_at:desc
    Limit:
      in: query
      name: limit
      description: Maximum number of results to return
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50
    Offset:
      in: query
      name: offset
      description: Indicates the starting position of the query relative to the complete set of items that match the query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
