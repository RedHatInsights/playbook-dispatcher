---
openapi: 3.0.3
info:
  title: Playbook Dispatcher
  version: 0.0.1
paths:

  /internal/dispatch:
    post:
      operationId: api.internal.runs.create
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RunInput'
      responses:
        '207':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 201
                      description: status code of the request
                    run_id:
                      type: string
                      format: uuid
                  required:
                  - code


  /api/pd/v1/runs:
    get:
      operationId: api.runs.get
      parameters:
      - $ref: '#/components/parameters/RunsFilter'
      # TODO sparse fieldsets param
      # TODO sorting param

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runs'

                  # TODO: sorting
                  # TODO: for each host
                  #   logs, host info, status per play/task

components:
  schemas:
    RunId:
      type: string
      format: uuid

    RunRecipient:
      type: string
      format: uuid

    RunTimeout:
      type: integer
      description: Amount of seconds after which the run is considered failed due to timeout
      default: 3600

    Account:
      type: string

    Url:
      type: string
      format: url

    Labels:
      type: object
      additionalProperties:
        type: string
        default: {}

    RunStatus:
      type: string
      enum:
        - running
        - success
        - failure
        - timeout

    Runs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Run'
      required:
      - data

    RunInput:
      type: object
      properties:
        recipient:
          $ref: '#/components/schemas/RunRecipient'
        account:
          $ref: '#/components/schemas/Account'
        url:
          $ref: '#/components/schemas/Url'
        labels:
          $ref: '#/components/schemas/Labels'
        timeout:
          $ref: '#/components/schemas/RunTimeout'
      required:
      - recipient
      - account
      - url

    Run:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RunId'
        account:
          $ref: '#/components/schemas/Account'
        recipient:
          $ref: '#/components/schemas/RunRecipient'
        url:
          $ref: '#/components/schemas/Url'
        labels:
          $ref: '#/components/schemas/Labels'
        timeout:
          $ref: '#/components/schemas/RunTimeout'
        status:
          $ref: '#/components/schemas/RunStatus'
      required:
      - id
      - account
      - recipient
      - url
      - labels
      - timeout
      - status

  parameters:
    RunsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        type: object
        properties:
          labels:
            type: object
            additionalProperties:
              type: string
          status:
            type: string
