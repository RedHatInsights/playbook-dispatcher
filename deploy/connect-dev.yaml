apiVersion: v1
kind: Template
metadata:
  name: playbook-dispatcher-connect
parameters:
- name: KAFKA_CONNECT_IMAGE
  value: quay.io/cloudservices/playbook-dispatcher-connect
- name: IMAGE_TAG
  value: latest
- name: KAFKA_BOOTSTRAP_HOST
  value: platform-mq-ci-kafka-bootstrap.platform-mq-ci.svc.cluster.local
- name: KAFKA_BOOTSTRAP_PORT
  value: '9092'
- name: NUM_REPLICAS
  value: '1'
- name: VERSION
  value: '2.6.0'
- name: CPU_REQUESTS
  value: 500m
- name: CPU_LIMITS
  value: '1'
- name: MEMORY_REQUESTS
  value: 512Mi
- name: MEMORY_LIMITS
  value: 1Gi
- name: XMX
  value: 512m
- name: XMS
  value: 512m
- name: EVENT_CONSUMER_TOPIC
  value: platform.playbook-dispatcher.runs
- name: EVENT_CONSUMER_REPLICAS
  value: '1'
- name: EVENT_CONSUMER_GROUP
  value: playbook-dispatcher-event-consumer
- name: IMAGE_TAG_EVENT_CONSUMER
  value: 57b442d

objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: playbook-dispatcher
    name: playbook-dispatcher-connect
  spec:
    replicas: ${{NUM_REPLICAS}}
    selector:
      matchLabels:
        pod: playbook-dispatcher-connect
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: playbook-dispatcher
          pod: playbook-dispatcher-connect
      spec:
        containers:
        - command:
          - /opt/kafka/kafka_connect_run.sh
          env:
          - name: KAFKA_CONNECT_CONFIGURATION
            value: |
              group.id=playbook-dispatcher-connect
              key.converter=org.apache.kafka.connect.json.JsonConverter
              value.converter=org.apache.kafka.connect.json.JsonConverter
              offset.storage.topic=playbook-dispatcher-connect-config
              status.storage.topic=playbook-dispatcher-connect-status
              config.storage.topic=playbook-dispatcher-connect-offsets
              config.providers: file
              config.providers.file.class: com.redhat.insights.kafka.config.providers.PlainFileConfigProvider
          - name: KAFKA_CONNECT_METRICS_ENABLED
            value: "false"
          - name: KAFKA_CONNECT_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: STRIMZI_KAFKA_GC_LOG_ENABLED
            value: "false"
          - name: KAFKA_HEAP_OPTS
            value: "-Xms${XMS} -Xmx${XMS}"
          image: ${KAFKA_CONNECT_IMAGE}:${IMAGE_TAG}
          livenessProbe:
            exec:
              command:
              - /check-connectors.sh
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          name: playbook-dispatcher-connect
          ports:
          - containerPort: 8083
            name: rest-api
            protocol: TCP
          - containerPort: 9404
            name: tcp-prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: rest-api
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: ${CPU_LIMITS}
              memory: ${MEMORY_LIMITS}
            requests:
              cpu: ${CPU_REQUESTS}
              memory: ${MEMORY_REQUESTS}
          volumeMounts:
          - mountPath: /opt/kafka/external-configuration/playbook-dispatcher-db
            name: playbook-dispatcher-db
            readOnly: true
        imagePullSecrets:
        - name: quay-cloudservices-pull
        - name: rh-registry-pull
        volumes:
        - name: playbook-dispatcher-db
          secret:
            secretName: playbook-dispatcher-db

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: playbook-dispatcher
    name: playbook-dispatcher-connect
  spec:
    ports:
    - name: rest-api
      port: 8083
      protocol: TCP
      targetPort: 8083
    selector:
      pod: playbook-dispatcher-connect
    type: ClusterIP

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: playbook-dispatcher
    name: playbook-dispatcher-event-consumer
  spec:
    replicas: ${{EVENT_CONSUMER_REPLICAS}}
    selector:
      matchLabels:
        pod: playbook-dispatcher-event-consumer
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: playbook-dispatcher
          pod: playbook-dispatcher-event-consumer
      spec:
        containers:
        - command:
          - /opt/kafka/bin/kafka-console-consumer.sh
          - --bootstrap-server
          - ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - --from-beginning
          - --group
          - ${EVENT_CONSUMER_GROUP}
          - --topic
          - ${EVENT_CONSUMER_TOPIC}
          image: ${KAFKA_CONNECT_IMAGE}:${IMAGE_TAG_EVENT_CONSUMER}
          name: playbook-dispatcher-event-consumer
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
