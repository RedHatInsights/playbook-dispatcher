// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error

	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXUW/bNhD+K8Jtj1rkJNgG6C3dMCBYihRO+1QEBSOeYnYSyZLHLEag/z4cKUtyJNcu",
	"VvTNpI7Hu+/77nh+gcq01mjU5KF8ASucaJHQxdWNahXxD4m+csqSMhpKeCueVRvaTIf2AV1m6syhDw35",
	"jEzmkILTkINi0y8B3RZy0KJFKKGJDnPw1QZbkTzXIjQE5a+rHNrkGMqLFa+UTqvzHGhr+bzShI/ooOty",
	"uK1rjwvRXWupKkHoM9pg5kk4Uvoxs8YrtuBw+UOMLHPYCFJPyJHzLqPRIGHmkdhSEbbsSFDWCqo249ED",
	"GZoU1WKK05xWizmtg/Z/qYbQ8UF8to2RCCW5gMvX1cl4ep11xqIjhZHCRjxgE38JKSMAonm3Z9GH4ckp",
	"/QjdEJd5+IwV8YYnQWHJdtl42/CORLS3wy4ndmccvdmym6VMvHH06WG7lwpqhuojVA4FofwkGNhxUQpf",
	"7W+wEuA+n8XZ7bzGLK6qygQdpdOK5xvUj7SB8jzRMyzzOTI3R8EcuH7p8hOQfYskDrurReMxf0XoEPq+",
	"6ue1mAoRJeSAz4JlnYpsQXYOvwTlUEaso//7hWDXQc/1JUYsf3ZYQwk/FWNLKXrUix3kXQ5KHjNeB30t",
	"2XQU79fMe1ZiHpWyCo+Hsw56PdjuKfzIqbtkyFyqFk045ab3vWWXQ3DNsQMfXDPjRDGJO6SnaSaPA1Bj",
	"VENKB4j8I9XMnM8qNpzX6krOMv64658cH3qaqutitdCpv4HwmRIlHor/OvqsjWsFQQkhRIhmBceW2iaW",
	"/q9uf5gYf6SyplIaBcbODgC/nmZ1Cv53Q2nturkLWvP3HHyoKvSs21qoJjicKPh+2d37EZyh117+xuPC",
	"vmKvWs6FxeqxMlr6TNSELvt3o/pX3AWdKda09kqiQ5lxECgzGdI4MJTSXNL8nM01JUXq5nFoOIG+yZMg",
	"nBNbXrf9i/C1o/HVeM1kvLw/f4A7P6n6U2PcHVkI9UOS3CiC2IoWnl6laxOnB0VxNHjXiO2DMf9kfypv",
	"eaqKE8wTOp+4W52tzs75BmNRC6ughMuz1dkl5GAFbWLYhbCqsL2jX+TgqHg6L1zPzmMaD5kiwbLgpgFX",
	"VjEUNyr2rum8+3EZjNGkmIxnXX6SdT/znGCdZu0TDPu5t7tn/r012if1XaxWqYFr6stTWNvwKKyMLj57",
	"E1/vcbg6QrxP3O1X1e3fvNvlUHAxOC2aYgd9LAfjlxG/7q1HEUJSL3p6Y+T2mwI/Vbqp83fxb8V1OtPP",
	"eLvVa013qaj2QP39u4I6lNNBbLvuvwAAAP//evvxMJQNAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
