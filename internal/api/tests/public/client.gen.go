// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for RunStatus.
const (
	RunStatusCanceled RunStatus = "canceled"
	RunStatusFailure  RunStatus = "failure"
	RunStatusRunning  RunStatus = "running"
	RunStatusSuccess  RunStatus = "success"
	RunStatusTimeout  RunStatus = "timeout"
)

// Defines values for StatusNullable.
const (
	StatusNullableCanceled StatusNullable = "canceled"
	StatusNullableFailure  StatusNullable = "failure"
	StatusNullableRunning  StatusNullable = "running"
	StatusNullableSuccess  StatusNullable = "success"
	StatusNullableTimeout  StatusNullable = "timeout"
)

// Defines values for RunsSortBy.
const (
	RunsSortByCreatedAt     RunsSortBy = "created_at"
	RunsSortByCreatedAtAsc  RunsSortBy = "created_at:asc"
	RunsSortByCreatedAtDesc RunsSortBy = "created_at:desc"
)

// Defines values for ApiRunHostsListParamsFieldsData.
const (
	ApiRunHostsListParamsFieldsDataHost        ApiRunHostsListParamsFieldsData = "host"
	ApiRunHostsListParamsFieldsDataInventoryId ApiRunHostsListParamsFieldsData = "inventory_id"
	ApiRunHostsListParamsFieldsDataLinks       ApiRunHostsListParamsFieldsData = "links"
	ApiRunHostsListParamsFieldsDataRun         ApiRunHostsListParamsFieldsData = "run"
	ApiRunHostsListParamsFieldsDataStatus      ApiRunHostsListParamsFieldsData = "status"
	ApiRunHostsListParamsFieldsDataStdout      ApiRunHostsListParamsFieldsData = "stdout"
)

// Defines values for ApiRunsListParamsFieldsData.
const (
	ApiRunsListParamsFieldsDataCorrelationId ApiRunsListParamsFieldsData = "correlation_id"
	ApiRunsListParamsFieldsDataCreatedAt     ApiRunsListParamsFieldsData = "created_at"
	ApiRunsListParamsFieldsDataId            ApiRunsListParamsFieldsData = "id"
	ApiRunsListParamsFieldsDataLabels        ApiRunsListParamsFieldsData = "labels"
	ApiRunsListParamsFieldsDataName          ApiRunsListParamsFieldsData = "name"
	ApiRunsListParamsFieldsDataOrgId         ApiRunsListParamsFieldsData = "org_id"
	ApiRunsListParamsFieldsDataRecipient     ApiRunsListParamsFieldsData = "recipient"
	ApiRunsListParamsFieldsDataService       ApiRunsListParamsFieldsData = "service"
	ApiRunsListParamsFieldsDataStatus        ApiRunsListParamsFieldsData = "status"
	ApiRunsListParamsFieldsDataTimeout       ApiRunsListParamsFieldsData = "timeout"
	ApiRunsListParamsFieldsDataUpdatedAt     ApiRunsListParamsFieldsData = "updated_at"
	ApiRunsListParamsFieldsDataUrl           ApiRunsListParamsFieldsData = "url"
	ApiRunsListParamsFieldsDataWebConsoleUrl ApiRunsListParamsFieldsData = "web_console_url"
)

// Defines values for ApiRunsListParamsSortBy.
const (
	ApiRunsListParamsSortByCreatedAt     ApiRunsListParamsSortBy = "created_at"
	ApiRunsListParamsSortByCreatedAtAsc  ApiRunsListParamsSortBy = "created_at:asc"
	ApiRunsListParamsSortByCreatedAtDesc ApiRunsListParamsSortBy = "created_at:desc"
)

// Account Identifier of the tenant
type Account = string

// CreatedAt A timestamp when the entry was created
type CreatedAt = time.Time

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// InventoryIdNullable defines model for InventoryIdNullable.
type InventoryIdNullable = string

// Labels Additional metadata about the Playbook run. Can be used for filtering purposes.
type Labels map[string]string

// Links defines model for Links.
type Links struct {
	// First relative link to the first page of the query results
	First string `json:"first"`

	// Last relative link to the last page of the query results
	Last string `json:"last"`

	// Next relative link to the next page of the query results
	Next *string `json:"next,omitempty"`

	// Previous relative link to the previous page of the query results
	Previous *string `json:"previous,omitempty"`
}

// Meta Information about returned entities
type Meta struct {
	// Count number of results returned
	Count int `json:"count"`

	// Total total number of results matching the query
	Total int `json:"total"`
}

// OrgId Identifier of the tenant
type OrgId = string

// PlaybookName Human readable name of the playbook run. Used to present the given playbook run in external systems (Satellite).
type PlaybookName = string

// Run defines model for Run.
type Run struct {
	// Account Identifier of the tenant
	// Deprecated:
	Account *Account `json:"account,omitempty"`

	// CorrelationId Unique identifier used to match work request with responses
	CorrelationId *RunCorrelationId `json:"correlation_id,omitempty"`

	// CreatedAt A timestamp when the entry was created
	CreatedAt *CreatedAt `json:"created_at,omitempty"`

	// Id Unique identifier of a Playbook run
	Id *RunId `json:"id,omitempty"`

	// Labels Additional metadata about the Playbook run. Can be used for filtering purposes.
	Labels *Labels `json:"labels,omitempty"`

	// Name Human readable name of the playbook run. Used to present the given playbook run in external systems (Satellite).
	Name *PlaybookName `json:"name,omitempty"`

	// OrgId Identifier of the tenant
	OrgId *OrgId `json:"org_id,omitempty"`

	// Recipient Identifier of the host to which a given Playbook is addressed
	Recipient *RunRecipient `json:"recipient,omitempty"`

	// Service Service that triggered the given Playbook run
	Service *Service `json:"service,omitempty"`

	// Status Current status of a Playbook run
	Status *RunStatus `json:"status,omitempty"`

	// Timeout Amount of seconds after which the run is considered failed due to timeout
	Timeout *RunTimeout `json:"timeout,omitempty"`

	// UpdatedAt A timestamp when the entry was last updated
	UpdatedAt *UpdatedAt `json:"updated_at,omitempty"`

	// Url URL hosting the Playbook
	Url *Url `json:"url,omitempty"`

	// WebConsoleUrl URL that points to the section of the web console where the user find more information about the playbook run. The field is optional but highly suggested.
	WebConsoleUrl *WebConsoleUrl `json:"web_console_url,omitempty"`
}

// RunCorrelationId Unique identifier used to match work request with responses
type RunCorrelationId = string

// RunHost defines model for RunHost.
type RunHost struct {
	// Host Name used to identify a host within Ansible inventory
	Host        *string             `json:"host,omitempty"`
	InventoryId *openapi_types.UUID `json:"inventory_id,omitempty"`
	Links       *RunHostLinks       `json:"links,omitempty"`
	Run         *Run                `json:"run,omitempty"`

	// Status Current status of a Playbook run
	Status *RunStatus `json:"status,omitempty"`

	// Stdout Output produced by running Ansible Playbook on the given host
	Stdout *string `json:"stdout,omitempty"`
}

// RunHostLinks defines model for RunHostLinks.
type RunHostLinks struct {
	InventoryHost *string `json:"inventory_host"`
}

// RunHosts defines model for RunHosts.
type RunHosts struct {
	Data  []RunHost `json:"data"`
	Links Links     `json:"links"`

	// Meta Information about returned entities
	Meta Meta `json:"meta"`
}

// RunId Unique identifier of a Playbook run
type RunId = openapi_types.UUID

// RunLabelsNullable defines model for RunLabelsNullable.
type RunLabelsNullable map[string]string

// RunRecipient Identifier of the host to which a given Playbook is addressed
type RunRecipient = openapi_types.UUID

// RunStatus Current status of a Playbook run
type RunStatus string

// RunTimeout Amount of seconds after which the run is considered failed due to timeout
type RunTimeout = int

// Runs defines model for Runs.
type Runs struct {
	Data  []Run `json:"data"`
	Links Links `json:"links"`

	// Meta Information about returned entities
	Meta Meta `json:"meta"`
}

// Service Service that triggered the given Playbook run
type Service = string

// ServiceNullable defines model for ServiceNullable.
type ServiceNullable = string

// StatusNullable defines model for StatusNullable.
type StatusNullable string

// UpdatedAt A timestamp when the entry was last updated
type UpdatedAt = time.Time

// Url URL hosting the Playbook
type Url = string

// WebConsoleUrl URL that points to the section of the web console where the user find more information about the playbook run. The field is optional but highly suggested.
type WebConsoleUrl = string

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// RunHostFields defines model for RunHostFields.
type RunHostFields struct {
	Data *[]string `json:"data,omitempty"`
}

// RunHostFilter defines model for RunHostFilter.
type RunHostFilter struct {
	InventoryId *InventoryIdNullable `json:"inventory_id"`
	Run         *struct {
		Id      *string            `json:"id,omitempty"`
		Labels  *RunLabelsNullable `json:"labels"`
		Service *ServiceNullable   `json:"service"`
	} `json:"run"`
	Status *StatusNullable `json:"status"`
}

// RunsFields defines model for RunsFields.
type RunsFields struct {
	Data *[]string `json:"data,omitempty"`
}

// RunsFilter defines model for RunsFilter.
type RunsFilter struct {
	Labels    *RunLabelsNullable `json:"labels"`
	Recipient *string            `json:"recipient,omitempty"`
	Service   *ServiceNullable   `json:"service"`
	Status    *StatusNullable    `json:"status"`
}

// RunsSortBy defines model for RunsSortBy.
type RunsSortBy string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// ApiRunHostsListParams defines parameters for ApiRunHostsList.
type ApiRunHostsListParams struct {
	// Filter Allows for filtering based on various criteria
	Filter *RunHostFilter `json:"filter,omitempty"`

	// Fields Defines fields to be returned in the response.
	Fields *RunHostFields `json:"fields,omitempty"`

	// Limit Maximum number of results to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Indicates the starting position of the query relative to the complete set of items that match the query
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// ApiRunHostsListParamsFieldsData defines parameters for ApiRunHostsList.
type ApiRunHostsListParamsFieldsData string

// ApiRunsListParams defines parameters for ApiRunsList.
type ApiRunsListParams struct {
	// Filter Allows for filtering based on various criteria
	Filter *RunsFilter `json:"filter,omitempty"`

	// Fields Defines fields to be returned in the response.
	Fields *RunsFields `json:"fields,omitempty"`

	// SortBy Sort order
	SortBy *ApiRunsListParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Limit Maximum number of results to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Indicates the starting position of the query relative to the complete set of items that match the query
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// ApiRunsListParamsFieldsData defines parameters for ApiRunsList.
type ApiRunsListParamsFieldsData string

// ApiRunsListParamsSortBy defines parameters for ApiRunsList.
type ApiRunsListParamsSortBy string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiRunHostsList request
	ApiRunHostsList(ctx context.Context, params *ApiRunHostsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiRunsList request
	ApiRunsList(ctx context.Context, params *ApiRunsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiRunHostsList(ctx context.Context, params *ApiRunHostsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRunHostsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiRunsList(ctx context.Context, params *ApiRunsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiRunsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiRunHostsListRequest generates requests for ApiRunHostsList
func NewApiRunHostsListRequest(server string, params *ApiRunHostsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/playbook-dispatcher/v1/run_hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiRunsListRequest generates requests for ApiRunsList
func NewApiRunsListRequest(server string, params *ApiRunsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/playbook-dispatcher/v1/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiRunHostsListWithResponse request
	ApiRunHostsListWithResponse(ctx context.Context, params *ApiRunHostsListParams, reqEditors ...RequestEditorFn) (*ApiRunHostsListResponse, error)

	// ApiRunsListWithResponse request
	ApiRunsListWithResponse(ctx context.Context, params *ApiRunsListParams, reqEditors ...RequestEditorFn) (*ApiRunsListResponse, error)
}

type ApiRunHostsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunHosts
	JSON400      *BadRequest
	JSON403      *Forbidden
}

// Status returns HTTPResponse.Status
func (r ApiRunHostsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRunHostsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiRunsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Runs
	JSON400      *BadRequest
	JSON403      *Forbidden
}

// Status returns HTTPResponse.Status
func (r ApiRunsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRunsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiRunHostsListWithResponse request returning *ApiRunHostsListResponse
func (c *ClientWithResponses) ApiRunHostsListWithResponse(ctx context.Context, params *ApiRunHostsListParams, reqEditors ...RequestEditorFn) (*ApiRunHostsListResponse, error) {
	rsp, err := c.ApiRunHostsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRunHostsListResponse(rsp)
}

// ApiRunsListWithResponse request returning *ApiRunsListResponse
func (c *ClientWithResponses) ApiRunsListWithResponse(ctx context.Context, params *ApiRunsListParams, reqEditors ...RequestEditorFn) (*ApiRunsListResponse, error) {
	rsp, err := c.ApiRunsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiRunsListResponse(rsp)
}

// ParseApiRunHostsListResponse parses an HTTP response from a ApiRunHostsListWithResponse call
func ParseApiRunHostsListResponse(rsp *http.Response) (*ApiRunHostsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRunHostsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunHosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseApiRunsListResponse parses an HTTP response from a ApiRunsListWithResponse call
func ParseApiRunsListResponse(rsp *http.Response) (*ApiRunsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiRunsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Runs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
