// Package tests provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package tests

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// Account defines model for Account.
type Account string

// CreatedAt defines model for CreatedAt.
type CreatedAt time.Time

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Labels defines model for Labels.
type Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Meta defines model for Meta.
type Meta struct {

	// number of results returned
	Count int `json:"count"`
}

// Run defines model for Run.
type Run struct {

	// Identifier of the tenant
	Account *Account `json:"account,omitempty"`

	// A timestamp when the entry was created
	CreatedAt *CreatedAt `json:"created_at,omitempty"`

	// Unique identifier of a Playbook run
	Id *RunId `json:"id,omitempty"`

	// Additional metadata about the Playbook run. Can be used for filtering purposes.
	Labels *Labels `json:"labels,omitempty"`

	// Identifier of the host to which a given Playbook is addressed
	Recipient *RunRecipient `json:"recipient,omitempty"`

	// Current status of a Playbook run
	Status *RunStatus `json:"status,omitempty"`

	// Amount of seconds after which the run is considered failed due to timeout
	Timeout *RunTimeout `json:"timeout,omitempty"`

	// A timestamp when the entry was last updated
	UpdatedAt *UpdatedAt `json:"updated_at,omitempty"`

	// URL hosting the Playbook
	Url *Url `json:"url,omitempty"`
}

// RunCreated defines model for RunCreated.
type RunCreated struct {

	// status code of the request
	Code int `json:"code"`

	// Unique identifier of a Playbook run
	Id *RunId `json:"id,omitempty"`
}

// RunId defines model for RunId.
type RunId string

// RunInput defines model for RunInput.
type RunInput struct {

	// Identifier of the tenant
	Account Account `json:"account"`

	// Additional metadata about the Playbook run. Can be used for filtering purposes.
	Labels *Labels `json:"labels,omitempty"`

	// Identifier of the host to which a given Playbook is addressed
	Recipient RunRecipient `json:"recipient"`

	// Amount of seconds after which the run is considered failed due to timeout
	Timeout *RunTimeout `json:"timeout,omitempty"`

	// URL hosting the Playbook
	Url Url `json:"url"`
}

// RunRecipient defines model for RunRecipient.
type RunRecipient string

// RunStatus defines model for RunStatus.
type RunStatus string

// List of RunStatus
const (
	RunStatus_failure RunStatus = "failure"
	RunStatus_running RunStatus = "running"
	RunStatus_success RunStatus = "success"
	RunStatus_timeout RunStatus = "timeout"
)

// RunTimeout defines model for RunTimeout.
type RunTimeout int

// Runs defines model for Runs.
type Runs struct {
	Data []Run `json:"data"`

	// Information about returned entities
	Meta Meta `json:"meta"`
}

// RunsCreated defines model for RunsCreated.
type RunsCreated []RunCreated

// UpdatedAt defines model for UpdatedAt.
type UpdatedAt time.Time

// Url defines model for Url.
type Url string

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// RunsFields defines model for RunsFields.
type RunsFields struct {
	Data *[]string `json:"data,omitempty"`
}

// RunsFilter defines model for RunsFilter.
type RunsFilter struct {
	Labels    *Labels `json:"labels"`
	Recipient *string `json:"recipient"`
	Status    *string `json:"status"`
}

// RunsSortBy defines model for RunsSortBy.
type RunsSortBy string

// List of RunsSortBy
const (
	RunsSortBy_created_at      RunsSortBy = "created_at"
	RunsSortBy_created_at_asc  RunsSortBy = "created_at:asc"
	RunsSortBy_created_at_desc RunsSortBy = "created_at:desc"
)

// ApiRunsListParams defines parameters for ApiRunsList.
type ApiRunsListParams struct {

	// Allows for filtering based on various criteria
	Filter *RunsFilter `json:"filter,omitempty"`

	// Defines fields to be returned in the response.
	Fields *RunsFields `json:"fields,omitempty"`

	// Sort order
	SortBy *RunsSortBy `json:"sort_by,omitempty"`

	// Maximum number of results to return
	Limit *Limit `json:"limit,omitempty"`

	// Indicates the starting position of the query relative to the complete set of items that match the query
	Offset *Offset `json:"offset,omitempty"`
}

// ApiRunsListParams_Filter_Labels defines parameters for ApiRunsList.
type ApiRunsListParams_Filter_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ApiInternalRunsCreateJSONBody defines parameters for ApiInternalRunsCreate.
type ApiInternalRunsCreateJSONBody []RunInput

// ApiInternalRunsCreateRequestBody defines body for ApiInternalRunsCreate for application/json ContentType.
type ApiInternalRunsCreateJSONRequestBody ApiInternalRunsCreateJSONBody

// Getter for additional properties for ApiRunsListParams_Filter_Labels. Returns the specified
// element and whether it was found
func (a ApiRunsListParams_Filter_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiRunsListParams_Filter_Labels
func (a *ApiRunsListParams_Filter_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiRunsListParams_Filter_Labels to handle AdditionalProperties
func (a *ApiRunsListParams_Filter_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiRunsListParams_Filter_Labels to handle AdditionalProperties
func (a ApiRunsListParams_Filter_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Labels. Returns the specified
// element and whether it was found
func (a Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Labels
func (a *Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Labels to handle AdditionalProperties
func (a *Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Labels to handle AdditionalProperties
func (a Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiRunsList request
	ApiRunsList(ctx context.Context, params *ApiRunsListParams) (*http.Response, error)

	// ApiInternalRunsCreate request  with any body
	ApiInternalRunsCreateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ApiInternalRunsCreate(ctx context.Context, body ApiInternalRunsCreateJSONRequestBody) (*http.Response, error)
}

func (c *Client) ApiRunsList(ctx context.Context, params *ApiRunsListParams) (*http.Response, error) {
	req, err := NewApiRunsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiInternalRunsCreateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApiInternalRunsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiInternalRunsCreate(ctx context.Context, body ApiInternalRunsCreateJSONRequestBody) (*http.Response, error) {
	req, err := NewApiInternalRunsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewApiRunsListRequest generates requests for ApiRunsList
func NewApiRunsListRequest(server string, params *ApiRunsListParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/playbook-dispatcher/v1/runs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "fields", *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort_by", *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiInternalRunsCreateRequest calls the generic ApiInternalRunsCreate builder with application/json body
func NewApiInternalRunsCreateRequest(server string, body ApiInternalRunsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiInternalRunsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewApiInternalRunsCreateRequestWithBody generates requests for ApiInternalRunsCreate with any type of body
func NewApiInternalRunsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/internal/dispatch")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiRunsList request
	ApiRunsListWithResponse(ctx context.Context, params *ApiRunsListParams) (*ApiRunsListResponse, error)

	// ApiInternalRunsCreate request  with any body
	ApiInternalRunsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ApiInternalRunsCreateResponse, error)

	ApiInternalRunsCreateWithResponse(ctx context.Context, body ApiInternalRunsCreateJSONRequestBody) (*ApiInternalRunsCreateResponse, error)
}

type ApiRunsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Runs
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiRunsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiRunsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiInternalRunsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON207      *RunsCreated
}

// Status returns HTTPResponse.Status
func (r ApiInternalRunsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiInternalRunsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiRunsListWithResponse request returning *ApiRunsListResponse
func (c *ClientWithResponses) ApiRunsListWithResponse(ctx context.Context, params *ApiRunsListParams) (*ApiRunsListResponse, error) {
	rsp, err := c.ApiRunsList(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiRunsListResponse(rsp)
}

// ApiInternalRunsCreateWithBodyWithResponse request with arbitrary body returning *ApiInternalRunsCreateResponse
func (c *ClientWithResponses) ApiInternalRunsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ApiInternalRunsCreateResponse, error) {
	rsp, err := c.ApiInternalRunsCreateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApiInternalRunsCreateResponse(rsp)
}

func (c *ClientWithResponses) ApiInternalRunsCreateWithResponse(ctx context.Context, body ApiInternalRunsCreateJSONRequestBody) (*ApiInternalRunsCreateResponse, error) {
	rsp, err := c.ApiInternalRunsCreate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseApiInternalRunsCreateResponse(rsp)
}

// ParseApiRunsListResponse parses an HTTP response from a ApiRunsListWithResponse call
func ParseApiRunsListResponse(rsp *http.Response) (*ApiRunsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiRunsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Runs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApiInternalRunsCreateResponse parses an HTTP response from a ApiInternalRunsCreateWithResponse call
func ParseApiInternalRunsCreateResponse(rsp *http.Response) (*ApiInternalRunsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiInternalRunsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest RunsCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}
