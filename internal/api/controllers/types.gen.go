// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Account defines model for Account.
type Account string

// Labels defines model for Labels.
type Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Meta defines model for Meta.
type Meta struct {

	// number of results returned
	Count int `json:"count"`
}

// Run defines model for Run.
type Run struct {
	Account   Account      `json:"account"`
	Id        RunId        `json:"id"`
	Labels    Labels       `json:"labels"`
	Recipient RunRecipient `json:"recipient"`
	Status    RunStatus    `json:"status"`

	// Amount of seconds after which the run is considered failed due to timeout
	Timeout RunTimeout `json:"timeout"`
	Url     Url        `json:"url"`
}

// RunCreated defines model for RunCreated.
type RunCreated struct {

	// status code of the request
	Code int    `json:"code"`
	Id   *RunId `json:"id,omitempty"`
}

// RunId defines model for RunId.
type RunId string

// RunInput defines model for RunInput.
type RunInput struct {
	Account   Account      `json:"account"`
	Labels    *Labels      `json:"labels,omitempty"`
	Recipient RunRecipient `json:"recipient"`

	// Amount of seconds after which the run is considered failed due to timeout
	Timeout *RunTimeout `json:"timeout,omitempty"`
	Url     Url         `json:"url"`
}

// RunRecipient defines model for RunRecipient.
type RunRecipient string

// RunStatus defines model for RunStatus.
type RunStatus string

// List of RunStatus
const (
	RunStatus_failure RunStatus = "failure"
	RunStatus_running RunStatus = "running"
	RunStatus_success RunStatus = "success"
	RunStatus_timeout RunStatus = "timeout"
)

// RunTimeout defines model for RunTimeout.
type RunTimeout int

// Runs defines model for Runs.
type Runs struct {
	Data []Run `json:"data"`
	Meta Meta  `json:"meta"`
}

// RunsCreated defines model for RunsCreated.
type RunsCreated []RunCreated

// Url defines model for Url.
type Url string

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// RunsFilter defines model for RunsFilter.
type RunsFilter struct {
	Labels    *Labels `json:"labels"`
	Recipient *string `json:"recipient"`
	Status    *string `json:"status"`
}

// RunsSortBy defines model for RunsSortBy.
type RunsSortBy string

// List of RunsSortBy
const (
	RunsSortBy_created_at      RunsSortBy = "created_at"
	RunsSortBy_created_at_asc  RunsSortBy = "created_at:asc"
	RunsSortBy_created_at_desc RunsSortBy = "created_at:desc"
)

// ApiRunsListParams defines parameters for ApiRunsList.
type ApiRunsListParams struct {
	Filter *RunsFilter `json:"filter,omitempty"`
	SortBy *RunsSortBy `json:"sort_by,omitempty"`

	// Maximum number of results to return
	Limit *Limit `json:"limit,omitempty"`

	// Indicates the starting position of the query relative to the complete set of items that match the query
	Offset *Offset `json:"offset,omitempty"`
}

// ApiRunsListParams_Filter_Labels defines parameters for ApiRunsList.
type ApiRunsListParams_Filter_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ApiInternalRunsCreateJSONBody defines parameters for ApiInternalRunsCreate.
type ApiInternalRunsCreateJSONBody []RunInput

// ApiInternalRunsCreateRequestBody defines body for ApiInternalRunsCreate for application/json ContentType.
type ApiInternalRunsCreateJSONRequestBody ApiInternalRunsCreateJSONBody

// Getter for additional properties for ApiRunsListParams_Filter_Labels. Returns the specified
// element and whether it was found
func (a ApiRunsListParams_Filter_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApiRunsListParams_Filter_Labels
func (a *ApiRunsListParams_Filter_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApiRunsListParams_Filter_Labels to handle AdditionalProperties
func (a *ApiRunsListParams_Filter_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApiRunsListParams_Filter_Labels to handle AdditionalProperties
func (a ApiRunsListParams_Filter_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Labels. Returns the specified
// element and whether it was found
func (a Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Labels
func (a *Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Labels to handle AdditionalProperties
func (a *Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Labels to handle AdditionalProperties
func (a Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
