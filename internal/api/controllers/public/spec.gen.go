// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
