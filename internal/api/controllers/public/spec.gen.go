// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"s/lfAAAA//9PaPzhQBkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
