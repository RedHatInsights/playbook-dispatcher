// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
