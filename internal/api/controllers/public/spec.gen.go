// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
