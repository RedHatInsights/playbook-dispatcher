// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
