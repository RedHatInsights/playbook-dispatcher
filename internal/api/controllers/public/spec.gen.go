// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
