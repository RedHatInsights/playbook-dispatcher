// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
