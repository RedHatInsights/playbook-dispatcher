// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/HB/+E8AAAD//1BtPun9IAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
