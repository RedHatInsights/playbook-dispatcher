// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9Ra3XMbtxH/VzBoH9oZhqRsJ5PyqZISjzVVrIwUtZlxNTJ4WJKwccAZH5RYD//3zgL3",
	"faCOctKO82YddxeL/fztwp9ppvNCK1DO0sVnWjDDcnBgwl+XIhcO/8HBZkYUTmhFF/Qn9ihynxPl8yUY",
	"olfEgPXSWeI0MeC8UXRCBZJ+8mB2dEIVy4EuqAwCJ9RmG8hZlLxiXjq6+HY+oXkUTBcv5viXUPGvkwl1",
	"uwL5hXKwBkP3+wm9Wq0sJLS7UFxkzIElbgPEOmacUGtSaCuQAtXFH4JmxIBkTmwBNcevaA0JDogFh5TC",
	"QY6CmCM5c9mmYT1wQx21Sl6xfad58k7XXr3R1r0WILkdXu0HWAkFlqzC76jzEkqDAydCBe0M2EIrC9N/",
	"oxfgsZCaA1044yGtcpTWUbkwugDjBEQlmOte5B3daBsu6ZjzyGq8oncTGsyFpKDwkjUd/tyito5rj9+l",
	"UB9tsOQWlNNmdy84yilNY50Rak339QdmDNsFS5Uf9PIDZA4prNtJ/MIBiqv6a21Q6cAMDXoqpX6wZKUN",
	"WQUSjJQls8CJVmTLjNDekswI/Ikda85w1mFzdi67+Ez/bGBFF/RPsyYVZ5HXzi4q2gv+1kvJlhLwWmjP",
	"xWeqqk+lOr1zgvSBKSVbgrRjB197dRkI28daMFuRwRjvTSRrONP+CsEwJipQjUk64Hn79eeR4HRCtVnf",
	"h38YyEQhQGFqeCNp7awJdSKHmDOl4VLZdlhapk0sdVrFH8fEN84u7zehD7C8z7SyWsJ9ZM8MMAf8ngWF",
	"C1798TtnsP2q0vc35E/jkVRifml2/X9y6UYbd7Yb+gC/E214sFnKoFYbd7/cpVtiK4QWKBd9VAZzJ7ha",
	"ZCxQ9fmGIbcPBo85HGxzxvg1fPJgg/kzrVzpCVYUEiGD0Gr2wepQWhtdnzLpj8ZoE4/qWuWMcVIdtp/Q",
	"19osBeeg/vcnn2YZWFvhmbXYgsJSpr3JgAhLlHaEYd4ADyFQCsTzTrNMe1VCqsIAoihe5UoPZHFQTqxE",
	"hH94kgPFQqnJ2eMlqLXb0MVJRDz1n4mycB79eJoAcqcEq5J1LC/IwwZiVQblzI48MEzrwEkndKVNzjCY",
	"sAB9g0w0cVK02CCdc7CWrSGRkSF+Pnlh0AjvasK7RNqk2nSiPw90uqxrCeM8wFMmf+6oN2Dp2ahmIzk4",
	"hh2GsKX2LhjrZ8l2S60/EuPVlJwzhX3OY3nslszCm0JbsFOauNtlwGgHVVwxaQfQYyWMTXi0RtuI+6oQ",
	"DbSkYGvoQ/MwU6RcKdnR0pH0ecIVPB4rHEmfJ7wwsMWmdOQBFflzDumFbXRFabNU7P4EEZU86d7+iBVT",
	"DsepGG01eMKyEDj7IdEqLW1RwxmyEhXaNcNxLA6H/XFpQp12TA5Fhs+J4TQMcBju7RmuPuLk5FVyJGvb",
	"Mt6hOjhlzCuzvuCJmfRwuawVoN++PPn+xd/mzy6hVZa/Df22f/QbnzPsAIxjJSLYlCsdik55uMW64DTG",
	"nAXlWu2jTYfoGB4dGCw5dmfDfPyXG+ZASuHgr9POlV6LR3JuhBMZk+T8nz9iWIzc5jqONt3gYU1neqop",
	"Vg1sPwC842jtvGG44EFCgz9GuJsetp/Qow6LJxyHJMsesa8A1dPUnWDY19PACFcM2z5CHbnEdU37bPB6",
	"PGi99iri1pDw5ZQyzvNLSbnvzCUjfLeRMvoRJ5wxeiORsj8XjXD9C5bnkTrwp1D4IBwHWX2rxCcPRDR1",
	"xZfpG9dUD9p8JCYCUPIg3IY0UDiddG907KndxNvoVKfF4KoPLHXYEUaQOpwmFDlVVmDBqbcdqXP7q5Aa",
	"yXkfptRh56/AyIj/8TYRuDTbkhGWL4zJcpc1sNGVd4V3pDCa+ww4We6wfCrsP5VpanimVavaliuzYVdP",
	"hUlzzyfWTJUTR+DoE0fYw8uMeglxhEeGe4AjPVq7Mi/BylPEAdD0W3dQt+SvDr1LX/i4fNMrwjoAuz2I",
	"HArf4VbgOdD/gP86yl+3C/gYCAn56jR52IhsQ1gZgPWlhCWMcwPWdsesJ253UydQ9+xzbwyCiphgSeNV",
	"c3+ZJXRCrQ+zLB7NhPQGOouqjKkMJKT3xa0W0F43vPxuPh+MUDliBlTJQqYVt4StHJjSKGETiLDHEqzx",
	"goPB8YkJCZxwHx8Oap3qB4zv5q++n4/s++Ne5bdn1h8gq24adNDbHsUf4guLM2K9DvZtqmEvSEbAY383",
	"hvN9h2N0Iu8tyVrL1S+Jy9HjGsjx3PVHGGxLbHP0DuTWJOal2+vLUAmq0agyeSflw753IK+LZZKSg2cL",
	"LZSrl1IWsvZL3AMsSYmf8KIGwldvwZCVUJzk2iCM6I+cwwnml7BNAMkxW3VR7kWW3pGNWG/kjli/XoN1",
	"wKfDuz0ZWfuAVVa6Wt+xLDgMciYkXdAP+j+w+rsBvmFumul8uKepw/gHYQtEaGBCeSUlbg4LmUP4wCJA",
	"QA+FGqQgc8DJVjByLrXn5Dx+0yasb4QLk1fiQDqhWzA2KnQynU/nYUAoQLFC0AV9OZ1PX+Lcztwm1I4Z",
	"K8SsMvE3vBY0257MjFcBVwTCdeod9jrM8XhHKWyor7Ee4IRfzph42XgvobZabuPjSzvl7ZTcKgkWmdAZ",
	"4ereImNcX9nqrSYsOC2xBY66hGVGW0tyL50oJPRlvtUkB7NGMdoQDtzXe1h0SwEGoyOiNrcRttmgfkPE",
	"FKZErCq4+ysytNVvx6Qlp4QpTs5QS0XcgybWLxttAzKHR2HdhGgFXcv82gREEIIEGCZn8UUKW0Y9H9DT",
	"QlRY7VIEANl+yn+Xru0Nyaz7ULqfHM8QHr2OYIj/meAIwvJhf3/X29+/mM9/t/V5jWsTG/Srf2BevIqn",
	"pYTUWs1aTwqB5eU4S/MUELbvPs+Z2dEFRa+NJUNgGcnK5yRkR3iIrabxliuXWFUDQxb3xzHv6jREjvfx",
	"23tSe7FVjG3iZbWM8phwpVz0q9FShlkWJb+P7G2pBwP/i4PePivi7fHh3noz+wMmx9eWGP00KDdOlZ+7",
	"esaZO8RWJCrfuxd041xhF7NZho1z2mnYB/fx2A5rATO6v9v/NwAA///3sWy4NSUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
