// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
