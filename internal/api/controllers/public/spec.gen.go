// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9Ra3XMbtxH/VzBoH9oZhqRsJ5PyqbISjz1V7IwctZlxPTJ4WJKwccAZH5RYD//3zi7u",
	"m0cdpaQd58067i72G79d+AvPbF5YAyZ4vvjCC+FEDgEc/XWpchXwHxJ85lQRlDV8wX8SdyqPOTMxX4Jj",
	"dsUc+KiDZ8EyByE6wydcIennCG7HJ9yIHPiCaxI44T7bQC6S5JWIOvDFt/MJz5Ngvngyx7+USX+dTXjY",
	"FcivTIA1OL7fT/ib1crDgHavjFSZCOBZ2ADzQbigzJoV1iukQHXxB9KMOdAiqC2g5vgVvaEhAPMQkFIF",
	"yFGQCCwXIds0rEcstEmrQRPbNs0HbbqK5qX14YUCLf2haT/AShnwbEW/o85LKB0OkilD2jnwhTUepv/G",
	"KMBdoa0EvgguwrDKSVpH5cLZAlxQkJQQoWvIO76xnowMIkRkddHw9xNO7kJSMGhkTYc/t6h9kDbid63M",
	"J0+e3IIJ1u1ulEQ5pWt8cMqs+b7+IJwTO/JU+cEuP0IWkMKHncYvEqB4U3+tHaoDuEOHnmttbz1bWcdW",
	"RIKZshQeJLOGbYVTNnqWOYU/iVPdSWcdd2fH2MUX/mcHK77gf5o1pThLvH72qqJ9JV9HrcVSA5qF/lx8",
	"4ab6VKrTO4ekr6zLReALHqOSqGWP58DVWixB+zHFrqK5JMK2Wh7cVmUwxvs2kTWcw/GkZBkTRVRjko5k",
	"hv/664xCZt36hv7hIFOFAoOlE53mdbAmPKgcUk2VjhuqxuPSMutSK7Qm/Tgmvgl2ad+E38LyJrPGWw03",
	"iT1zIALIG0EKF7L643eucP9VlfdvqJ8mIo8p3MdW3/+n1t5aF57vDmOE35l1knw65HBvXbhZ7joerxK6",
	"k2DNHwvhs+4HPHMg7fbk9FTHZP9zIa/gcwRPIcisCWU0RFFohBXKmtlHb6n9Nvrc57YfnbMuHdW1/LmQ",
	"rDpsP+EvrFsqKcH8708+zzLwvsI8a7UFg+3MRpcBU54ZG5jA2gFJYS4F4nnnWWajKWFX4QCRlqxSsgfE",
	"JJigVipBRDwpgBHUbnJxdwlmHTZ8cZZQUf3nQGJfpDieD4C9c4adyQeRF+x2A6kzgwlux24FljZx8klT",
	"TdiEvkEmPnBS8thBSefgvVhTZfUTCPPnc1QOnfCuJnw/UBpDV/ljyvyy7i9CSoK0Qv/cUfeApeezmo3l",
	"EATeOkwsbQzkvJ+12C2t/cRcNFN2IQzefRFbZreNFtEV1oOf8gFbLwnXHVVxJbQ/gCsr5fxAhGuEjlix",
	"SlmiZYVYQx/O0xzCB2HNydKR9GHCDdydKhxJHya8cLDFi+rEAyryhxzSS+MUitJnQ7n8EySkcm94+2NZ",
	"ynQcwVK21YAK2wRx9lOi1Wraog7nzkoUXeECR7g0UPZHrAkPNgh9KJI+Dwy0NPRhurfnvvqIs7Nng2Nc",
	"25fJhurgIWe+cetXcmCOPd4+awX4t0/Pvn/yt/mDW2pV5a/pju0f/TLmAm8EIbETMbyIKx2KTnu4xr4Q",
	"LOacBxNa10mbDhEz3AVw2HL8ztNM/Ze3IoDWKsBfpx2TXqg7duFUUJnQ7OKfP2JajFhzlcahbvKI5qa6",
	"75KsLrT9AQgeR3AXDcMrSRIaPDLC3dxp+wk/6bB0wmnosrwj9hWIup+6kwz7ekIY4Upp20etI0Zc1bQP",
	"BqynA9WraBJWpYIvJ5dxnl9Kyn1nVhnhu06UKY449YzRO42U/VlphOtfsLxI1MQ/hLwP0vGgqq+N+hyB",
	"qaavxLJ802rr1rpPzCVAym5V2LAGGg8X3Uub7tRu4W3s0E2LyVUfWOqwY4IhNZ2mDDs3XmHDqTckQ+f2",
	"1yd9AHV481dgZCT+aE0CLs2GZYTlkTlZ7r8OfPQmhiIGVjgrYwaSLXfYPg3eP5VranhmTavblmu2w1t9",
	"KE0aO+9ZTVVBHIGj9xzhjy846sXECRE53A2cGNE6lHkJVu4jJkDTv7pJ3ZK/OvT9sMGn1ZtdMdEB2O3B",
	"5Fj6Hm4KHgL9j8Svo/xVu4GPgRCq12DZ7UZlGybKBKyNUp4JKR143x277rHubV1A3bMvonMIKlKBDTqv",
	"2gOUVcIn3EeabfFooXR00FleZcJkoGF4x9y6AtpLuKffzecHI1SOmAFV8pBZIz0TqwCudAptBxH2eIY9",
	"XklwOD4JpUEyGdNjQ61T/ejx3fzZ9/ORN4K0S/ntlfUHqKq3DTrobYzSD+lVJji1XpN/m27YS5IR8Njf",
	"h+G83+EYnch7i7HWfuoxeTl6XAM5HroOocG2xDYn70Su3cC8dH11SZ2gGo0ql3dKnnbAB/K6WGZQMkW2",
	"sMqEeknlIWu/3t3CkpX4CQ11QF+jB8dWykiWW4cwoj9yHk4wv9A2AbTEarVFuRdZxsA2ar3RO+bjeg0+",
	"gJwe2nZvZu0Jq6xstc4TGQUMcqE0X/CP9j+w+rsDuRFhmtn8cE9Tp/EPyheI0MBRe2UlbqaFzDF84BEg",
	"YISoBxnIAki2VYJdaBslu0jfrKP1jQo0eQ0cyCd8C84nhc6m8+mcBoQCjCgUX/Cn0/n0Kc7tImyod8xE",
	"oWaVi7+RtaDZ9mzmoiFcQYTrobfbK5rj0UatPPXX1A9wwi9nTDQ22aXM1uptepBpl7yfsmujwSMTBoNM",
	"jx4Z0/rKV+83tPD0zBc46jKROes9y6MOqtDQl/nashzcGsVYxyTIWO9lMSwFOMyOhNrCRvlmo/oNU1OY",
	"MrWq4O6vyNBWv52Tnp0zYSR7jloaFm4t83HZaEvIHO6UDxNmDXQ982uTECQECTBNnqdXKrwy6vmAnxeq",
	"wmqXigBk+/n/3XBvb0hm3cfV/eR0BnoIO4Eh/QeEEwjL/wywf9/b5z+Zz3+3dXqNawc26m/+gXXxLJ02",
	"JKTWatZ6YiCWp+MszdMAbeNjngu34wuOURsrBmIZqcqHFGRHOOVWc/GWK5fUVYkhS/vjVHd1GSLHh/Tt",
	"A6uj2GrGfuC1tczyVHClXIyrs1rTLIuSPyT2ttSjif/opPcPynh/erq33sn+gMXxtRVGvwzKjVMV566e",
	"aeam3EpE5Rv4gm9CKPxiNsvw4px2Luyj+3i8DmsBM75/v/9vAAAA//85b86aaSUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
