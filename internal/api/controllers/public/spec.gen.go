// Package public provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ler9/n8BAAD//3cHC4H+GwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
