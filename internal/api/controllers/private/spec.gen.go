// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//zE3Qt2lJAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
