// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
