// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYW2/buBL+KwTPeTgHkG3ZcdLATyfNWWyDbTdBentoi2AkjWy2FKmSlFO38H9fkNQ1",
	"Uuw0TXbzpgs5883t43B+0FhmuRQojKaLH1ShzqXQ6F6eQ3KJXwvUxr7FUhgU7hHynLMYDJNi8llLYb/p",
	"eIUZ2Kd/K0zpgv5r0oie+L968ptSUtHtdhvQBHWsWG6F0IXVRSpl9m+5wco7BREjPxN5Yd7N7IdcyRyV",
	"YR6lVMsrluxTfK6WZwndBjRXTMQsB75vx0W9cBtQVYiukvEkLyLO4rHMUUDOxhvI+KCcy0JYzVYIfi2Y",
	"woQuPlQCgwp+G9ingJpNjnRBZfQZY2MBeMf1jM9Qa1iifez680WRgSAKIYGII0G7nVSrA4rfIMu5VfGK",
	"CZYVGdFGMbEkHMXSrAjTZEprGP5fz4ZK3BBe7+8erLMEhWEpQ03MColUSxDsu8skYlZg3NclW6PFrmWh",
	"YiQRcimWmhhJA5rBt5cOIl1Mw4BmTNSvPbgBvWgHu4vkrUYlIEMiU6e00KgIEwYVxMZ64pqZlfujUa1Z",
	"3PXa5xUou4ruhXCJMcsZCnMqRcqWfSCqWjDSOcYsZTGJ3dJCeb9It1K7FGnHXoMpc/IWH6vKttdgkHNm",
	"kDChjS2njjEAB9E0BRgdHqUHo3kynY+OZ4fHo6PpYTKd4iwMj0Ia0FSqDAxd0KJwCdsz1QJqqnEfqE7s",
	"rbOZaIB28E1nB/PDfZ7eDiRh7fvXBkzhnAacn6d08WF37dcb3zOzOlfWupuVF0shMDY4ZKtILDuiJtcr",
	"NCtUBEi53NrKNEFtIOJMrzBp8qxOhMa3kZQcQfQqr1Her71PbcMr/L/Kmg22e1JgjajPhC2zS1RDhHJZ",
	"CH8QeI/fDEYywIHaRZ3Yn1XSqfKIaaXXLJzV6mz9L1E9CuM7jLXc20xUCObhLZwOWfjw1t1ilDu6+yZB",
	"HMvinhl1Uu7dBnQlte9ddhZ0ieKFW7wNKIcIub6X7pd+6wNXRUANy1AW95b1pty+DWih+L2kvFV8Z3lW",
	"EfMadkX7RRWUbr6euwfgfBMQJvyBYikRIlkY4iJJmFhLvsaEMOES+oLDJpLyC1GFIDEIEiHJlVyzBJPx",
	"R/FmxXRHFtP2LE+IkSRXOALOpSVju/3KaqgbCz3+KF5JhXKNKiDMVMKr3bGrxS53R2iuEQWBvjgCInEm",
	"WAtQGKk244+CBpQZzPRA+gvNIo5OyED/ZgW5/gQ0+SLktbCQTvyejoa3JVzmT9iNc1qJg5QEoTCXymiP",
	"pzlYrWe40z9wmtc6hs/z6i9hSUU9vm8r5TVa0jSaPwtn4QiO0mQ0P54no+MwOhwlEIYwh4MwSmf724uh",
	"8738AErBpp19Q9eEf5AmbBjvJaJK/T+tgG3QP7TvLupX7z8PynS1tKu4borv1I6VPfTTIcuAXmNkrdCS",
	"49V9Rb3H6NSL2MfAA7dFb0GZZbdwsm63TjUf7amEes9wpelWr3JnkeWWAYnvUGnmRwldpil/VCRzcnHW",
	"YZf1bO/NwJFZKqshBsQubTADxu1VTn7H9H8KkxWYcSwz2ptN1CfQ/5nOwcS2o2eaQHUzJKlU9jwQ9tpY",
	"UXS1SRMpypOt7trJmgE55bJIyKn/JtXYUh4zzqYhhWf2aiqAlw5YV+6i03E4Dh07+DSjC3owDscHNknA",
	"rFxYJqzcPUlKiY4gB0+eWqdu2VBoa9sNyO7E00YqtLYpPztK7EJ7VCuMpUq0tcvysDuczxK6oCc5q4xp",
	"0oj6nEdtnstk81Pzprsmn29Dt26GcOb3HPoRQvk2vZmVW1+KrZHYLHz2YLOwdg0NTMTO/7BY52F4m5wa",
	"2KQ1qHOzsyLLQG1asWwi6RY06bCeTWJX5rfng6eBJhmIxT2cELtC/W7W8NBjB7s7MXxiEa9Z9XFC7uV3",
	"o9UP+tOigTI3/lYieHqJsZsKfrqu67ZBT3Q9/hqOdX9g1R7DlmL+o/9LQCGBNTAOEcc9Ea3Vl8O3x45r",
	"f2T3s/EMHxFV6YRtH8djkMB5ZICJ9sW1vAjKtBPQm1nT9GBL3JknPj/s5XfNtB/eu9aMXIMmUcG4IamS",
	"2e6qL7X9Yhx2ub9ScZea+h0N6ay33R0q7YbFrrOnExr0hvccDFsjsa0W3X7a/hUAAP//AcNNdVEbAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
