// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
