// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Send a job request to the recipient(s) based on a list of host IDs
	// (POST /internal/v2/send_job_request)
	ApiInternalHighlevelJobRequest(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalHighlevelJobRequest converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelJobRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelJobRequest(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v2/send_job_request", wrapper.ApiInternalHighlevelJobRequest)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IumbrKcsAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
