// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
