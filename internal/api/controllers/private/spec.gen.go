// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xVW3PbNhP9K5j9vkeaoi9pMnyq6z5E03aa8SRPcSYDAksLDrhAF6AS1cP/3gF4kWW5",
	"zURPEi97ztk9B8tHUK7zjpBigPoRgtpgJ/Pf255uGGVEna48O48cDeZnymlMvxqDYuOjcQQ1hChjH0R6",
	"KFwr4gYF4189hggF4DfZeYtQX1TnBcSdR6jBUMR7ZBgKMJnm/4wt1FCufN9Yo0rnkaQ35U529n+rvdbV",
	"JHR129NawzAUkKgMJ7UfR32fFhrXPKCKiSW9Tr6Pxy1JpVxP8SQR11PtUMDGhXGSE8i/ik4q3uaXhwKs",
	"bNCGk7h/H0vzAJTxBk/s4ban2wVgKCCaDl1/Mtb7qXwooGd7EsoHtkfG7nssFsdGhv9y++1symFe/8x/",
	"pLW7QhhqHXcy3RCycX0U2UlhaOvsFrUwlAP9zspd49wXwT0JJUk0KDy7rdGoyzt6vzHhAMsE0QfUIjrh",
	"Gc+ktU7JiKn8c2IQjMH1rDCUd/SHY3Rb5EKYOIPP1SqfRSGFckSoMniD8SsiCXkMJyTp3ELqACk63pV3",
	"BAWYiF14If4UTGMxgxxPKg1QkOxQyCC+kPtKSdL1WHPA8GGSazRSNO0uD23SIaYFwegdxzDqWfYCpMnY",
	"zL9YGSIbus/rYeb4PC6KQ33r+akwel4992aLJCa8PUvbNlevq4vqTP7U6rOrN1f67E3VvDrTsqrklbys",
	"mvYCChgdhBr63uhjQc9ieTC9l5I43ZDMcjclMzzZrosp39kac8kR4pBH1LpxOVOUKruInTQWanhwf2P7",
	"M6PeyFgq1yWAwwkuuf7VBC+j2iCn7EoRkLdGoWgdp5SRofvF+LkoCEfTeZnSiVpsjRQ31vVa3Iz3HJdp",
	"kCZmH14iXFNEJmnF9bs1FLBFDqO687IqqyR6WhpQw2VZlZdQgJdxk0e3MlP1Sk+IOeUv5nnhDE966EPq",
	"7ZnkfI5CdIypN2YM3pFOL6YFwKgc65D6SocpH/m1hhquvZmb2VsNY2gwxF+c3s1WTQtbem+Nygirh5BU",
	"zl/jHwnI+HEbCujkt/VY86oqoDM0XZ0fJydnObUVxlVwUb3+IW3fkbTkPDM928C/5aMU+q6TvHtizN6W",
	"sSylEDlA/fFx/J7ACp6DMVoZzRZFigQMn4Z/AgAA//+5XZxV3QgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
