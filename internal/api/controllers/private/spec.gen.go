// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//97np35ziUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
