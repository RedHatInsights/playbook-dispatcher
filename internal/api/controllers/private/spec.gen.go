// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Send a job request to the recipient(s) based on a list of host IDs
	// (POST /internal/v2/send_job_request)
	ApiInternalHighlevelJobRequest(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalHighlevelJobRequest converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelJobRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelJobRequest(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v2/send_job_request", wrapper.ApiInternalHighlevelJobRequest)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
