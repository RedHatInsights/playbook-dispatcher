// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Send a job request to the recipient(s) based on a list of host IDs
	// (POST /internal/v2/send_job_request)
	ApiInternalHighlevelJobRequest(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalHighlevelJobRequest converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelJobRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelJobRequest(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v2/send_job_request", wrapper.ApiInternalHighlevelJobRequest)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"581/AgAA//9hExT3ZScAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
