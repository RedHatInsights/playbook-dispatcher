// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/highlevel/recipients/status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/highlevel/recipients/status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
