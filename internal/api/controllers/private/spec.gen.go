// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXT3PbthP9Kpj9/Q7tDE3RstNkeKrrHqJpOsqkSXuIMxmQWIrrgAALgHJUj757ByBI",
	"/aFijz3NjZK4+97ue1is7qHUTasVKmchvwdb1tjw8Lg0q4XwDwJtaah1pBXksBCoHFWEhumKuRqZQ8WV",
	"gwQa/vUNqpWrIT/PEmhIjR8TcJsWIQfrDKkVbBN4hyW1hMr94bjrAiSXcllB/vEe/m+wghz+N9vRm0Vu",
	"szHwL3L10vhk99Aa3aJxhCFRqZXC0uEp/kpQyR1adlejq9EwzuLrpBUjy9A6XkiyNQp2R64ORZoBFMZS",
	"Cq0lcgXbbQIG/+7IeLyPe+Cfxnd1cYulg+2n/cIH/vkxfW1Wnylwf6gPvUABfOC2i0hnbVdIKlPdouIt",
	"pRveyNPt7NTIaFLLftmR1bSoBN516togjw0/1kLgVAYbRGf+x8FHHhetR8KvvGklQj7Pds4h5XCFxsMd",
	"9OZJlfqGTeQS+K2iFqrt3LQkXpa6e2a7r2LsNoFa2/7UPej2yOJ1eHmbgOQFSvss7Dd96H9smQQcNai7",
	"Z+d6H8O3CXRGPivLByMf9O6gWI/wkNqvB1EO/boMD1zKTcJIVdo0PMwLXujOsaAkI7XWco2CkQqGfiv5",
	"ptD6CzOdYiVXrEDWGr0mgSK9Ue9rsge5yLLOomBOs9bgGZdS+0nlwz97BGbQ6s6UaNMb9bs2qNdoEkZu",
	"SD5El+EsHg62At0domJ8mo5xJUIJvgJUTptNeqMgAXLY2BP2V5YKiSHJtFO+gUzxBhm37IvSd8pTuupj",
	"DhA+RLrUXymb0LTIg8UBYbDVxtmezzgXwHdGBvwTN8uIEYfo8QUQf2UkhtGzojUqFvPtUKqquHyZzbMz",
	"/lMlzi5fXYqzV1nx4kzwLOOX/CIrqjkk0CsIOXQdiSmhI1sedO+UE+MX3Bi+ic60e9N1FOWRqTGETDJu",
	"Q4sqHS9Kx8ugIjacJORwq//B6meDouYuLXXjExx2cPT1r2Rb7kp/iZJlnFk0ayqRVdp4lylSq1H4Icgy",
	"reJ5GS9KtibOrqXuBLvuv9Mm9Y0kF3Q4BbhQDo3ikl29XUACazS2Z3eeZmnmScehATlcpFl6AQm03NWh",
	"dTOK0TMRMwaXn/TziGn3auisr+2IcjhH1mmDvjZj0LZaCf+iHwAGS22E9XX5wxSOvF+w4KqloZid1NCb",
	"Bq37RYvNIFUc2LxtpV9iSKvZrfUsh83tKQbpL7dt2NsWfcyLfm2Ln86nzgle9mXZfhTMs5dP4vYIpdHn",
	"AeloAv8WjpLtmoabzZ4wO1nCCztt1/PZeAfYmR3XzEHnb8rw53y83mzcTr+3HNOd9qlCZN+RVWzCyVHy",
	"iErLwnFS+zdRnOy62i3VP9gf+2R+gqCx4T9A2AVgBscQBiV3tEbmj7Nfqf8NAAD//5UP3BTFDAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
