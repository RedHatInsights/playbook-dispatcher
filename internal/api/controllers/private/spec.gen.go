// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xUwW7bMAz9FYHb0bDTFsMAn5Z1l2ADVgTbqehBkZlGnSxpJBU0K/zvg2zHSZsVQ3NK",
	"bIuP7/E96glMaGPw6IWhfgI2G2x1/3eZ/DWhFmzyU6QQkcRi/82EBvNvg2zIRrHBQw0sWhKr/FGFtZIN",
	"KsLfCVmgAHzUbXQI9eXsogDZRYQarBe8R4KuANu3eU+4hhrKKqaVs6YMEb2Ottzp1r2rDlyrkWi1TH7R",
	"QNcVkFtZymxvB353U5uwekAjuUs+7mOSU0namJC8nEViPtZ2BTi9QsdnoXwbSnspxkaLZ7JZJr+cALoC",
	"xLYY0tlYP8byroBE7iyUn+ROLDpoLKbZDx1e8Y2P0mgF2+Mhv8Z9X9JNkJpI76DLbKxfhyHMXrTp54Ot",
	"tg5qeAh/cP2JsNloKU1oM8DzrN84vVuF8Et9sRy1mA2Ssqy0YqStNajWgRQl762/V3PPduVQ7YtYBa82",
	"gSUvi/doBBu1tVpdu5AadT28C1RCdk/y1vyz4cILktdOzW8WUMAWiQd2F+WsnGXSozVQw1U5K6+ggKhl",
	"04+usmN11YyI/VIEltPNnnrykYbEWdsLykr7RrEEwqyNCDkG3+SDlLwiNIEazrry7ukMv2ighnm0ezEH",
	"q2FIDLJ8Ds1ub9W4FjpGZ02PUD1wZrm/vd4SkOEy6Apo9eNiqPkwK6C1fny6OE1OH+Qsi4eb43L28U3c",
	"/kNpynnf6bkP37/2e8SpbTXtjow52DKU5RQiMdS3T8PWQgUvwQidFrtFlSMB3V33NwAA//8/YUFGDQYA",
	"AA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
