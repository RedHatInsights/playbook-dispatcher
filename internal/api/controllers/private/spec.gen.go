// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xUzW7bPBB8FWK/7yhIToKigE5104vRAg2M9lT0QJPrmClFsrtLI26gdy8oyT+pGxTx",
	"yZbEnZ3ZmeUTmNilGDAIQ/sEbDbY6eHvModbQi1oy1OimJDE4fDNRIvl1yIbcklcDNACi5bMqnxUca1k",
	"g4rwZ0YWqAAfdZc8Qns9u6pAdgmhBRcE75Ggr8ANbf4nXEMLdZPyyjtTx4RBJ1fvdOf/a45cm4los8xh",
	"YaHvKyitHBW230Z+3w9t4uoBjZQu5XhIWc4laWNiDnIRiflU21fg9Qo9X4TyaSwdpBiXHF7IZpnD8gDQ",
	"VyCuw5gvxvoylfcVZPIXoXwlf2bRUWN1mP3Y4QXf+CSNTrA7HfJL3Pcl/QFSE+kd9IWNC+s4hjmINsN8",
	"sNPOQwsP8Reu3xHajZbaxK4APM/6nde7VYw/1AfHSYvZICnHSitG2jqDah1JUQ7BhXs1D+xWHtW+iFUM",
	"ahNZyrKEgEbQqq3T6tbHbNXt+C5SDcU9KVvz14aLIEhBezW/W0AFWyQe2c3qWX1VSE/WQAs39ay+gQqS",
	"ls0wusZN1Y2dEIeliCznm33oyScaMhdtf1BWOljFEgmLNiLkFIMtBykHRWgiWS66yu7pAr+w0MI8ub2Y",
	"o9UwJgZZ3ke721s1rYVOyTszIDQPXFjub6/XBGS8DPoKOv24GGvezCroXJiers6TMwS5yOLx5rievX0V",
	"t39QOuR86PTch88fhz3i3HWadifGHG0ZGP4OAAD//042CI/XBQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
