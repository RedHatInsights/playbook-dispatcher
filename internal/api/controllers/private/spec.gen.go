// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Obtain Connection Status of recipient(s) based on a list of host IDs
	// (POST /internal/v2/connection_status)
	ApiInternalHighlevelConnectionStatus(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Send a job request to the recipient(s) based on a list of host IDs
	// (POST /internal/v2/send_job_request)
	ApiInternalHighlevelJobRequest(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalHighlevelConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelConnectionStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelConnectionStatus(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalHighlevelJobRequest converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalHighlevelJobRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalHighlevelJobRequest(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/connection_status", wrapper.ApiInternalHighlevelConnectionStatus)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.POST(baseURL+"/internal/v2/send_job_request", wrapper.ApiInternalHighlevelJobRequest)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
