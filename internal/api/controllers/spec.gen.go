// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4T8BAAD//xRAh1G6FQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
