// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error

	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX32/bNhD+V4TbHrXIabAN0Fu6YYCxFCmc9qkIClo82ewkkiWPWYxA//twpCz5hxy7",
	"29A3k7o7fvzuu+P5BSrTWqNRk4fyBaxwokVCF1d3qlXEPyT6yilLymgo4Z14Vm1oMx3aJbrM1JlDHxry",
	"GZnMIQWnIQfFpl8Dug3koEWLUEITA+bgqzW2IkWuRWgIyp9nObQpMJRvZrxSOq2uc6CNZX+lCVfooOty",
	"uK9rjxPo5lqqShD6jNaYeRKOlF5l1njFFgyXP0RkmcNGkHpCRs67zEaDhJlHYktF2HIgQVkrqFqPridu",
	"aBKqySvu3mk2eadF0P4P1RA6dsRn2xiJUJILOH1cnYx3j7POWHSkMKawEUts4i8hZSRANO/3LHoYnpzS",
	"K+hy0KFpxLIZzu0NzPILVsQGDitlFepIfm1cKwhKCEFJOOk9hvckKMSTUTMTn8AFrfljDj5UFXoPOdRC",
	"NcEh5ECqRRMIHs/G7iawetqwPUhEez/sMs8PxtHbDeOYItYbR5+Xmz1mt3grh4JQfhac53FRCl/tb7Aw",
	"Gfchzm4bNdJwW1UmJDJb8XyHekVrKK+TWoblBJN3Z3M7SO+lm/A/IusdkjgdrhaNx/xAXwP0/SI8bg2p",
	"LyBLBJ8FV1mq+YkqcPg1KIcych3jP06AXQR9LHcxcvmjwxpK+KEYO1zRs15sKe9yUPKc8SLouWTTsZZe",
	"M++zclgnZ05YDLZ7JXLG6yEZdmOVnPf50Ft2OQTXnHP46JqjnMQ63zK9e80UcSBqRDVc6UQif0s1c5zP",
	"Kva/Q3WlYBl/3LZzxoeedtX1ZjbxcHxDwo+UKPEU/rmcaoVHBceW2qYs/Vfdfjcxfk9l7UppFBgHO0H8",
	"4rWnaIr/h3//+kyF+zCSM/Tam194etlX7G3Ld2GxeqyMlj4TNaHL/l6rfqhwQWeKNa29kuhQZgwCZSZD",
	"mk6GUjqWND9nx5qSInXzOMNckL6dJ0E4Jza8bvsX4TXX+GocZjIe3vufyJ3fqfpLMW5dJqB+TJIbRRBb",
	"0cTTq3Rt4uCjKI4G7xuxWRrzV/a78paHvDhQPaHzKXezq9nVNZ9gLGphFZRwczW7uoEcrKB1hF0Iqwrb",
	"B/pJDoGKp+vC9dlZpWmVUyRYFtw04NYqpuJOxd61O35/miZjNCl2psUuv8i6n3kusE6j/wWG/RjePXL+",
	"vTXaJ/W9mc1SA9fUl6ewtuHJXBldfPEmvt7jcHUm8T7lbr+q7v/k3S6HgovBadEUW+pjORg/zfi8tx5F",
	"CEm96OmtkZtvAn6pdFPn7+K/nHny6We87epQ010qqj1Sf/1fSR3K6SS3XfdPAAAA//9U2OsxIw4AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
