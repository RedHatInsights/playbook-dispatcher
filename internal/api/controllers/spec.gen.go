// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error

	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXW2/bOBP9KwS/71GNnWQvgN6SvQDBpkjhtE9FUNDi2GaXIllekhiG/vtiSFmSIzpy",
	"usXmKaKHw5kzh2eGO1rp2mgFyjta7qhhltXgwcavW1ELj/9wcJUVxgutaEnfs2dRh5qoUC/BEr0iFlyQ",
	"3hGviQUfrKIFFWj6LYDd0oIqVgMtqYwOC+qqDdQseV6xID0tf54XtE6OaXkxxy+h0td5Qf3W4H6hPKzB",
	"0qYp6N1q5SAT3Y3iomIeHPEbIM4z64VaE6OdQAsMF3+IkRELknnxCBg5riIaEjwQBx4thYcaHTFPauar",
	"Tb/1SIY6RZVNcZjTPJvTIij3pwDJI/zwbKTmQEtvA+SPWyXj4XHGagPWC4g+OPNxNSYSnSo8/jMVnBaU",
	"VZUOCsO1UAkjIP4frKQFlWwJEl17UYMOMSfPfMClygLzwL+waG74/uOhy8p5K9SaNt0Cs5ZtY5Ltgl5+",
	"hcqjhfNbiSscwNx1qwkL6cGejEU0Po5Fm1G5o4zzSAYmPxxYjIJXQUq2lN25o9h73ModXWlbM09LGkKE",
	"98ju3n0L6KAsNiiFPxbUhaoCh2ivmJDBwqAUD5O+34bzvbb+eht5kgHWaeu/LLcHyO7jPWBC/1EyVx0u",
	"4CXN8AMDTV4jDFctIcsdisEtqLXf0PI83ZzuM4Pkb+mkq4wgXBGEzXlWG/K0ARXvMChvt+SJOdLGiDjv",
	"y4d8foebaOakP6zVdkyuGpxja8iwKLLkWxAWOCK2N3zIVOh2kqGdmOya43etd/ge0vXPu1sx6aB4kUhX",
	"gEMUx2KflD4iB88MdTOpeEbXhvkn/7nsF0GNcWU9I/5vYUVL+r9Z37NmLXdme+I0B+I0saknTVOgIE6Y",
	"L4K64WjaC8lr5m0xX4rExAmLzvZAHyZ23SfDppeI6T0fW8vmQMIn9n1KlgkybBRT9lbmxWgRVAv/uOZV",
	"VPqXDExgEPxx38SRV+D8kIEX88y48IbqjtjK4RhZb3hO9EeXEi2VSSX5t9z+z5j3fTQ6nQ9DjIezRz+R",
	"oLMjwC9ea7o5/O+/v8/m3H3swen0+PIXnFlfdJ4ac0GyOqi04o6wlQdLnjaiHSVtUEQgp5UTHCxwgkEA",
	"JzykmbSbvcaUxsZ9wsA3Ub7xiFbQuu0ar22NneVlJePh7f4jtXODW39qjPstmVB7PXpr35fMedIK38nN",
	"/1NieM+5OCpnZhqhVjrOAsLHmeuDZNul1n+T34Uz+JKIk+ojWJeCnZ/Nz87xBG1AMSNoSS/P5meXtKCG",
	"+U1EacaMmJnW0TveOZo9ns9sS4Z1ehIhIxjigBpFr4xA5G9FlMrhG+9zHvveZDYYw5viROv4JjnRuh09",
	"T7BOr9ETDNuXYfOA5HRGK5euxsV8nrqL8q12MGMkPhaFVrOvTsfxo59xJ1jpUqUPSXf3Fxbxpx94Upo3",
	"M0ddM04WbQNs4u8zVAermJztyRH1Qbs8J25a6/5W0nSdwflrzbdvSuHUu5xaYRMf+zdpTzve779GT8ak",
	"MgeF/PWHFrLTl3w9498/AQAA//8RstI5KhEAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
