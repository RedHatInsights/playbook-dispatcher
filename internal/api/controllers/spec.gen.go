// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ILe7xHRpiR7+GwAA///cxLms1xUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
