// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List hosts involved in Playbook runs
	// (GET /api/playbook-dispatcher/v1/run_hosts)
	ApiRunHostsList(ctx echo.Context, params ApiRunHostsListParams) error
	// List Playbook runs
	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunHostsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunHostsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunHostsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunHostsList(ctx, params)
	return err
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/run_hosts", wrapper.ApiRunHostsList)
	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ccw+LNHC/wUAAP//fupmk30dAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
