// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/playbook-dispatcher/v1/runs)
	ApiRunsList(ctx echo.Context, params ApiRunsListParams) error

	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiRunsList converts echo context to params.
func (w *ServerInterfaceWrapper) ApiRunsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ApiRunsListParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiRunsList(ctx, params)
	return err
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/playbook-dispatcher/v1/runs", wrapper.ApiRunsList)
	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXS28bNxD+K8S0x40l22gL6Oa0KGDUgQM5OQVGQC1HFlMuyZBD24Kx/70YcqXVY2XJ",
	"adGbSM2L33zz2BeoXeOdRUsRJi/gZZANEoZ8utGNJv6hMNZBe9LOwgQ+yGfdpEbY1MwwCDcXAWMyFAU5",
	"EZBSsFCBZtHvCcMSKrCyQZiAyQYriPUCG1ksz2UyBJNfxhU0xTBMLsZ80racziugpWd9bQkfMEDbVnA7",
	"n0cciO7aKl1LwihogSKSDKTtg/AuapbgcPmPHJkIaCTpR+TI+ZbRMEgoIhJLasKGDUkSjaR60aseeKEr",
	"UQ0+cfNN48E3TZONf2o0KsOPz944hTChkHDY3bwIb7rzwXkMpDHbUJLybecsUtD2IfvqbtzsG9YEbQWR",
	"loZvFKK/Xd+WkAxhODmkLHw4JCNnaPIvqVTOiTQftyR2gq3AJmPkzKz97sUesNZeo818mLvQSIIJpKQV",
	"HNTuzUeSlArklpPzBUKylv+sIKa6xsgQz6U2KSBUQLpBlwjuj9p+G853LtD7JccxBGx0gb7OllvIruKt",
	"A0pC9VUy9frDRMZ6+4JrhePejbNdWc0wXNW1SwXMRj7foH2gBUzOC4HXxwEkfy+ergbq8kowbJFk48XT",
	"Am0uJbQUluJJRtHFyDiv0qck4TtWggFPN0dZtK67l3ZAfy8tH7BUyrC5uTQRqx0mr0Haful+XyxNMb8O",
	"nyW3mNLwBlpAwO9JB1Q5q9n+/UCw02T3C0v2Wfs54Bwm8NOob++jLr+jVXLbTWIcU+oT21ag1THxabLX",
	"ikX7Yn9NvEvmbiEf8TBdy27V8BGtuyLY9mV8XOdTJ9lWkLw6EbLPRbJAloI5Kh/McMOYJtvBv5/zOnfj",
	"XQYWMAT/uZp3zCuMtMnAi/HAZH1DdvfYqvAQWa/VUGPeK0qWtL6k5N9y+39j3o/R6HQ+bGLcB1mtISnG",
	"DgA/fW0wDuF/9+OzcMjcpx6cdT++/JXXu53p0PBbmKwRa2dVFHJOGMTTQndbV0hWaOa0jVphQCU4CFRC",
	"pbK+dZ6GKM3D9fBulJe8E9K3MTZkCHLJ56abGq+p5smym8nsvNM/kLu4UfWnxrhSGQi170dvnc1GRhJd",
	"4zt5QH8uDO85FwwM7h3azl3e+jTlveijkcuZc3+LP3T0vHTnbfIRQyzBjs/GZ+fswXm00muYwOXZ+OwS",
	"KvCSFhmlkfR65DtD79Ta0OjxfBQ6MjyUrwdmhGQcuEfBldeM/I3OrXLzc+jLMPa9yGhjVW6rE6Xz+n6i",
	"dLceniBdPtxOEOw+otp7Jmf0zsZSGhfjcZkulrreIb03/F2lnR19iy6vH/0eeoSVsWR6m3S3f/FtW8GI",
	"KzVYaUarROVadXE4P9eddF8hUEoLI713avmmwE+tqzKW2vyNel10unV4ddotuLZU/Baov/2noK5r/SC2",
	"bftPAAAA///hlcl34Q8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
