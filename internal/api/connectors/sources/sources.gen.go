// Package sources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sources

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	Basic_authScopes                  = "basic_auth.Scopes"
	X_rh_identityScopes               = "x_rh_identity.Scopes"
	X_rh_sources_account_numberScopes = "x_rh_sources_account_number.Scopes"
	X_rh_sources_org_idScopes         = "x_rh_sources_org_id.Scopes"
)

// Defines values for RhcConnectionReadAvailabilityStatus.
const (
	RhcConnectionReadAvailabilityStatusAvailable          RhcConnectionReadAvailabilityStatus = "available"
	RhcConnectionReadAvailabilityStatusInProgress         RhcConnectionReadAvailabilityStatus = "in_progress"
	RhcConnectionReadAvailabilityStatusPartiallyAvailable RhcConnectionReadAvailabilityStatus = "partially_available"
	RhcConnectionReadAvailabilityStatusUnavailable        RhcConnectionReadAvailabilityStatus = "unavailable"
)

// Defines values for SourceAppCreationWorkflow.
const (
	AccountAuthorization SourceAppCreationWorkflow = "account_authorization"
	ManualConfiguration  SourceAppCreationWorkflow = "manual_configuration"
)

// Defines values for SourceAvailabilityStatus.
const (
	SourceAvailabilityStatusAvailable          SourceAvailabilityStatus = "available"
	SourceAvailabilityStatusInProgress         SourceAvailabilityStatus = "in_progress"
	SourceAvailabilityStatusPartiallyAvailable SourceAvailabilityStatus = "partially_available"
	SourceAvailabilityStatusUnavailable        SourceAvailabilityStatus = "unavailable"
)

// CollectionLinks defines model for CollectionLinks.
type CollectionLinks struct {
	// First The link to the first object of the list
	First *string `json:"first,omitempty"`

	// Last The link to the last object of the list
	Last *string `json:"last,omitempty"`

	// Next The link to the next page of objects
	Next *string `json:"next,omitempty"`

	// Prev The link to the previous page of objects
	Prev *string `json:"prev,omitempty"`
}

// CollectionMetadata defines model for CollectionMetadata.
type CollectionMetadata struct {
	// Count The total amount of objects in the database
	Count *int `json:"count,omitempty"`

	// Limit The limit of objects that was applied to the object list
	Limit *int `json:"limit,omitempty"`

	// Offset The offset that was applied to the list
	Offset *int `json:"offset,omitempty"`
}

// ErrorBadRequest Error structure for the "Bad Request" responses
type ErrorBadRequest struct {
	Errors *[]struct {
		// Detail Detail of the error
		Detail *string `json:"detail,omitempty"`

		// Status Status of the response
		Status *string `json:"status,omitempty"`
	} `json:"errors,omitempty"`
}

// ErrorNotFound Error structure for the "Not Found" responses
type ErrorNotFound struct {
	Errors *[]struct {
		// Detail Detail of the error
		Detail *string `json:"detail,omitempty"`

		// Status Status of the response
		Status *string `json:"status,omitempty"`
	} `json:"errors,omitempty"`
}

// ID ID of the resource
type ID = string

// RhcConnectionCollection Collection of Red Hat Connector Connections along with the metadata
type RhcConnectionCollection struct {
	Data  *[]RhcConnectionRead `json:"data,omitempty"`
	Links *CollectionLinks     `json:"links,omitempty"`
	Meta  *CollectionMetadata  `json:"meta,omitempty"`
}

// RhcConnectionRead defines model for RhcConnectionRead.
type RhcConnectionRead struct {
	// AvailabilityStatus The availability status of the connection
	AvailabilityStatus *RhcConnectionReadAvailabilityStatus `json:"availability_status,omitempty"`

	// AvailabilityStatusError The received error message when polling for the availability status
	AvailabilityStatusError *string `json:"availability_status_error,omitempty"`

	// Extra Extra data in JSON format
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Id ID of the resource
	Id *ID `json:"id,omitempty"`

	// LastAvailableAt Timestamp of the last time the connection was available
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`

	// LastCheckedAt Timestamp of the last time the availability was checked for the connection
	LastCheckedAt *time.Time `json:"last_checked_at,omitempty"`

	// RhcId The UUID of the connection
	RhcId *string `json:"rhc_id,omitempty"`

	// SourceIds The connection's related sources
	SourceIds *[]ID `json:"source_ids,omitempty"`
}

// RhcConnectionReadAvailabilityStatus The availability status of the connection
type RhcConnectionReadAvailabilityStatus string

// Source defines model for Source.
type Source struct {
	AppCreationWorkflow *SourceAppCreationWorkflow `json:"app_creation_workflow,omitempty"`

	// AvailabilityStatus The availability status of the source
	AvailabilityStatus *SourceAvailabilityStatus `json:"availability_status,omitempty"`

	// CreatedAt The timestamp for when the source was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id ID of the resource
	Id *ID `json:"id,omitempty"`

	// Imported Was the source imported?
	Imported *string `json:"imported,omitempty"`

	// LastAvailableAt The timestamp for when the source was last available at.
	LastAvailableAt *time.Time `json:"last_available_at,omitempty"`

	// LastCheckedAt The timestamp for when the source was last checked at for the availability status.
	LastCheckedAt *time.Time `json:"last_checked_at,omitempty"`

	// Name The name of the source
	Name *string `json:"name,omitempty"`

	// PausedAt The timestamp for when the source was paused
	PausedAt *time.Time `json:"paused_at,omitempty"`

	// SourceRef The external referece or ID for the source
	SourceRef *string `json:"source_ref,omitempty"`

	// SourceTypeId ID of the resource
	SourceTypeId *ID `json:"source_type_id,omitempty"`

	// Uid Unique ID of the inventory source installation
	Uid *string `json:"uid,omitempty"`

	// UpdatedAt The timestamp for when the source was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Version The version of the source
	Version *string `json:"version,omitempty"`
}

// SourceAppCreationWorkflow defines model for Source.AppCreationWorkflow.
type SourceAppCreationWorkflow string

// SourceAvailabilityStatus The availability status of the source
type SourceAvailabilityStatus string

// SourcesCollection An array containing source objects
type SourcesCollection struct {
	Data  *[]Source           `json:"data,omitempty"`
	Links *CollectionLinks    `json:"links,omitempty"`
	Meta  *CollectionMetadata `json:"meta,omitempty"`
}

// IDParam defines model for ID.
type IDParam = string

// QueryFilter defines model for QueryFilter.
type QueryFilter = string

// QueryLimit defines model for QueryLimit.
type QueryLimit = int

// QueryOffset defines model for QueryOffset.
type QueryOffset = int

// QuerySortBy defines model for QuerySortBy.
type QuerySortBy = string

// BadRequest Error structure for the "Bad Request" responses
type BadRequest = ErrorBadRequest

// NotFound Error structure for the "Not Found" responses
type NotFound = ErrorNotFound

// ListSourcesParams defines parameters for ListSources.
type ListSourcesParams struct {
	// Limit The numbers of items to return per page.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Filter for querying collections. The format of the filters is as follows: `filter[subresource][field][operation]="value"`.
	Filter *QueryFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// SortBy The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// GetSourcesRhcConnectionParams defines parameters for GetSourcesRhcConnection.
type GetSourcesRhcConnectionParams struct {
	// Limit The numbers of items to return per page.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Filter Filter for querying collections. The format of the filters is as follows: `filter[subresource][field][operation]="value"`.
	Filter *QueryFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// SortBy The list of attribute and order to sort the result set by.
	SortBy *QuerySortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListSources request
	ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourcesRhcConnection request
	GetSourcesRhcConnection(ctx context.Context, idParam IDParam, params *GetSourcesRhcConnectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourcesRhcConnection(ctx context.Context, idParam IDParam, params *GetSourcesRhcConnectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourcesRhcConnectionRequest(c.Server, idParam, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListSourcesRequest generates requests for ListSources
func NewListSourcesRequest(server string, params *ListSourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSourcesRhcConnectionRequest generates requests for GetSourcesRhcConnection
func NewGetSourcesRhcConnectionRequest(server string, idParam IDParam, params *GetSourcesRhcConnectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, idParam)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources/%s/rhc_connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListSourcesWithResponse request
	ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*ListSources_Fred, error)

	// GetSourcesRhcConnectionWithResponse request
	GetSourcesRhcConnectionWithResponse(ctx context.Context, idParam IDParam, params *GetSourcesRhcConnectionParams, reqEditors ...RequestEditorFn) (*GetSourcesRhcConnection_Fred, error)
}

type ListSources_Fred struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourcesCollection
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r ListSources_Fred) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSources_Fred) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourcesRhcConnection_Fred struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RhcConnectionCollection
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetSourcesRhcConnection_Fred) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourcesRhcConnection_Fred) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListSourcesWithResponse request returning *ListSources_Fred
func (c *ClientWithResponses) ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*ListSources_Fred, error) {
	rsp, err := c.ListSources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSources_Fred(rsp)
}

// GetSourcesRhcConnectionWithResponse request returning *GetSourcesRhcConnection_Fred
func (c *ClientWithResponses) GetSourcesRhcConnectionWithResponse(ctx context.Context, idParam IDParam, params *GetSourcesRhcConnectionParams, reqEditors ...RequestEditorFn) (*GetSourcesRhcConnection_Fred, error) {
	rsp, err := c.GetSourcesRhcConnection(ctx, idParam, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourcesRhcConnection_Fred(rsp)
}

// ParseListSources_Fred parses an HTTP response from a ListSourcesWithResponse call
func ParseListSources_Fred(rsp *http.Response) (*ListSources_Fred, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSources_Fred{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourcesCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSourcesRhcConnection_Fred parses an HTTP response from a GetSourcesRhcConnectionWithResponse call
func ParseGetSourcesRhcConnection_Fred(rsp *http.Response) (*GetSourcesRhcConnection_Fred, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourcesRhcConnection_Fred{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RhcConnectionCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
