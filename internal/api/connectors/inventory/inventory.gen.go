// Package inventory provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package inventory

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// ActiveTags defines model for ActiveTags.
type ActiveTags struct {
	// Embedded struct due to allOf(#/components/schemas/PaginationOut)
	PaginationOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Results []struct {

		// The number of hosts with the given tag. If the value is null this indicates that the count is unknown.
		Count *int          `json:"count"`
		Tag   StructuredTag `json:"tag"`
	} `json:"results"`
}

// BiosUuid defines model for BiosUuid.
type BiosUuid string

// CanonicalFactsIn defines model for CanonicalFactsIn.
type CanonicalFactsIn struct {
	// Embedded fields due to inline allOf schema
	BiosUuid *struct {
		// Embedded struct due to allOf(#/components/schemas/BiosUuid)
		BiosUuid `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/HyphenatedUuid)
		HyphenatedUuid `yaml:",inline"`
	} `json:"bios_uuid,omitempty"`
	Fqdn       *NonNullableString `json:"fqdn,omitempty"`
	InsightsId *struct {
		// Embedded struct due to allOf(#/components/schemas/InsightsId)
		InsightsId `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/HyphenatedUuid)
		HyphenatedUuid `yaml:",inline"`
	} `json:"insights_id,omitempty"`
	IpAddresses  *NonNullableStringArray `json:"ip_addresses,omitempty"`
	MacAddresses *NonNullableStringArray `json:"mac_addresses,omitempty"`
	ProviderId   *NonNullableString      `json:"provider_id,omitempty"`
	ProviderType *NonNullableString      `json:"provider_type,omitempty"`
	SatelliteId  *struct {
		// Embedded struct due to allOf(#/components/schemas/SatelliteId)
		SatelliteId `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/HyphenatedUuid)
		HyphenatedUuid `yaml:",inline"`
	} `json:"satellite_id,omitempty"`
	SubscriptionManagerId *struct {
		// Embedded struct due to allOf(#/components/schemas/SubscriptionManagerId)
		SubscriptionManagerId `yaml:",inline"`
		// Embedded struct due to allOf(#/components/schemas/HyphenatedUuid)
		HyphenatedUuid `yaml:",inline"`
	} `json:"subscription_manager_id,omitempty"`
	// Embedded fields due to inline allOf schema
}

// CanonicalFactsOut defines model for CanonicalFactsOut.
type CanonicalFactsOut struct {

	// A UUID of the host machine BIOS.  This field is considered to be a canonical fact.
	BiosUuid *BiosUuid `json:"bios_uuid"`

	// A host’s Fully Qualified Domain Name.  This field is considered to be a canonical fact.
	Fqdn *Fqdn `json:"fqdn"`

	// An ID defined in /etc/insights-client/machine-id. This field is considered a canonical fact.
	InsightsId *InsightsId `json:"insights_id"`

	// Host’s network IP addresses.  This field is considered to be a canonical fact.
	IpAddresses *IpAddresses `json:"ip_addresses"`

	// Host’s network interfaces MAC addresses.  This field is considered to be a canonical fact.
	MacAddresses *MacAddresses `json:"mac_addresses"`

	// Host’s reference in the external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM etc. This field is one of the canonical facts and does not work without provider_type.
	ProviderId *ProviderId `json:"provider_id"`

	// Type of external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM, etc. This field is one of the canonical facts and does not workout provider_id.
	ProviderType *ProviderType `json:"provider_type"`

	// A Red Hat Satellite ID of a RHEL host.  This field is considered to be a canonical fact.
	SatelliteId *SatelliteId `json:"satellite_id"`

	// A Red Hat Subcription Manager ID of a RHEL host.  This field is considered to be a canonical fact.
	SubscriptionManagerId *SubscriptionManagerId `json:"subscription_manager_id"`
}

// Count defines model for Count.
type Count int

// CreateCheckIn defines model for CreateCheckIn.
type CreateCheckIn struct {
	// Embedded struct due to allOf(#/components/schemas/CanonicalFactsIn)
	CanonicalFactsIn `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// How long from now to expect another check-in (in minutes).
	CheckinFrequency *int `json:"checkin_frequency,omitempty"`
}

// CreateHostOut defines model for CreateHostOut.
type CreateHostOut struct {
	// Embedded struct due to allOf(#/components/schemas/CanonicalFactsOut)
	CanonicalFactsOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A Red Hat Account number that owns the host.
	Account *string `json:"account"`

	// The ansible host name for remediations
	AnsibleHost *string `json:"ansible_host"`

	// A timestamp when the entry was created.
	Created *time.Time `json:"created,omitempty"`

	// Timestamp from which the host is considered deleted.
	CulledTimestamp *time.Time `json:"culled_timestamp"`

	// A host’s human-readable display name, e.g. in a form of a domain name.
	DisplayName *string `json:"display_name"`

	// A set of facts belonging to the host.
	Facts *[]FactSet `json:"facts,omitempty"`

	// A durable and reliable platform-wide host identifier. Applications should use this identifier to reference hosts.
	Id *string `json:"id,omitempty"`

	// The Org ID of the tenant that owns the host.
	OrgId string `json:"org_id"`

	// Reporting source of the last checkin status, stale_timestamp, and last_check_in.
	PerReporterStaleness *CreateHostOut_PerReporterStaleness `json:"per_reporter_staleness,omitempty"`

	// Reporting source of the host. Used when updating the stale_timestamp.
	Reporter *string `json:"reporter"`

	// Timestamp from which the host is considered stale.
	StaleTimestamp *time.Time `json:"stale_timestamp"`

	// Timestamp from which the host is considered too stale to be listed without an explicit toggle.
	StaleWarningTimestamp *time.Time `json:"stale_warning_timestamp"`

	// A timestamp when the entry was last updated.
	Updated *time.Time `json:"updated,omitempty"`
}

// CreateHostOut_PerReporterStaleness defines model for CreateHostOut.PerReporterStaleness.
type CreateHostOut_PerReporterStaleness struct {
	AdditionalProperties map[string]PerReporterStaleness `json:"-"`
}

// FactSet defines model for FactSet.
type FactSet struct {

	// The facts themselves.
	Facts map[string]interface{} `json:"facts"`

	// A namespace the facts belong to.
	Namespace string `json:"namespace"`
}

// Facts defines model for Facts.
type Facts map[string]interface{}

// Fqdn defines model for Fqdn.
type Fqdn string

// HostOut defines model for HostOut.
type HostOut struct {
	// Embedded struct due to allOf(#/components/schemas/CreateHostOut)
	CreateHostOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A set of facts belonging to the host.
	Facts *[]FactSet `json:"facts,omitempty"`
}

// HostQueryOutput defines model for HostQueryOutput.
type HostQueryOutput struct {
	// Embedded struct due to allOf(#/components/schemas/PaginationOut)
	PaginationOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Actual host search query result entries.
	Results []HostOut `json:"results"`
}

// HostSystemProfileOut defines model for HostSystemProfileOut.
type HostSystemProfileOut struct {
	Id *string `json:"id,omitempty"`

	// Representation of the system profile fields
	SystemProfile *SystemProfile `json:"system_profile,omitempty"`
}

// HyphenatedUuid defines model for HyphenatedUuid.
type HyphenatedUuid string

// InsightsId defines model for InsightsId.
type InsightsId string

// IpAddresses defines model for IpAddresses.
type IpAddresses []string

// MacAddresses defines model for MacAddresses.
type MacAddresses []string

// NonNullableString defines model for NonNullableString.
type NonNullableString string

// NonNullableStringArray defines model for NonNullableStringArray.
type NonNullableStringArray []string

// Page defines model for Page.
type Page int

// PaginationOut defines model for PaginationOut.
type PaginationOut struct {

	// The number of items on the current page
	Count Count `json:"count"`

	// The page number
	Page Page `json:"page"`

	// The number of items to return per page
	PerPage PerPage `json:"per_page"`

	// Total number of items
	Total Total `json:"total"`
}

// PatchHostIn defines model for PatchHostIn.
type PatchHostIn struct {

	// The ansible host name for remediations
	AnsibleHost *string `json:"ansible_host,omitempty"`

	// A host’s human-readable display name, e.g. in a form of a domain name.
	DisplayName *string `json:"display_name,omitempty"`
}

// PerPage defines model for PerPage.
type PerPage int

// PerReporterStaleness defines model for PerReporterStaleness.
type PerReporterStaleness struct {
	CheckInSucceeded *bool      `json:"check_in_succeeded,omitempty"`
	LastCheckIn      *time.Time `json:"last_check_in,omitempty"`
	StaleTimestamp   *time.Time `json:"stale_timestamp,omitempty"`
}

// ProviderId defines model for ProviderId.
type ProviderId string

// ProviderType defines model for ProviderType.
type ProviderType string

// SatelliteId defines model for SatelliteId.
type SatelliteId string

// StructuredTag defines model for StructuredTag.
type StructuredTag struct {
	Key       *string `json:"key,omitempty"`
	Namespace *string `json:"namespace"`
	Value     *string `json:"value"`
}

// SubscriptionManagerId defines model for SubscriptionManagerId.
type SubscriptionManagerId string

// SystemProfile defines model for SystemProfile.
type SystemProfile struct {

	// Object containing data specific to Ansible Automation Platform
	Ansible *struct {

		// The catalog-worker version on the host
		CatalogWorkerVersion *string `json:"catalog_worker_version,omitempty"`

		// The ansible-tower or automation-controller version on the host
		ControllerVersion *string `json:"controller_version,omitempty"`

		// The automation-hub version on the host
		HubVersion *string `json:"hub_version,omitempty"`

		// The SSO version on the host
		SsoVersion *string `json:"sso_version,omitempty"`
	} `json:"ansible,omitempty"`
	Arch            *string   `json:"arch,omitempty"`
	BiosReleaseDate *string   `json:"bios_release_date,omitempty"`
	BiosVendor      *string   `json:"bios_vendor,omitempty"`
	BiosVersion     *string   `json:"bios_version,omitempty"`
	CapturedDate    *string   `json:"captured_date,omitempty"`
	CloudProvider   *string   `json:"cloud_provider,omitempty"`
	CoresPerSocket  *int32    `json:"cores_per_socket,omitempty"`
	CpuFlags        *[]string `json:"cpu_flags,omitempty"`

	// The cpu model name
	CpuModel        *string                    `json:"cpu_model,omitempty"`
	DiskDevices     *[]SystemProfileDiskDevice `json:"disk_devices,omitempty"`
	DnfModules      *[]SystemProfileDnfModule  `json:"dnf_modules,omitempty"`
	EnabledServices *[]string                  `json:"enabled_services,omitempty"`
	GpgPubkeys      *[]string                  `json:"gpg_pubkeys,omitempty"`

	// Indicates whether greenboot detected a rolled back update on an edge device.
	GreenbootFallbackDetected *bool `json:"greenboot_fallback_detected,omitempty"`

	// Indicates the greenboot status of an edge device.
	GreenbootStatus *string `json:"greenboot_status,omitempty"`

	// Indicates the type of host.
	HostType             *string `json:"host_type,omitempty"`
	InfrastructureType   *string `json:"infrastructure_type,omitempty"`
	InfrastructureVendor *string `json:"infrastructure_vendor,omitempty"`

	// The version number of insights client. supports wildcards
	InsightsClientVersion  *string                          `json:"insights_client_version,omitempty"`
	InsightsEggVersion     *string                          `json:"insights_egg_version,omitempty"`
	InstalledPackages      *[]string                        `json:"installed_packages,omitempty"`
	InstalledPackagesDelta *[]string                        `json:"installed_packages_delta,omitempty"`
	InstalledProducts      *[]SystemProfileInstalledProduct `json:"installed_products,omitempty"`
	InstalledServices      *[]string                        `json:"installed_services,omitempty"`

	// Indicates whether the host is part of a marketplace install from AWS, Azure, etc.
	IsMarketplace       *bool      `json:"is_marketplace,omitempty"`
	KatelloAgentRunning *bool      `json:"katello_agent_running,omitempty"`
	KernelModules       *[]string  `json:"kernel_modules,omitempty"`
	LastBootTime        *time.Time `json:"last_boot_time,omitempty"`

	// Object containing data specific to the MS SQL workload
	Mssql *struct {

		// MSSQL version number
		Version *string `json:"version,omitempty"`
	} `json:"mssql,omitempty"`
	NetworkInterfaces *[]SystemProfileNetworkInterface `json:"network_interfaces,omitempty"`
	NumberOfCpus      *int32                           `json:"number_of_cpus,omitempty"`
	NumberOfSockets   *int32                           `json:"number_of_sockets,omitempty"`

	// Object for OS details. Supports range operations
	OperatingSystem *struct {

		// Major release of OS (aka the x version)
		Major int `json:"major"`

		// Minor release of OS (aka the y version)
		Minor int `json:"minor"`

		// Name of the distro/os
		Name string `json:"name"`
	} `json:"operating_system,omitempty"`

	// The kernel version represented with a three, optionally four, number scheme.
	OsKernelVersion *string `json:"os_kernel_version,omitempty"`
	OsRelease       *string `json:"os_release,omitempty"`

	// A UUID associated with the host's RHSM certificate
	OwnerId *string `json:"owner_id,omitempty"`

	// A UUID associated with a cloud_connector
	RhcClientId *string `json:"rhc_client_id,omitempty"`

	// A UUID associated with the config manager state
	RhcConfigState *string `json:"rhc_config_state,omitempty"`

	// Object for subscription-manager details
	Rhsm *struct {

		// System release set by subscription-manager
		Version *string `json:"version,omitempty"`
	} `json:"rhsm,omitempty"`

	// The list of deployments on the system as reported by rpm-ostree status --json
	RpmOstreeDeployments *[]struct {

		// Whether the deployment is currently booted
		Booted bool `json:"booted"`

		// The checksum / commit of the deployment
		Checksum string `json:"checksum"`

		// ID of the deployment
		Id string `json:"id"`

		// The origin repo from which the commit was installed
		Origin string `json:"origin"`

		// The operating system name
		Osname string `json:"osname"`

		// Whether the deployment is currently pinned
		Pinned bool `json:"pinned"`

		// The version of the deployment
		Version *string `json:"version,omitempty"`
	} `json:"rpm_ostree_deployments,omitempty"`
	RunningProcesses *[]string `json:"running_processes,omitempty"`

	// The instance number of the SAP HANA system (a two-digit number between 00 and 99)
	SapInstanceNumber *string   `json:"sap_instance_number,omitempty"`
	SapSids           *[]string `json:"sap_sids,omitempty"`

	// Indicates if SAP is installed on the system
	SapSystem *bool `json:"sap_system,omitempty"`

	// The version of the SAP HANA lifecycle management program
	SapVersion       *string `json:"sap_version,omitempty"`
	SatelliteManaged *bool   `json:"satellite_managed,omitempty"`

	// The SELinux mode provided in the config file
	SelinuxConfigFile *string `json:"selinux_config_file,omitempty"`

	// The current SELinux mode, either enforcing, permissive, or disabled
	SelinuxCurrentMode     *string `json:"selinux_current_mode,omitempty"`
	SubscriptionAutoAttach *string `json:"subscription_auto_attach,omitempty"`
	SubscriptionStatus     *string `json:"subscription_status,omitempty"`
	SystemMemoryBytes      *int64  `json:"system_memory_bytes,omitempty"`

	// Object for system purpose information
	SystemPurpose *struct {

		// The intended role of the system
		Role *string `json:"role,omitempty"`

		// The intended SLA of the system
		Sla *string `json:"sla,omitempty"`

		// The intended usage of the system
		Usage *string `json:"usage,omitempty"`
	} `json:"system_purpose,omitempty"`

	// Current profile resulting from command tuned-adm active
	TunedProfile *string                 `json:"tuned_profile,omitempty"`
	YumRepos     *[]SystemProfileYumRepo `json:"yum_repos,omitempty"`
}

// SystemProfileByHostOut defines model for SystemProfileByHostOut.
type SystemProfileByHostOut struct {
	// Embedded struct due to allOf(#/components/schemas/PaginationOut)
	PaginationOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Actual host search query result entries.
	Results []HostSystemProfileOut `json:"results"`
}

// SystemProfileDiskDevice defines model for SystemProfileDiskDevice.
type SystemProfileDiskDevice struct {
	Device *string `json:"device,omitempty"`

	// User-defined mount label
	Label *string `json:"label,omitempty"`

	// The mount point
	MountPoint *string `json:"mount_point,omitempty"`

	// An arbitrary object that does not allow empty string keys.
	Options *SystemProfileNestedObject `json:"options,omitempty"`

	// The mount type
	Type *string `json:"type,omitempty"`
}

// SystemProfileDnfModule defines model for SystemProfileDnfModule.
type SystemProfileDnfModule struct {
	Name   *string `json:"name,omitempty"`
	Stream *string `json:"stream,omitempty"`
}

// SystemProfileInstalledProduct defines model for SystemProfileInstalledProduct.
type SystemProfileInstalledProduct struct {

	// The product ID
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	// Subscription status for product
	Status *string `json:"status,omitempty"`
}

// SystemProfileNestedObject defines model for SystemProfileNestedObject.
type SystemProfileNestedObject struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SystemProfileNetworkInterface defines model for SystemProfileNetworkInterface.
type SystemProfileNetworkInterface struct {
	Ipv4Addresses *[]string `json:"ipv4_addresses,omitempty"`
	Ipv6Addresses *[]string `json:"ipv6_addresses,omitempty"`

	// MAC address (with or without colons)
	MacAddress *string `json:"mac_address,omitempty"`

	// MTU (Maximum transmission unit)
	Mtu *int32 `json:"mtu,omitempty"`

	// Name of interface
	Name *string `json:"name,omitempty"`

	// Interface state (UP, DOWN, UNKNOWN)
	State *string `json:"state,omitempty"`

	// Interface type (ether, loopback)
	Type *string `json:"type,omitempty"`
}

// SystemProfileOperatingSystemOut defines model for SystemProfileOperatingSystemOut.
type SystemProfileOperatingSystemOut struct {

	// The number of items on the current page
	Count *Count `json:"count,omitempty"`

	// The list of operating_system values on the account
	Results *[]struct {
		Count *int `json:"count,omitempty"`
		Value *struct {
			Major *int    `json:"major"`
			Minor *int    `json:"minor"`
			Name  *string `json:"name,omitempty"`
		} `json:"value,omitempty"`
	} `json:"results,omitempty"`

	// Total number of items
	Total *Total `json:"total,omitempty"`
}

// SystemProfileSapSystemOut defines model for SystemProfileSapSystemOut.
type SystemProfileSapSystemOut struct {

	// The number of items on the current page
	Count *Count `json:"count,omitempty"`

	// The list of sap_system values on the account
	Results *[]struct {
		Count *int         `json:"count,omitempty"`
		Value *interface{} `json:"value,omitempty"`
	} `json:"results,omitempty"`

	// Total number of items
	Total *Total `json:"total,omitempty"`
}

// SystemProfileYumRepo defines model for SystemProfileYumRepo.
type SystemProfileYumRepo struct {
	BaseUrl  *string `json:"base_url,omitempty"`
	Enabled  *bool   `json:"enabled,omitempty"`
	Gpgcheck *bool   `json:"gpgcheck,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// TagCountOut defines model for TagCountOut.
type TagCountOut struct {
	// Embedded struct due to allOf(#/components/schemas/PaginationOut)
	PaginationOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The list of tags on the systems
	Results *TagCountOut_Results `json:"results,omitempty"`
}

// TagCountOut_Results defines model for TagCountOut.Results.
type TagCountOut_Results struct {
	AdditionalProperties map[string]int `json:"-"`
}

// TagsOut defines model for TagsOut.
type TagsOut struct {
	// Embedded struct due to allOf(#/components/schemas/PaginationOut)
	PaginationOut `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The list of tags on the systems
	Results *TagsOut_Results `json:"results,omitempty"`
}

// TagsOut_Results defines model for TagsOut.Results.
type TagsOut_Results struct {
	AdditionalProperties map[string][]StructuredTag `json:"-"`
}

// Total defines model for Total.
type Total int

// BranchId defines model for branchId.
type BranchId string

// ConfirmDeleteAll defines model for confirmDeleteAll.
type ConfirmDeleteAll bool

// DisplayName defines model for displayName.
type DisplayName string

// FactsNamespace defines model for factsNamespace.
type FactsNamespace string

// FieldsParam defines model for fields_param.
type FieldsParam SystemProfileNestedObject

// FilterParam defines model for filter_param.
type FilterParam SystemProfileNestedObject

// HostIdList defines model for hostIdList.
type HostIdList []string

// HostnameOrId defines model for hostnameOrId.
type HostnameOrId string

// OrderByParam defines model for orderByParam.
type OrderByParam string

// List of OrderByParam
const (
	OrderByParam_display_name     OrderByParam = "display_name"
	OrderByParam_operating_system OrderByParam = "operating_system"
	OrderByParam_updated          OrderByParam = "updated"
)

// OrderHowParam defines model for orderHowParam.
type OrderHowParam string

// List of OrderHowParam
const (
	OrderHowParam_ASC  OrderHowParam = "ASC"
	OrderHowParam_DESC OrderHowParam = "DESC"
)

// PageParam defines model for pageParam.
type PageParam int

// PerPageParam defines model for perPageParam.
type PerPageParam int

// List of ProviderType
const (
	ProviderType_alibaba ProviderType = "alibaba"
	ProviderType_aws     ProviderType = "aws"
	ProviderType_azure   ProviderType = "azure"
	ProviderType_gcp     ProviderType = "gcp"
	ProviderType_ibm     ProviderType = "ibm"
)

// RegisteredWith defines model for registered_with.
type RegisteredWith []string

// SearchParam defines model for searchParam.
type SearchParam string

// StalenessNoDefaultsParam defines model for stalenessNoDefaultsParam.
type StalenessNoDefaultsParam []string

// StalenessParam defines model for stalenessParam.
type StalenessParam []string

// TagsOrderBy defines model for tagsOrderBy.
type TagsOrderBy string

// List of TagsOrderBy
const (
	TagsOrderBy_count TagsOrderBy = "count"
	TagsOrderBy_tag   TagsOrderBy = "tag"
)

// TagsOrderHow defines model for tagsOrderHow.
type TagsOrderHow string

// List of TagsOrderHow
const (
	TagsOrderHow_ASC  TagsOrderHow = "ASC"
	TagsOrderHow_DESC TagsOrderHow = "DESC"
)

// TagsParam defines model for tagsParam.
type TagsParam []string

// ApiHostDeleteHostsByFilterParams defines parameters for ApiHostDeleteHostsByFilter.
type ApiHostDeleteHostsByFilterParams struct {

	// Filter by display_name (case-insensitive)
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Filter by FQDN (case-insensitive)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// Filter by display_name, fqdn, id (case-insensitive)
	HostnameOrId *HostnameOrId `json:"hostname_or_id,omitempty"`

	// Filter by insights_id
	InsightsId *InsightsId `json:"insights_id,omitempty"`

	// Filter by provider_id
	ProviderId *ProviderId `json:"provider_id,omitempty"`

	// Filter by provider_type
	ProviderType *ProviderType `json:"provider_type,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Culling states of the hosts.
	Staleness *StalenessNoDefaultsParam `json:"staleness,omitempty"`

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`
}

// ApiHostGetHostListParams defines parameters for ApiHostGetHostList.
type ApiHostGetHostListParams struct {

	// Filter by display_name (case-insensitive)
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Filter by FQDN (case-insensitive)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// Filter by display_name, fqdn, id (case-insensitive)
	HostnameOrId *HostnameOrId `json:"hostname_or_id,omitempty"`

	// Filter by insights_id
	InsightsId *InsightsId `json:"insights_id,omitempty"`

	// Filter by provider_id
	ProviderId *ProviderId `json:"provider_id,omitempty"`

	// Filter by provider_type
	ProviderType *ProviderType `json:"provider_type,omitempty"`

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Ordering field name
	OrderBy *OrderByParam `json:"order_by,omitempty"`

	// Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *OrderHowParam `json:"order_how,omitempty"`

	// Culling states of the hosts. Default: fresh,stale,unknown
	Staleness *StalenessParam `json:"staleness,omitempty"`

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`

	// Fetches only mentioned system_profile fields
	Fields *FieldsParam `json:"fields,omitempty"`
}

// ApiHostDeleteAllHostsParams defines parameters for ApiHostDeleteAllHosts.
type ApiHostDeleteAllHostsParams struct {

	// Confirmation to delete all hosts on the account
	ConfirmDeleteAll *ConfirmDeleteAll `json:"confirm_delete_all,omitempty"`
}

// ApiHostHostCheckinJSONBody defines parameters for ApiHostHostCheckin.
type ApiHostHostCheckinJSONBody CreateCheckIn

// ApiHostDeleteByIdParams defines parameters for ApiHostDeleteById.
type ApiHostDeleteByIdParams struct {

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`
}

// ApiHostGetHostByIdParams defines parameters for ApiHostGetHostById.
type ApiHostGetHostByIdParams struct {

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Ordering field name
	OrderBy *OrderByParam `json:"order_by,omitempty"`

	// Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *OrderHowParam `json:"order_how,omitempty"`

	// Fetches only mentioned system_profile fields
	Fields *FieldsParam `json:"fields,omitempty"`
}

// ApiHostPatchByIdJSONBody defines parameters for ApiHostPatchById.
type ApiHostPatchByIdJSONBody PatchHostIn

// ApiHostPatchByIdParams defines parameters for ApiHostPatchById.
type ApiHostPatchByIdParams struct {

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`
}

// ApiHostMergeFactsJSONBody defines parameters for ApiHostMergeFacts.
type ApiHostMergeFactsJSONBody Facts

// ApiHostMergeFactsParams defines parameters for ApiHostMergeFacts.
type ApiHostMergeFactsParams struct {

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`
}

// ApiHostReplaceFactsJSONBody defines parameters for ApiHostReplaceFacts.
type ApiHostReplaceFactsJSONBody Facts

// ApiHostReplaceFactsParams defines parameters for ApiHostReplaceFacts.
type ApiHostReplaceFactsParams struct {

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`
}

// ApiHostGetHostSystemProfileByIdParams defines parameters for ApiHostGetHostSystemProfileById.
type ApiHostGetHostSystemProfileByIdParams struct {

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Ordering field name
	OrderBy *OrderByParam `json:"order_by,omitempty"`

	// Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *OrderHowParam `json:"order_how,omitempty"`

	// Filter by branch_id
	BranchId *BranchId `json:"branch_id,omitempty"`

	// Fetches only mentioned system_profile fields
	Fields *FieldsParam `json:"fields,omitempty"`
}

// ApiHostGetHostTagsParams defines parameters for ApiHostGetHostTags.
type ApiHostGetHostTagsParams struct {

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Ordering field name
	OrderBy *OrderByParam `json:"order_by,omitempty"`

	// Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *OrderHowParam `json:"order_how,omitempty"`

	// Used for searching tags and sap_sids that match the given search string. For searching tags, a tag's namespace, key, and/or value is used for matching.
	Search *SearchParam `json:"search,omitempty"`
}

// ApiHostGetHostTagCountParams defines parameters for ApiHostGetHostTagCount.
type ApiHostGetHostTagCountParams struct {

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Ordering field name
	OrderBy *OrderByParam `json:"order_by,omitempty"`

	// Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *OrderHowParam `json:"order_how,omitempty"`
}

// ApiSystemProfileGetOperatingSystemParams defines parameters for ApiSystemProfileGetOperatingSystem.
type ApiSystemProfileGetOperatingSystemParams struct {

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Culling states of the hosts. Default: fresh,stale,unknown
	Staleness *StalenessParam `json:"staleness,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`
}

// ApiSystemProfileGetSapSidsParams defines parameters for ApiSystemProfileGetSapSids.
type ApiSystemProfileGetSapSidsParams struct {

	// Used for searching tags and sap_sids that match the given search string. For searching tags, a tag's namespace, key, and/or value is used for matching.
	Search *SearchParam `json:"search,omitempty"`

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Culling states of the hosts. Default: fresh,stale,unknown
	Staleness *StalenessParam `json:"staleness,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`
}

// ApiSystemProfileGetSapSystemParams defines parameters for ApiSystemProfileGetSapSystem.
type ApiSystemProfileGetSapSystemParams struct {

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Culling states of the hosts. Default: fresh,stale,unknown
	Staleness *StalenessParam `json:"staleness,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`
}

// ApiSystemProfileValidateSchemaParams defines parameters for ApiSystemProfileValidateSchema.
type ApiSystemProfileValidateSchemaParams struct {

	// The fork of the inventory-schemas repo to use
	RepoFork *string `json:"repo_fork,omitempty"`

	// The branch of the inventory-schemas repo to use
	RepoBranch string `json:"repo_branch"`

	// How many days worth of data to validate
	Days *int `json:"days,omitempty"`

	// Stops polling when this number of messages has been collected
	MaxMessages *int `json:"max_messages,omitempty"`
}

// ApiTagGetTagsParams defines parameters for ApiTagGetTags.
type ApiTagGetTagsParams struct {

	// filters out hosts not tagged by the given tags
	Tags *TagsParam `json:"tags,omitempty"`

	// Ordering field name
	OrderBy *TagsOrderBy `json:"order_by,omitempty"`

	// Direction of the ordering. Default to ASC
	OrderHow *TagsOrderHow `json:"order_how,omitempty"`

	// A number of items to return per page.
	PerPage *PerPageParam `json:"per_page,omitempty"`

	// A page number of the items to return.
	Page *PageParam `json:"page,omitempty"`

	// Culling states of the hosts. Default: fresh,stale,unknown
	Staleness *StalenessParam `json:"staleness,omitempty"`

	// Used for searching tags and sap_sids that match the given search string. For searching tags, a tag's namespace, key, and/or value is used for matching.
	Search *SearchParam `json:"search,omitempty"`

	// Filter by display_name (case-insensitive)
	DisplayName *DisplayName `json:"display_name,omitempty"`

	// Filter by FQDN (case-insensitive)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// Filter by display_name, fqdn, id (case-insensitive)
	HostnameOrId *HostnameOrId `json:"hostname_or_id,omitempty"`

	// Filter by insights_id
	InsightsId *InsightsId `json:"insights_id,omitempty"`

	// Filter by provider_id
	ProviderId *ProviderId `json:"provider_id,omitempty"`

	// Filter by provider_type
	ProviderType *ProviderType `json:"provider_type,omitempty"`

	// Filters out any host not registered by the specified reporters
	RegisteredWith *RegisteredWith `json:"registered_with,omitempty"`

	// Filters hosts based on system_profile fields
	Filter *FilterParam `json:"filter,omitempty"`
}

// ApiHostHostCheckinRequestBody defines body for ApiHostHostCheckin for application/json ContentType.
type ApiHostHostCheckinJSONRequestBody ApiHostHostCheckinJSONBody

// ApiHostPatchByIdRequestBody defines body for ApiHostPatchById for application/json ContentType.
type ApiHostPatchByIdJSONRequestBody ApiHostPatchByIdJSONBody

// ApiHostMergeFactsRequestBody defines body for ApiHostMergeFacts for application/json ContentType.
type ApiHostMergeFactsJSONRequestBody ApiHostMergeFactsJSONBody

// ApiHostReplaceFactsRequestBody defines body for ApiHostReplaceFacts for application/json ContentType.
type ApiHostReplaceFactsJSONRequestBody ApiHostReplaceFactsJSONBody

// Getter for additional properties for CreateHostOut_PerReporterStaleness. Returns the specified
// element and whether it was found
func (a CreateHostOut_PerReporterStaleness) Get(fieldName string) (value PerReporterStaleness, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateHostOut_PerReporterStaleness
func (a *CreateHostOut_PerReporterStaleness) Set(fieldName string, value PerReporterStaleness) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PerReporterStaleness)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateHostOut_PerReporterStaleness to handle AdditionalProperties
func (a *CreateHostOut_PerReporterStaleness) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PerReporterStaleness)
		for fieldName, fieldBuf := range object {
			var fieldVal PerReporterStaleness
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateHostOut_PerReporterStaleness to handle AdditionalProperties
func (a CreateHostOut_PerReporterStaleness) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SystemProfileNestedObject. Returns the specified
// element and whether it was found
func (a SystemProfileNestedObject) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SystemProfileNestedObject
func (a *SystemProfileNestedObject) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SystemProfileNestedObject to handle AdditionalProperties
func (a *SystemProfileNestedObject) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SystemProfileNestedObject to handle AdditionalProperties
func (a SystemProfileNestedObject) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TagCountOut_Results. Returns the specified
// element and whether it was found
func (a TagCountOut_Results) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TagCountOut_Results
func (a *TagCountOut_Results) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TagCountOut_Results to handle AdditionalProperties
func (a *TagCountOut_Results) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TagCountOut_Results to handle AdditionalProperties
func (a TagCountOut_Results) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TagsOut_Results. Returns the specified
// element and whether it was found
func (a TagsOut_Results) Get(fieldName string) (value []StructuredTag, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TagsOut_Results
func (a *TagsOut_Results) Set(fieldName string, value []StructuredTag) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]StructuredTag)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TagsOut_Results to handle AdditionalProperties
func (a *TagsOut_Results) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]StructuredTag)
		for fieldName, fieldBuf := range object {
			var fieldVal []StructuredTag
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TagsOut_Results to handle AdditionalProperties
func (a TagsOut_Results) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiHostDeleteHostsByFilter request
	ApiHostDeleteHostsByFilter(ctx context.Context, params *ApiHostDeleteHostsByFilterParams) (*http.Response, error)

	// ApiHostGetHostList request
	ApiHostGetHostList(ctx context.Context, params *ApiHostGetHostListParams) (*http.Response, error)

	// ApiHostDeleteAllHosts request
	ApiHostDeleteAllHosts(ctx context.Context, params *ApiHostDeleteAllHostsParams) (*http.Response, error)

	// ApiHostHostCheckin request  with any body
	ApiHostHostCheckinWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ApiHostHostCheckin(ctx context.Context, body ApiHostHostCheckinJSONRequestBody) (*http.Response, error)

	// ApiHostDeleteById request
	ApiHostDeleteById(ctx context.Context, hostIdList HostIdList, params *ApiHostDeleteByIdParams) (*http.Response, error)

	// ApiHostGetHostById request
	ApiHostGetHostById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*http.Response, error)

	// ApiHostPatchById request  with any body
	ApiHostPatchByIdWithBody(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, contentType string, body io.Reader) (*http.Response, error)

	ApiHostPatchById(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, body ApiHostPatchByIdJSONRequestBody) (*http.Response, error)

	// ApiHostMergeFacts request  with any body
	ApiHostMergeFactsWithBody(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, contentType string, body io.Reader) (*http.Response, error)

	ApiHostMergeFacts(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, body ApiHostMergeFactsJSONRequestBody) (*http.Response, error)

	// ApiHostReplaceFacts request  with any body
	ApiHostReplaceFactsWithBody(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, contentType string, body io.Reader) (*http.Response, error)

	ApiHostReplaceFacts(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, body ApiHostReplaceFactsJSONRequestBody) (*http.Response, error)

	// ApiHostGetHostSystemProfileById request
	ApiHostGetHostSystemProfileById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*http.Response, error)

	// ApiHostGetHostTags request
	ApiHostGetHostTags(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagsParams) (*http.Response, error)

	// ApiHostGetHostTagCount request
	ApiHostGetHostTagCount(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagCountParams) (*http.Response, error)

	// ApiSystemProfileGetOperatingSystem request
	ApiSystemProfileGetOperatingSystem(ctx context.Context, params *ApiSystemProfileGetOperatingSystemParams) (*http.Response, error)

	// ApiSystemProfileGetSapSids request
	ApiSystemProfileGetSapSids(ctx context.Context, params *ApiSystemProfileGetSapSidsParams) (*http.Response, error)

	// ApiSystemProfileGetSapSystem request
	ApiSystemProfileGetSapSystem(ctx context.Context, params *ApiSystemProfileGetSapSystemParams) (*http.Response, error)

	// ApiSystemProfileValidateSchema request
	ApiSystemProfileValidateSchema(ctx context.Context, params *ApiSystemProfileValidateSchemaParams) (*http.Response, error)

	// ApiTagGetTags request
	ApiTagGetTags(ctx context.Context, params *ApiTagGetTagsParams) (*http.Response, error)
}

func (c *Client) ApiHostDeleteHostsByFilter(ctx context.Context, params *ApiHostDeleteHostsByFilterParams) (*http.Response, error) {
	req, err := NewApiHostDeleteHostsByFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostList(ctx context.Context, params *ApiHostGetHostListParams) (*http.Response, error) {
	req, err := NewApiHostGetHostListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostDeleteAllHosts(ctx context.Context, params *ApiHostDeleteAllHostsParams) (*http.Response, error) {
	req, err := NewApiHostDeleteAllHostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostHostCheckinWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApiHostHostCheckinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostHostCheckin(ctx context.Context, body ApiHostHostCheckinJSONRequestBody) (*http.Response, error) {
	req, err := NewApiHostHostCheckinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostDeleteById(ctx context.Context, hostIdList HostIdList, params *ApiHostDeleteByIdParams) (*http.Response, error) {
	req, err := NewApiHostDeleteByIdRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*http.Response, error) {
	req, err := NewApiHostGetHostByIdRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostPatchByIdWithBody(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApiHostPatchByIdRequestWithBody(c.Server, hostIdList, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostPatchById(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, body ApiHostPatchByIdJSONRequestBody) (*http.Response, error) {
	req, err := NewApiHostPatchByIdRequest(c.Server, hostIdList, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostMergeFactsWithBody(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApiHostMergeFactsRequestWithBody(c.Server, hostIdList, namespace, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostMergeFacts(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, body ApiHostMergeFactsJSONRequestBody) (*http.Response, error) {
	req, err := NewApiHostMergeFactsRequest(c.Server, hostIdList, namespace, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostReplaceFactsWithBody(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApiHostReplaceFactsRequestWithBody(c.Server, hostIdList, namespace, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostReplaceFacts(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, body ApiHostReplaceFactsJSONRequestBody) (*http.Response, error) {
	req, err := NewApiHostReplaceFactsRequest(c.Server, hostIdList, namespace, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostSystemProfileById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*http.Response, error) {
	req, err := NewApiHostGetHostSystemProfileByIdRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostTags(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagsParams) (*http.Response, error) {
	req, err := NewApiHostGetHostTagsRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostTagCount(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagCountParams) (*http.Response, error) {
	req, err := NewApiHostGetHostTagCountRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemProfileGetOperatingSystem(ctx context.Context, params *ApiSystemProfileGetOperatingSystemParams) (*http.Response, error) {
	req, err := NewApiSystemProfileGetOperatingSystemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemProfileGetSapSids(ctx context.Context, params *ApiSystemProfileGetSapSidsParams) (*http.Response, error) {
	req, err := NewApiSystemProfileGetSapSidsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemProfileGetSapSystem(ctx context.Context, params *ApiSystemProfileGetSapSystemParams) (*http.Response, error) {
	req, err := NewApiSystemProfileGetSapSystemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSystemProfileValidateSchema(ctx context.Context, params *ApiSystemProfileValidateSchemaParams) (*http.Response, error) {
	req, err := NewApiSystemProfileValidateSchemaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTagGetTags(ctx context.Context, params *ApiTagGetTagsParams) (*http.Response, error) {
	req, err := NewApiTagGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewApiHostDeleteHostsByFilterRequest generates requests for ApiHostDeleteHostsByFilter
func NewApiHostDeleteHostsByFilterRequest(server string, params *ApiHostDeleteHostsByFilterParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "display_name", *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fqdn != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fqdn", *params.Fqdn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HostnameOrId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hostname_or_id", *params.HostnameOrId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InsightsId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "insights_id", *params.InsightsId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_id", *params.ProviderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_type", *params.ProviderType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostGetHostListRequest generates requests for ApiHostGetHostList
func NewApiHostGetHostListRequest(server string, params *ApiHostGetHostListParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "display_name", *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fqdn != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fqdn", *params.Fqdn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HostnameOrId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hostname_or_id", *params.HostnameOrId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InsightsId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "insights_id", *params.InsightsId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_id", *params.ProviderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_type", *params.ProviderType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "fields", *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostDeleteAllHostsRequest generates requests for ApiHostDeleteAllHosts
func NewApiHostDeleteAllHostsRequest(server string, params *ApiHostDeleteAllHostsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/all")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ConfirmDeleteAll != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "confirm_delete_all", *params.ConfirmDeleteAll); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostHostCheckinRequest calls the generic ApiHostHostCheckin builder with application/json body
func NewApiHostHostCheckinRequest(server string, body ApiHostHostCheckinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiHostHostCheckinRequestWithBody(server, "application/json", bodyReader)
}

// NewApiHostHostCheckinRequestWithBody generates requests for ApiHostHostCheckin with any type of body
func NewApiHostHostCheckinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/checkin")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewApiHostDeleteByIdRequest generates requests for ApiHostDeleteById
func NewApiHostDeleteByIdRequest(server string, hostIdList HostIdList, params *ApiHostDeleteByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostGetHostByIdRequest generates requests for ApiHostGetHostById
func NewApiHostGetHostByIdRequest(server string, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "fields", *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostPatchByIdRequest calls the generic ApiHostPatchById builder with application/json body
func NewApiHostPatchByIdRequest(server string, hostIdList HostIdList, params *ApiHostPatchByIdParams, body ApiHostPatchByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiHostPatchByIdRequestWithBody(server, hostIdList, params, "application/json", bodyReader)
}

// NewApiHostPatchByIdRequestWithBody generates requests for ApiHostPatchById with any type of body
func NewApiHostPatchByIdRequestWithBody(server string, hostIdList HostIdList, params *ApiHostPatchByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewApiHostMergeFactsRequest calls the generic ApiHostMergeFacts builder with application/json body
func NewApiHostMergeFactsRequest(server string, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, body ApiHostMergeFactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiHostMergeFactsRequestWithBody(server, hostIdList, namespace, params, "application/json", bodyReader)
}

// NewApiHostMergeFactsRequestWithBody generates requests for ApiHostMergeFacts with any type of body
func NewApiHostMergeFactsRequestWithBody(server string, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "namespace", namespace)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s/facts/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewApiHostReplaceFactsRequest calls the generic ApiHostReplaceFacts builder with application/json body
func NewApiHostReplaceFactsRequest(server string, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, body ApiHostReplaceFactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiHostReplaceFactsRequestWithBody(server, hostIdList, namespace, params, "application/json", bodyReader)
}

// NewApiHostReplaceFactsRequestWithBody generates requests for ApiHostReplaceFacts with any type of body
func NewApiHostReplaceFactsRequestWithBody(server string, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "namespace", namespace)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s/facts/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewApiHostGetHostSystemProfileByIdRequest generates requests for ApiHostGetHostSystemProfileById
func NewApiHostGetHostSystemProfileByIdRequest(server string, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s/system_profile", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BranchId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "branch_id", *params.BranchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "fields", *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostGetHostTagsRequest generates requests for ApiHostGetHostTags
func NewApiHostGetHostTagsRequest(server string, hostIdList HostIdList, params *ApiHostGetHostTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s/tags", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostGetHostTagCountRequest generates requests for ApiHostGetHostTagCount
func NewApiHostGetHostTagCountRequest(server string, hostIdList HostIdList, params *ApiHostGetHostTagCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "host_id_list", hostIdList)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/hosts/%s/tags/count", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemProfileGetOperatingSystemRequest generates requests for ApiSystemProfileGetOperatingSystem
func NewApiSystemProfileGetOperatingSystemRequest(server string, params *ApiSystemProfileGetOperatingSystemParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system_profile/operating_system")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemProfileGetSapSidsRequest generates requests for ApiSystemProfileGetSapSids
func NewApiSystemProfileGetSapSidsRequest(server string, params *ApiSystemProfileGetSapSidsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system_profile/sap_sids")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemProfileGetSapSystemRequest generates requests for ApiSystemProfileGetSapSystem
func NewApiSystemProfileGetSapSystemRequest(server string, params *ApiSystemProfileGetSapSystemParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system_profile/sap_system")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSystemProfileValidateSchemaRequest generates requests for ApiSystemProfileValidateSchema
func NewApiSystemProfileValidateSchemaRequest(server string, params *ApiSystemProfileValidateSchemaParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/system_profile/validate_schema")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.RepoFork != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "repo_fork", *params.RepoFork); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "repo_branch", params.RepoBranch); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Days != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "days", *params.Days); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxMessages != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "max_messages", *params.MaxMessages); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiTagGetTagsRequest generates requests for ApiTagGetTags
func NewApiTagGetTagsRequest(server string, params *ApiTagGetTagsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "tags", *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderHow != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_how", *params.OrderHow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_page", *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Staleness != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "staleness", *params.Staleness); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "display_name", *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fqdn != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fqdn", *params.Fqdn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HostnameOrId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "hostname_or_id", *params.HostnameOrId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InsightsId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "insights_id", *params.InsightsId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_id", *params.ProviderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProviderType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider_type", *params.ProviderType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RegisteredWith != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registered_with", *params.RegisteredWith); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParam("deepObject", true, "filter", *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiHostDeleteHostsByFilter request
	ApiHostDeleteHostsByFilterWithResponse(ctx context.Context, params *ApiHostDeleteHostsByFilterParams) (*ApiHostDeleteHostsByFilterResponse, error)

	// ApiHostGetHostList request
	ApiHostGetHostListWithResponse(ctx context.Context, params *ApiHostGetHostListParams) (*ApiHostGetHostListResponse, error)

	// ApiHostDeleteAllHosts request
	ApiHostDeleteAllHostsWithResponse(ctx context.Context, params *ApiHostDeleteAllHostsParams) (*ApiHostDeleteAllHostsResponse, error)

	// ApiHostHostCheckin request  with any body
	ApiHostHostCheckinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ApiHostHostCheckinResponse, error)

	ApiHostHostCheckinWithResponse(ctx context.Context, body ApiHostHostCheckinJSONRequestBody) (*ApiHostHostCheckinResponse, error)

	// ApiHostDeleteById request
	ApiHostDeleteByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostDeleteByIdParams) (*ApiHostDeleteByIdResponse, error)

	// ApiHostGetHostById request
	ApiHostGetHostByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*ApiHostGetHostByIdResponse, error)

	// ApiHostPatchById request  with any body
	ApiHostPatchByIdWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, contentType string, body io.Reader) (*ApiHostPatchByIdResponse, error)

	ApiHostPatchByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, body ApiHostPatchByIdJSONRequestBody) (*ApiHostPatchByIdResponse, error)

	// ApiHostMergeFacts request  with any body
	ApiHostMergeFactsWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, contentType string, body io.Reader) (*ApiHostMergeFactsResponse, error)

	ApiHostMergeFactsWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, body ApiHostMergeFactsJSONRequestBody) (*ApiHostMergeFactsResponse, error)

	// ApiHostReplaceFacts request  with any body
	ApiHostReplaceFactsWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, contentType string, body io.Reader) (*ApiHostReplaceFactsResponse, error)

	ApiHostReplaceFactsWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, body ApiHostReplaceFactsJSONRequestBody) (*ApiHostReplaceFactsResponse, error)

	// ApiHostGetHostSystemProfileById request
	ApiHostGetHostSystemProfileByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*ApiHostGetHostSystemProfileByIdResponse, error)

	// ApiHostGetHostTags request
	ApiHostGetHostTagsWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagsParams) (*ApiHostGetHostTagsResponse, error)

	// ApiHostGetHostTagCount request
	ApiHostGetHostTagCountWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagCountParams) (*ApiHostGetHostTagCountResponse, error)

	// ApiSystemProfileGetOperatingSystem request
	ApiSystemProfileGetOperatingSystemWithResponse(ctx context.Context, params *ApiSystemProfileGetOperatingSystemParams) (*ApiSystemProfileGetOperatingSystemResponse, error)

	// ApiSystemProfileGetSapSids request
	ApiSystemProfileGetSapSidsWithResponse(ctx context.Context, params *ApiSystemProfileGetSapSidsParams) (*ApiSystemProfileGetSapSidsResponse, error)

	// ApiSystemProfileGetSapSystem request
	ApiSystemProfileGetSapSystemWithResponse(ctx context.Context, params *ApiSystemProfileGetSapSystemParams) (*ApiSystemProfileGetSapSystemResponse, error)

	// ApiSystemProfileValidateSchema request
	ApiSystemProfileValidateSchemaWithResponse(ctx context.Context, params *ApiSystemProfileValidateSchemaParams) (*ApiSystemProfileValidateSchemaResponse, error)

	// ApiTagGetTags request
	ApiTagGetTagsWithResponse(ctx context.Context, params *ApiTagGetTagsParams) (*ApiTagGetTagsResponse, error)
}

type ApiHostDeleteHostsByFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostDeleteHostsByFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostDeleteHostsByFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostQueryOutput
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostDeleteAllHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostDeleteAllHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostDeleteAllHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostHostCheckinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateHostOut
}

// Status returns HTTPResponse.Status
func (r ApiHostHostCheckinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostHostCheckinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostDeleteByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostDeleteByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostDeleteByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostQueryOutput
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostPatchByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostPatchByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostPatchByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostMergeFactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostMergeFactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostMergeFactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostReplaceFactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiHostReplaceFactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostReplaceFactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostSystemProfileByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemProfileByHostOut
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostSystemProfileByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostSystemProfileByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagsOut
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostTagCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagCountOut
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostTagCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostTagCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemProfileGetOperatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemProfileOperatingSystemOut
}

// Status returns HTTPResponse.Status
func (r ApiSystemProfileGetOperatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemProfileGetOperatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemProfileGetSapSidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemProfileSapSystemOut
}

// Status returns HTTPResponse.Status
func (r ApiSystemProfileGetSapSidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemProfileGetSapSidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemProfileGetSapSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemProfileSapSystemOut
}

// Status returns HTTPResponse.Status
func (r ApiSystemProfileGetSapSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemProfileGetSapSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSystemProfileValidateSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiSystemProfileValidateSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSystemProfileValidateSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiTagGetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActiveTags
}

// Status returns HTTPResponse.Status
func (r ApiTagGetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTagGetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiHostDeleteHostsByFilterWithResponse request returning *ApiHostDeleteHostsByFilterResponse
func (c *ClientWithResponses) ApiHostDeleteHostsByFilterWithResponse(ctx context.Context, params *ApiHostDeleteHostsByFilterParams) (*ApiHostDeleteHostsByFilterResponse, error) {
	rsp, err := c.ApiHostDeleteHostsByFilter(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostDeleteHostsByFilterResponse(rsp)
}

// ApiHostGetHostListWithResponse request returning *ApiHostGetHostListResponse
func (c *ClientWithResponses) ApiHostGetHostListWithResponse(ctx context.Context, params *ApiHostGetHostListParams) (*ApiHostGetHostListResponse, error) {
	rsp, err := c.ApiHostGetHostList(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostListResponse(rsp)
}

// ApiHostDeleteAllHostsWithResponse request returning *ApiHostDeleteAllHostsResponse
func (c *ClientWithResponses) ApiHostDeleteAllHostsWithResponse(ctx context.Context, params *ApiHostDeleteAllHostsParams) (*ApiHostDeleteAllHostsResponse, error) {
	rsp, err := c.ApiHostDeleteAllHosts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostDeleteAllHostsResponse(rsp)
}

// ApiHostHostCheckinWithBodyWithResponse request with arbitrary body returning *ApiHostHostCheckinResponse
func (c *ClientWithResponses) ApiHostHostCheckinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ApiHostHostCheckinResponse, error) {
	rsp, err := c.ApiHostHostCheckinWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostHostCheckinResponse(rsp)
}

func (c *ClientWithResponses) ApiHostHostCheckinWithResponse(ctx context.Context, body ApiHostHostCheckinJSONRequestBody) (*ApiHostHostCheckinResponse, error) {
	rsp, err := c.ApiHostHostCheckin(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostHostCheckinResponse(rsp)
}

// ApiHostDeleteByIdWithResponse request returning *ApiHostDeleteByIdResponse
func (c *ClientWithResponses) ApiHostDeleteByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostDeleteByIdParams) (*ApiHostDeleteByIdResponse, error) {
	rsp, err := c.ApiHostDeleteById(ctx, hostIdList, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostDeleteByIdResponse(rsp)
}

// ApiHostGetHostByIdWithResponse request returning *ApiHostGetHostByIdResponse
func (c *ClientWithResponses) ApiHostGetHostByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*ApiHostGetHostByIdResponse, error) {
	rsp, err := c.ApiHostGetHostById(ctx, hostIdList, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostByIdResponse(rsp)
}

// ApiHostPatchByIdWithBodyWithResponse request with arbitrary body returning *ApiHostPatchByIdResponse
func (c *ClientWithResponses) ApiHostPatchByIdWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, contentType string, body io.Reader) (*ApiHostPatchByIdResponse, error) {
	rsp, err := c.ApiHostPatchByIdWithBody(ctx, hostIdList, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostPatchByIdResponse(rsp)
}

func (c *ClientWithResponses) ApiHostPatchByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostPatchByIdParams, body ApiHostPatchByIdJSONRequestBody) (*ApiHostPatchByIdResponse, error) {
	rsp, err := c.ApiHostPatchById(ctx, hostIdList, params, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostPatchByIdResponse(rsp)
}

// ApiHostMergeFactsWithBodyWithResponse request with arbitrary body returning *ApiHostMergeFactsResponse
func (c *ClientWithResponses) ApiHostMergeFactsWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, contentType string, body io.Reader) (*ApiHostMergeFactsResponse, error) {
	rsp, err := c.ApiHostMergeFactsWithBody(ctx, hostIdList, namespace, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostMergeFactsResponse(rsp)
}

func (c *ClientWithResponses) ApiHostMergeFactsWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostMergeFactsParams, body ApiHostMergeFactsJSONRequestBody) (*ApiHostMergeFactsResponse, error) {
	rsp, err := c.ApiHostMergeFacts(ctx, hostIdList, namespace, params, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostMergeFactsResponse(rsp)
}

// ApiHostReplaceFactsWithBodyWithResponse request with arbitrary body returning *ApiHostReplaceFactsResponse
func (c *ClientWithResponses) ApiHostReplaceFactsWithBodyWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, contentType string, body io.Reader) (*ApiHostReplaceFactsResponse, error) {
	rsp, err := c.ApiHostReplaceFactsWithBody(ctx, hostIdList, namespace, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostReplaceFactsResponse(rsp)
}

func (c *ClientWithResponses) ApiHostReplaceFactsWithResponse(ctx context.Context, hostIdList HostIdList, namespace FactsNamespace, params *ApiHostReplaceFactsParams, body ApiHostReplaceFactsJSONRequestBody) (*ApiHostReplaceFactsResponse, error) {
	rsp, err := c.ApiHostReplaceFacts(ctx, hostIdList, namespace, params, body)
	if err != nil {
		return nil, err
	}
	return ParseApiHostReplaceFactsResponse(rsp)
}

// ApiHostGetHostSystemProfileByIdWithResponse request returning *ApiHostGetHostSystemProfileByIdResponse
func (c *ClientWithResponses) ApiHostGetHostSystemProfileByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*ApiHostGetHostSystemProfileByIdResponse, error) {
	rsp, err := c.ApiHostGetHostSystemProfileById(ctx, hostIdList, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostSystemProfileByIdResponse(rsp)
}

// ApiHostGetHostTagsWithResponse request returning *ApiHostGetHostTagsResponse
func (c *ClientWithResponses) ApiHostGetHostTagsWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagsParams) (*ApiHostGetHostTagsResponse, error) {
	rsp, err := c.ApiHostGetHostTags(ctx, hostIdList, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostTagsResponse(rsp)
}

// ApiHostGetHostTagCountWithResponse request returning *ApiHostGetHostTagCountResponse
func (c *ClientWithResponses) ApiHostGetHostTagCountWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostTagCountParams) (*ApiHostGetHostTagCountResponse, error) {
	rsp, err := c.ApiHostGetHostTagCount(ctx, hostIdList, params)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostTagCountResponse(rsp)
}

// ApiSystemProfileGetOperatingSystemWithResponse request returning *ApiSystemProfileGetOperatingSystemResponse
func (c *ClientWithResponses) ApiSystemProfileGetOperatingSystemWithResponse(ctx context.Context, params *ApiSystemProfileGetOperatingSystemParams) (*ApiSystemProfileGetOperatingSystemResponse, error) {
	rsp, err := c.ApiSystemProfileGetOperatingSystem(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemProfileGetOperatingSystemResponse(rsp)
}

// ApiSystemProfileGetSapSidsWithResponse request returning *ApiSystemProfileGetSapSidsResponse
func (c *ClientWithResponses) ApiSystemProfileGetSapSidsWithResponse(ctx context.Context, params *ApiSystemProfileGetSapSidsParams) (*ApiSystemProfileGetSapSidsResponse, error) {
	rsp, err := c.ApiSystemProfileGetSapSids(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemProfileGetSapSidsResponse(rsp)
}

// ApiSystemProfileGetSapSystemWithResponse request returning *ApiSystemProfileGetSapSystemResponse
func (c *ClientWithResponses) ApiSystemProfileGetSapSystemWithResponse(ctx context.Context, params *ApiSystemProfileGetSapSystemParams) (*ApiSystemProfileGetSapSystemResponse, error) {
	rsp, err := c.ApiSystemProfileGetSapSystem(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemProfileGetSapSystemResponse(rsp)
}

// ApiSystemProfileValidateSchemaWithResponse request returning *ApiSystemProfileValidateSchemaResponse
func (c *ClientWithResponses) ApiSystemProfileValidateSchemaWithResponse(ctx context.Context, params *ApiSystemProfileValidateSchemaParams) (*ApiSystemProfileValidateSchemaResponse, error) {
	rsp, err := c.ApiSystemProfileValidateSchema(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiSystemProfileValidateSchemaResponse(rsp)
}

// ApiTagGetTagsWithResponse request returning *ApiTagGetTagsResponse
func (c *ClientWithResponses) ApiTagGetTagsWithResponse(ctx context.Context, params *ApiTagGetTagsParams) (*ApiTagGetTagsResponse, error) {
	rsp, err := c.ApiTagGetTags(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseApiTagGetTagsResponse(rsp)
}

// ParseApiHostDeleteHostsByFilterResponse parses an HTTP response from a ApiHostDeleteHostsByFilterWithResponse call
func ParseApiHostDeleteHostsByFilterResponse(rsp *http.Response) (*ApiHostDeleteHostsByFilterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostDeleteHostsByFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostGetHostListResponse parses an HTTP response from a ApiHostGetHostListWithResponse call
func ParseApiHostGetHostListResponse(rsp *http.Response) (*ApiHostGetHostListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostQueryOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiHostDeleteAllHostsResponse parses an HTTP response from a ApiHostDeleteAllHostsWithResponse call
func ParseApiHostDeleteAllHostsResponse(rsp *http.Response) (*ApiHostDeleteAllHostsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostDeleteAllHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostHostCheckinResponse parses an HTTP response from a ApiHostHostCheckinWithResponse call
func ParseApiHostHostCheckinResponse(rsp *http.Response) (*ApiHostHostCheckinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostHostCheckinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateHostOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApiHostDeleteByIdResponse parses an HTTP response from a ApiHostDeleteByIdWithResponse call
func ParseApiHostDeleteByIdResponse(rsp *http.Response) (*ApiHostDeleteByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostDeleteByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostGetHostByIdResponse parses an HTTP response from a ApiHostGetHostByIdWithResponse call
func ParseApiHostGetHostByIdResponse(rsp *http.Response) (*ApiHostGetHostByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostQueryOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiHostPatchByIdResponse parses an HTTP response from a ApiHostPatchByIdWithResponse call
func ParseApiHostPatchByIdResponse(rsp *http.Response) (*ApiHostPatchByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostPatchByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostMergeFactsResponse parses an HTTP response from a ApiHostMergeFactsWithResponse call
func ParseApiHostMergeFactsResponse(rsp *http.Response) (*ApiHostMergeFactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostMergeFactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostReplaceFactsResponse parses an HTTP response from a ApiHostReplaceFactsWithResponse call
func ParseApiHostReplaceFactsResponse(rsp *http.Response) (*ApiHostReplaceFactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostReplaceFactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiHostGetHostSystemProfileByIdResponse parses an HTTP response from a ApiHostGetHostSystemProfileByIdWithResponse call
func ParseApiHostGetHostSystemProfileByIdResponse(rsp *http.Response) (*ApiHostGetHostSystemProfileByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostSystemProfileByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemProfileByHostOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiHostGetHostTagsResponse parses an HTTP response from a ApiHostGetHostTagsWithResponse call
func ParseApiHostGetHostTagsResponse(rsp *http.Response) (*ApiHostGetHostTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagsOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiHostGetHostTagCountResponse parses an HTTP response from a ApiHostGetHostTagCountWithResponse call
func ParseApiHostGetHostTagCountResponse(rsp *http.Response) (*ApiHostGetHostTagCountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostTagCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagCountOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiSystemProfileGetOperatingSystemResponse parses an HTTP response from a ApiSystemProfileGetOperatingSystemWithResponse call
func ParseApiSystemProfileGetOperatingSystemResponse(rsp *http.Response) (*ApiSystemProfileGetOperatingSystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemProfileGetOperatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemProfileOperatingSystemOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiSystemProfileGetSapSidsResponse parses an HTTP response from a ApiSystemProfileGetSapSidsWithResponse call
func ParseApiSystemProfileGetSapSidsResponse(rsp *http.Response) (*ApiSystemProfileGetSapSidsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemProfileGetSapSidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemProfileSapSystemOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiSystemProfileGetSapSystemResponse parses an HTTP response from a ApiSystemProfileGetSapSystemWithResponse call
func ParseApiSystemProfileGetSapSystemResponse(rsp *http.Response) (*ApiSystemProfileGetSapSystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemProfileGetSapSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemProfileSapSystemOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiSystemProfileValidateSchemaResponse parses an HTTP response from a ApiSystemProfileValidateSchemaWithResponse call
func ParseApiSystemProfileValidateSchemaResponse(rsp *http.Response) (*ApiSystemProfileValidateSchemaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiSystemProfileValidateSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseApiTagGetTagsResponse parses an HTTP response from a ApiTagGetTagsWithResponse call
func ParseApiTagGetTagsResponse(rsp *http.Response) (*ApiTagGetTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApiTagGetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActiveTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
