// Package inventory provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package inventory

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for SystemProfileGreenbootStatus.
const (
	Green SystemProfileGreenbootStatus = "green"
	Red   SystemProfileGreenbootStatus = "red"
)

// Defines values for SystemProfileHostType.
const (
	Edge SystemProfileHostType = "edge"
)

// Defines values for SystemProfileOperatingSystemName.
const (
	CentOS      SystemProfileOperatingSystemName = "CentOS"
	CentOSLinux SystemProfileOperatingSystemName = "CentOS Linux"
	RHEL        SystemProfileOperatingSystemName = "RHEL"
)

// Defines values for SystemProfileSelinuxCurrentMode.
const (
	Disabled   SystemProfileSelinuxCurrentMode = "disabled"
	Enforcing  SystemProfileSelinuxCurrentMode = "enforcing"
	Permissive SystemProfileSelinuxCurrentMode = "permissive"
)

// Defines values for SystemProfileSystemPurposeRole.
const (
	RedHatEnterpriseLinuxComputeNode SystemProfileSystemPurposeRole = "Red Hat Enterprise Linux Compute Node"
	RedHatEnterpriseLinuxServer      SystemProfileSystemPurposeRole = "Red Hat Enterprise Linux Server"
	RedHatEnterpriseLinuxWorkstation SystemProfileSystemPurposeRole = "Red Hat Enterprise Linux Workstation"
)

// Defines values for SystemProfileSystemPurposeSla.
const (
	Premium     SystemProfileSystemPurposeSla = "Premium"
	SelfSupport SystemProfileSystemPurposeSla = "Self-Support"
	Standard    SystemProfileSystemPurposeSla = "Standard"
)

// Defines values for SystemProfileSystemPurposeUsage.
const (
	DevelopmentTest  SystemProfileSystemPurposeUsage = "Development/Test"
	DisasterRecovery SystemProfileSystemPurposeUsage = "Disaster Recovery"
	Production       SystemProfileSystemPurposeUsage = "Production"
)

// Defines values for SystemProfileSystemUpdateMethod.
const (
	Bootc     SystemProfileSystemUpdateMethod = "bootc"
	Dnf       SystemProfileSystemUpdateMethod = "dnf"
	RpmOstree SystemProfileSystemUpdateMethod = "rpm-ostree"
	Yum       SystemProfileSystemUpdateMethod = "yum"
)

// Defines values for SystemProfileSystemdState.
const (
	Degraded     SystemProfileSystemdState = "degraded"
	Initializing SystemProfileSystemdState = "initializing"
	Maintenance  SystemProfileSystemdState = "maintenance"
	Running      SystemProfileSystemdState = "running"
	Starting     SystemProfileSystemdState = "starting"
	Stopping     SystemProfileSystemdState = "stopping"
)

// Defines values for HostOrderByParam.
const (
	HostOrderByParamDisplayName     HostOrderByParam = "display_name"
	HostOrderByParamGroupName       HostOrderByParam = "group_name"
	HostOrderByParamOperatingSystem HostOrderByParam = "operating_system"
	HostOrderByParamUpdated         HostOrderByParam = "updated"
)

// Defines values for HostOrderHowParam.
const (
	HostOrderHowParamASC  HostOrderHowParam = "ASC"
	HostOrderHowParamDESC HostOrderHowParam = "DESC"
)

// Defines values for ApiHostGetHostByIdParamsOrderBy.
const (
	ApiHostGetHostByIdParamsOrderByDisplayName     ApiHostGetHostByIdParamsOrderBy = "display_name"
	ApiHostGetHostByIdParamsOrderByGroupName       ApiHostGetHostByIdParamsOrderBy = "group_name"
	ApiHostGetHostByIdParamsOrderByOperatingSystem ApiHostGetHostByIdParamsOrderBy = "operating_system"
	ApiHostGetHostByIdParamsOrderByUpdated         ApiHostGetHostByIdParamsOrderBy = "updated"
)

// Defines values for ApiHostGetHostByIdParamsOrderHow.
const (
	ApiHostGetHostByIdParamsOrderHowASC  ApiHostGetHostByIdParamsOrderHow = "ASC"
	ApiHostGetHostByIdParamsOrderHowDESC ApiHostGetHostByIdParamsOrderHow = "DESC"
)

// Defines values for ApiHostGetHostSystemProfileByIdParamsOrderBy.
const (
	ApiHostGetHostSystemProfileByIdParamsOrderByDisplayName     ApiHostGetHostSystemProfileByIdParamsOrderBy = "display_name"
	ApiHostGetHostSystemProfileByIdParamsOrderByGroupName       ApiHostGetHostSystemProfileByIdParamsOrderBy = "group_name"
	ApiHostGetHostSystemProfileByIdParamsOrderByOperatingSystem ApiHostGetHostSystemProfileByIdParamsOrderBy = "operating_system"
	ApiHostGetHostSystemProfileByIdParamsOrderByUpdated         ApiHostGetHostSystemProfileByIdParamsOrderBy = "updated"
)

// Defines values for ApiHostGetHostSystemProfileByIdParamsOrderHow.
const (
	ASC  ApiHostGetHostSystemProfileByIdParamsOrderHow = "ASC"
	DESC ApiHostGetHostSystemProfileByIdParamsOrderHow = "DESC"
)

// AccountNumber A Red Hat Account number that owns the host.
type AccountNumber = string

// BiosUuid A UUID of the host machine BIOS.  This field is considered to be a canonical fact.
type BiosUuid = string

// CanonicalFactsOut defines model for CanonicalFactsOut.
type CanonicalFactsOut struct {
	// BiosUuid A UUID of the host machine BIOS.  This field is considered to be a canonical fact.
	BiosUuid *BiosUuid `json:"bios_uuid"`

	// Fqdn A host’s Fully Qualified Domain Name.  This field is considered to be a canonical fact.
	Fqdn *Fqdn `json:"fqdn"`

	// InsightsId An ID defined in /etc/insights-client/machine-id. This field is considered a canonical fact.
	InsightsId *InsightsId `json:"insights_id"`

	// IpAddresses Host’s network IP addresses.  This field is considered to be a canonical fact.
	IpAddresses *IpAddresses `json:"ip_addresses"`

	// MacAddresses Host’s network interfaces MAC addresses.  This field is considered to be a canonical fact.
	MacAddresses *MacAddresses `json:"mac_addresses"`

	// ProviderId Host’s reference in the external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM etc. This field is one of the canonical facts and does not work without provider_type.
	ProviderId *ProviderId `json:"provider_id"`

	// ProviderType Type of external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM, etc. This field is one of the canonical facts and does not workout provider_id.
	ProviderType *ProviderType `json:"provider_type"`

	// SatelliteId A Red Hat Satellite ID of a RHEL host.  This field is considered to be a canonical fact.
	SatelliteId *SatelliteId `json:"satellite_id"`

	// SubscriptionManagerId A Red Hat Subcription Manager ID of a RHEL host.  This field is considered to be a canonical fact.
	SubscriptionManagerId *SubscriptionManagerId `json:"subscription_manager_id"`
}

// Count The number of items on the current page
type Count = int

// FactSet A set of string facts belonging to a single namespace.
type FactSet struct {
	// Facts The facts themselves.
	Facts map[string]interface{} `json:"facts"`

	// Namespace A namespace the facts belong to.
	Namespace string `json:"namespace"`
}

// Fqdn A host’s Fully Qualified Domain Name.  This field is considered to be a canonical fact.
type Fqdn = string

// GroupId defines model for GroupId.
type GroupId = NonStrictUUID

// GroupName A group’s human-readable name.
type GroupName = string

// GroupOut Data of a single group belonging to an account.
type GroupOut struct {
	// Account A Red Hat Account number that owns the host.
	// Deprecated:
	Account *AccountNumber `json:"account"`

	// Created A timestamp when the entry was created.
	Created *time.Time `json:"created,omitempty"`
	Id      *GroupId   `json:"id,omitempty"`

	// Name A group’s human-readable name.
	Name *GroupName `json:"name,omitempty"`

	// OrgId The Org ID of the tenant that owns the host.
	OrgId *OrgId `json:"org_id,omitempty"`

	// Updated A timestamp when the entry was last updated.
	Updated *time.Time `json:"updated,omitempty"`
}

// HostOut defines model for HostOut.
type HostOut struct {
	// Account A Red Hat Account number that owns the host.
	// Deprecated:
	Account *AccountNumber `json:"account"`

	// AnsibleHost The ansible host name for remediations
	AnsibleHost *string `json:"ansible_host"`

	// BiosUuid A UUID of the host machine BIOS.  This field is considered to be a canonical fact.
	BiosUuid *BiosUuid `json:"bios_uuid"`

	// Created A timestamp when the entry was created.
	Created *time.Time `json:"created,omitempty"`

	// CulledTimestamp Timestamp from which the host is considered deleted.
	CulledTimestamp *time.Time `json:"culled_timestamp"`

	// DisplayName A host’s human-readable display name, e.g. in a form of a domain name.
	DisplayName *string `json:"display_name"`

	// Facts A set of facts belonging to the host.
	Facts *[]FactSet `json:"facts,omitempty"`

	// Fqdn A host’s Fully Qualified Domain Name.  This field is considered to be a canonical fact.
	Fqdn *Fqdn `json:"fqdn"`

	// Groups The groups that the host belongs to, if any.
	Groups *[]GroupOut `json:"groups,omitempty"`

	// Id A durable and reliable platform-wide host identifier. Applications should use this identifier to reference hosts.
	Id *string `json:"id,omitempty"`

	// InsightsId An ID defined in /etc/insights-client/machine-id. This field is considered a canonical fact.
	InsightsId *InsightsId `json:"insights_id"`

	// IpAddresses Host’s network IP addresses.  This field is considered to be a canonical fact.
	IpAddresses *IpAddresses `json:"ip_addresses"`

	// MacAddresses Host’s network interfaces MAC addresses.  This field is considered to be a canonical fact.
	MacAddresses *MacAddresses `json:"mac_addresses"`

	// OrgId The Org ID of the tenant that owns the host.
	OrgId OrgId `json:"org_id"`

	// PerReporterStaleness Reporting source of the last checkin status, stale_timestamp, and last_check_in.
	PerReporterStaleness *map[string]PerReporterStaleness `json:"per_reporter_staleness,omitempty"`

	// ProviderId Host’s reference in the external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM etc. This field is one of the canonical facts and does not work without provider_type.
	ProviderId *ProviderId `json:"provider_id"`

	// ProviderType Type of external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM, etc. This field is one of the canonical facts and does not workout provider_id.
	ProviderType *ProviderType `json:"provider_type"`

	// Reporter Reporting source of the host. Used when updating the stale_timestamp.
	Reporter *string `json:"reporter"`

	// SatelliteId A Red Hat Satellite ID of a RHEL host.  This field is considered to be a canonical fact.
	SatelliteId *SatelliteId `json:"satellite_id"`

	// StaleTimestamp Timestamp from which the host is considered stale.
	StaleTimestamp *time.Time `json:"stale_timestamp"`

	// StaleWarningTimestamp Timestamp from which the host is considered too stale to be listed without an explicit toggle.
	StaleWarningTimestamp *time.Time `json:"stale_warning_timestamp"`

	// SubscriptionManagerId A Red Hat Subcription Manager ID of a RHEL host.  This field is considered to be a canonical fact.
	SubscriptionManagerId *SubscriptionManagerId `json:"subscription_manager_id"`

	// SystemProfile Representation of the system profile fields
	SystemProfile *SystemProfile `json:"system_profile,omitempty"`

	// Updated A timestamp when the entry was last updated.
	Updated *time.Time `json:"updated,omitempty"`
}

// HostQueryOutput defines model for HostQueryOutput.
type HostQueryOutput struct {
	// Count The number of items on the current page
	Count Count `json:"count"`

	// Page The page number
	Page Page `json:"page"`

	// PerPage The number of items to return per page
	PerPage PerPage `json:"per_page"`

	// Results Actual host search query result entries.
	Results []HostOut `json:"results"`

	// Total Total number of items
	Total Total `json:"total"`
}

// HostSystemProfileOut Individual host record that contains only the host id and system profile
type HostSystemProfileOut struct {
	Id *string `json:"id,omitempty"`

	// SystemProfile Representation of the system profile fields
	SystemProfile *SystemProfile `json:"system_profile,omitempty"`
}

// InsightsId An ID defined in /etc/insights-client/machine-id. This field is considered a canonical fact.
type InsightsId = string

// IpAddresses Host’s network IP addresses.  This field is considered to be a canonical fact.
type IpAddresses = []string

// MacAddresses Host’s network interfaces MAC addresses.  This field is considered to be a canonical fact.
type MacAddresses = []string

// NonStrictUUID defines model for NonStrictUUID.
type NonStrictUUID = openapi_types.UUID

// OrgId The Org ID of the tenant that owns the host.
type OrgId = string

// Page The page number
type Page = int

// PaginationOut defines model for PaginationOut.
type PaginationOut struct {
	// Count The number of items on the current page
	Count Count `json:"count"`

	// Page The page number
	Page Page `json:"page"`

	// PerPage The number of items to return per page
	PerPage PerPage `json:"per_page"`

	// Total Total number of items
	Total Total `json:"total"`
}

// PerPage The number of items to return per page
type PerPage = int

// PerReporterStaleness defines model for PerReporterStaleness.
type PerReporterStaleness struct {
	CheckInSucceeded      *bool      `json:"check_in_succeeded,omitempty"`
	CulledTimestamp       *TimeStamp `json:"culled_timestamp,omitempty"`
	LastCheckIn           *TimeStamp `json:"last_check_in,omitempty"`
	StaleTimestamp        *TimeStamp `json:"stale_timestamp,omitempty"`
	StaleWarningTimestamp *TimeStamp `json:"stale_warning_timestamp,omitempty"`
}

// ProviderId Host’s reference in the external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM etc. This field is one of the canonical facts and does not work without provider_type.
type ProviderId = string

// ProviderType Type of external source e.g. Alibaba, AWS EC2, Azure, GCP, IBM, etc. This field is one of the canonical facts and does not workout provider_id.
type ProviderType = string

// SatelliteId A Red Hat Satellite ID of a RHEL host.  This field is considered to be a canonical fact.
type SatelliteId = string

// SubscriptionManagerId A Red Hat Subcription Manager ID of a RHEL host.  This field is considered to be a canonical fact.
type SubscriptionManagerId = string

// SystemProfile Representation of the system profile fields
type SystemProfile struct {
	// Ansible Object containing data specific to Ansible Automation Platform
	Ansible *struct {
		// CatalogWorkerVersion The catalog-worker version on the host
		CatalogWorkerVersion *string `json:"catalog_worker_version,omitempty"`

		// ControllerVersion The ansible-tower or automation-controller version on the host
		ControllerVersion *string `json:"controller_version,omitempty"`

		// HubVersion The automation-hub version on the host
		HubVersion *string `json:"hub_version,omitempty"`

		// SsoVersion The SSO version on the host
		SsoVersion *string `json:"sso_version,omitempty"`
	} `json:"ansible,omitempty"`
	Arch *string `json:"arch,omitempty"`

	// Basearch The architecture family (from yum/dnf)
	Basearch        *string `json:"basearch,omitempty"`
	BiosReleaseDate *string `json:"bios_release_date,omitempty"`
	BiosVendor      *string `json:"bios_vendor,omitempty"`
	BiosVersion     *string `json:"bios_version,omitempty"`

	// BootcStatus Object containing image data from command bootc status
	BootcStatus *struct {
		Booted *struct {
			// CachedImage Name of the image
			CachedImage *string `json:"cached_image,omitempty"`

			// CachedImageDigest Digest of the image
			CachedImageDigest *string `json:"cached_image_digest,omitempty"`

			// Image Name of the image
			Image *string `json:"image,omitempty"`

			// ImageDigest Digest of the image
			ImageDigest *string `json:"image_digest,omitempty"`
		} `json:"booted,omitempty"`
		Rollback *struct {
			// CachedImage Name of the image
			CachedImage *string `json:"cached_image,omitempty"`

			// CachedImageDigest Digest of the image
			CachedImageDigest *string `json:"cached_image_digest,omitempty"`

			// Image Name of the image
			Image *string `json:"image,omitempty"`

			// ImageDigest Digest of the image
			ImageDigest *string `json:"image_digest,omitempty"`
		} `json:"rollback,omitempty"`
		Staged *struct {
			// CachedImage Name of the image
			CachedImage *string `json:"cached_image,omitempty"`

			// CachedImageDigest Digest of the image
			CachedImageDigest *string `json:"cached_image_digest,omitempty"`

			// Image Name of the image
			Image *string `json:"image,omitempty"`

			// ImageDigest Digest of the image
			ImageDigest *string `json:"image_digest,omitempty"`
		} `json:"staged,omitempty"`
	} `json:"bootc_status,omitempty"`
	CapturedDate  *string `json:"captured_date,omitempty"`
	CloudProvider *string `json:"cloud_provider,omitempty"`

	// Conversions Object containing information about 3rd party migration on instances
	Conversions *struct {
		// Activity Whether the conversion activity has been done or not
		Activity *bool `json:"activity,omitempty"`
	} `json:"conversions,omitempty"`
	CoresPerSocket *int32    `json:"cores_per_socket,omitempty"`
	CpuFlags       *[]string `json:"cpu_flags,omitempty"`

	// CpuModel The cpu model name
	CpuModel        *string                    `json:"cpu_model,omitempty"`
	DiskDevices     *[]SystemProfileDiskDevice `json:"disk_devices,omitempty"`
	DnfModules      *[]SystemProfileDnfModule  `json:"dnf_modules,omitempty"`
	EnabledServices *[]string                  `json:"enabled_services,omitempty"`
	GpgPubkeys      *[]string                  `json:"gpg_pubkeys,omitempty"`

	// GreenbootFallbackDetected Indicates whether greenboot detected a rolled back update on an edge device.
	GreenbootFallbackDetected *bool `json:"greenboot_fallback_detected,omitempty"`

	// GreenbootStatus Indicates the greenboot status of an edge device.
	GreenbootStatus *SystemProfileGreenbootStatus `json:"greenboot_status,omitempty"`

	// HostType Indicates the type of host.
	HostType *SystemProfileHostType `json:"host_type,omitempty"`

	// ImageBuilder Object containing image builder facts
	ImageBuilder *struct {
		// CompliancePolicyId The compliance policy that was used and applied during the image build
		CompliancePolicyId *string `json:"compliance_policy_id,omitempty"`

		// ComplianceProfileId The profile that was applied during the image build on which the compliance policy was based
		ComplianceProfileId *string `json:"compliance_profile_id,omitempty"`
	} `json:"image_builder,omitempty"`
	InfrastructureType   *string `json:"infrastructure_type,omitempty"`
	InfrastructureVendor *string `json:"infrastructure_vendor,omitempty"`

	// InsightsClientVersion The version number of insights client. supports wildcards
	InsightsClientVersion  *string                          `json:"insights_client_version,omitempty"`
	InsightsEggVersion     *string                          `json:"insights_egg_version,omitempty"`
	InstalledPackages      *[]string                        `json:"installed_packages,omitempty"`
	InstalledPackagesDelta *[]string                        `json:"installed_packages_delta,omitempty"`
	InstalledProducts      *[]SystemProfileInstalledProduct `json:"installed_products,omitempty"`
	InstalledServices      *[]string                        `json:"installed_services,omitempty"`

	// Intersystems Object containing data specific to InterSystems workload
	Intersystems *struct {
		// IsIntersystems Indicates if InterSystems is installed on the system
		IsIntersystems   *bool `json:"is_intersystems,omitempty"`
		RunningInstances *[]struct {
			// InstanceName The name of the instance
			InstanceName *string `json:"instance_name,omitempty"`

			// Product The product of the instance
			Product *string `json:"product,omitempty"`

			// Version The version of the instance
			Version *string `json:"version,omitempty"`
		} `json:"running_instances,omitempty"`
	} `json:"intersystems,omitempty"`

	// IsMarketplace Indicates whether the host is part of a marketplace install from AWS, Azure, etc.
	IsMarketplace       *bool      `json:"is_marketplace,omitempty"`
	KatelloAgentRunning *bool      `json:"katello_agent_running,omitempty"`
	KernelModules       *[]string  `json:"kernel_modules,omitempty"`
	LastBootTime        *time.Time `json:"last_boot_time,omitempty"`

	// Mssql Object containing data specific to the MS SQL workload
	Mssql *struct {
		// Version MSSQL version number
		Version *string `json:"version,omitempty"`
	} `json:"mssql,omitempty"`
	NetworkInterfaces *[]SystemProfileNetworkInterface `json:"network_interfaces,omitempty"`
	NumberOfCpus      *int32                           `json:"number_of_cpus,omitempty"`
	NumberOfSockets   *int32                           `json:"number_of_sockets,omitempty"`

	// OperatingSystem Object for OS details. Supports range operations
	OperatingSystem *struct {
		// Major Major release of OS (aka the x version)
		Major int `json:"major"`

		// Minor Minor release of OS (aka the y version)
		Minor int `json:"minor"`

		// Name Name of the distro/os
		Name SystemProfileOperatingSystemName `json:"name"`
	} `json:"operating_system,omitempty"`

	// OsKernelVersion The kernel version represented with a three, optionally four, number scheme.
	OsKernelVersion *string `json:"os_kernel_version,omitempty"`
	OsRelease       *string `json:"os_release,omitempty"`

	// OwnerId A UUID associated with the host's RHSM certificate
	OwnerId             *string   `json:"owner_id,omitempty"`
	PublicDns           *[]string `json:"public_dns,omitempty"`
	PublicIpv4Addresses *[]string `json:"public_ipv4_addresses,omitempty"`

	// Releasever Release name of the system distribution (from yum/dnf)
	Releasever *string `json:"releasever,omitempty"`

	// RhcClientId A UUID associated with a cloud_connector
	RhcClientId *string `json:"rhc_client_id,omitempty"`

	// RhcConfigState A UUID associated with the config manager state
	RhcConfigState *string `json:"rhc_config_state,omitempty"`

	// RhelAi Object containing information about RHEL AI
	RhelAi *struct {
		// AmdGpuModels Model name of AMD GPUs
		AmdGpuModels *[]string `json:"amd_gpu_models,omitempty"`

		// IntelGaudiHpuModels Model name of Intel Gaudi HPUs
		IntelGaudiHpuModels *[]string `json:"intel_gaudi_hpu_models,omitempty"`

		// NvidiaGpuModels Model name of Nvidia GPUs in the GPU index order
		NvidiaGpuModels *[]string `json:"nvidia_gpu_models,omitempty"`

		// RhelAiVersionId RHEL AI VERSION ID
		RhelAiVersionId *string `json:"rhel_ai_version_id,omitempty"`

		// Variant RHEL AI VARIANT
		Variant *string `json:"variant,omitempty"`
	} `json:"rhel_ai,omitempty"`

	// Rhsm Object for subscription-manager details
	Rhsm *struct {
		// EnvironmentIds Environments ("content templates") the system is subscribed to.
		EnvironmentIds *[]string `json:"environment_ids,omitempty"`

		// Version System release set by subscription-manager
		Version *string `json:"version,omitempty"`
	} `json:"rhsm,omitempty"`

	// RpmOstreeDeployments The list of deployments on the system as reported by rpm-ostree status --json
	RpmOstreeDeployments *[]struct {
		// Booted Whether the deployment is currently booted
		Booted bool `json:"booted"`

		// Checksum The checksum / commit of the deployment
		Checksum string `json:"checksum"`

		// Id ID of the deployment
		Id string `json:"id"`

		// Origin The origin repo from which the commit was installed
		Origin string `json:"origin"`

		// Osname The operating system name
		Osname string `json:"osname"`

		// Pinned Whether the deployment is currently pinned
		Pinned bool `json:"pinned"`

		// Version The version of the deployment
		Version *string `json:"version,omitempty"`
	} `json:"rpm_ostree_deployments,omitempty"`
	RunningProcesses *[]string `json:"running_processes,omitempty"`

	// Sap Object containing data specific to the SAP workload
	Sap *struct {
		// InstanceNumber The instance number of the SAP HANA system (a two-digit number between 00 and 99)
		InstanceNumber *string `json:"instance_number,omitempty"`

		// SapSystem Indicates if SAP is installed on the system
		SapSystem *bool     `json:"sap_system,omitempty"`
		Sids      *[]string `json:"sids,omitempty"`

		// Version The version of the SAP HANA lifecycle management program
		Version *string `json:"version,omitempty"`
	} `json:"sap,omitempty"`

	// SapInstanceNumber The instance number of the SAP HANA system (a two-digit number between 00 and 99)
	SapInstanceNumber *string   `json:"sap_instance_number,omitempty"`
	SapSids           *[]string `json:"sap_sids,omitempty"`

	// SapSystem Indicates if SAP is installed on the system
	SapSystem *bool `json:"sap_system,omitempty"`

	// SapVersion The version of the SAP HANA lifecycle management program
	SapVersion       *string `json:"sap_version,omitempty"`
	SatelliteManaged *bool   `json:"satellite_managed,omitempty"`

	// SelinuxConfigFile The SELinux mode provided in the config file
	SelinuxConfigFile *string `json:"selinux_config_file,omitempty"`

	// SelinuxCurrentMode The current SELinux mode, either enforcing, permissive, or disabled
	SelinuxCurrentMode     *SystemProfileSelinuxCurrentMode `json:"selinux_current_mode,omitempty"`
	SubscriptionAutoAttach *string                          `json:"subscription_auto_attach,omitempty"`
	SubscriptionStatus     *string                          `json:"subscription_status,omitempty"`
	SystemMemoryBytes      *int64                           `json:"system_memory_bytes,omitempty"`

	// SystemPurpose Object for system purpose information
	SystemPurpose *struct {
		// Role The intended role of the system
		Role *SystemProfileSystemPurposeRole `json:"role,omitempty"`

		// Sla The intended SLA of the system
		Sla *SystemProfileSystemPurposeSla `json:"sla,omitempty"`

		// Usage The intended usage of the system
		Usage *SystemProfileSystemPurposeUsage `json:"usage,omitempty"`
	} `json:"system_purpose,omitempty"`

	// SystemUpdateMethod System update method
	SystemUpdateMethod *SystemProfileSystemUpdateMethod `json:"system_update_method,omitempty"`

	// Systemd Object for whole system systemd state, as reported by systemctl status --all
	Systemd *struct {
		// Failed The number of jobs failed
		Failed int `json:"failed"`

		// FailedServices List of all failed jobs.
		FailedServices *[]string `json:"failed_services,omitempty"`

		// JobsQueued The number of jobs jobs_queued
		JobsQueued int `json:"jobs_queued"`

		// State The state of the systemd subsystem
		State SystemProfileSystemdState `json:"state"`
	} `json:"systemd,omitempty"`

	// ThirdPartyServices Object containing information about system facts of third party services
	ThirdPartyServices *struct {
		// Crowdstrike Object containing information about CrowdStrike system facts
		Crowdstrike *struct {
			// FalconAid CrowdStrike Falcon Agent ID
			FalconAid *string `json:"falcon_aid,omitempty"`

			// FalconBackend CrowdStrike Falcon Sensor backend
			FalconBackend *string `json:"falcon_backend,omitempty"`

			// FalconVersion CrowdStrike running Falcon Sensor version
			FalconVersion *string `json:"falcon_version,omitempty"`
		} `json:"crowdstrike,omitempty"`
	} `json:"third_party_services,omitempty"`

	// ThreadsPerCore Number of CPU threads per CPU core. Typical values: 1, 2, 4
	ThreadsPerCore *int32 `json:"threads_per_core,omitempty"`

	// TunedProfile Current profile resulting from command tuned-adm active
	TunedProfile *string `json:"tuned_profile,omitempty"`

	// VirtualHostUuid Hypervisor host identity (subscription manager id)
	VirtualHostUuid *string                 `json:"virtual_host_uuid,omitempty"`
	YumRepos        *[]SystemProfileYumRepo `json:"yum_repos,omitempty"`
}

// SystemProfileGreenbootStatus Indicates the greenboot status of an edge device.
type SystemProfileGreenbootStatus string

// SystemProfileHostType Indicates the type of host.
type SystemProfileHostType string

// SystemProfileOperatingSystemName Name of the distro/os
type SystemProfileOperatingSystemName string

// SystemProfileSelinuxCurrentMode The current SELinux mode, either enforcing, permissive, or disabled
type SystemProfileSelinuxCurrentMode string

// SystemProfileSystemPurposeRole The intended role of the system
type SystemProfileSystemPurposeRole string

// SystemProfileSystemPurposeSla The intended SLA of the system
type SystemProfileSystemPurposeSla string

// SystemProfileSystemPurposeUsage The intended usage of the system
type SystemProfileSystemPurposeUsage string

// SystemProfileSystemUpdateMethod System update method
type SystemProfileSystemUpdateMethod string

// SystemProfileSystemdState The state of the systemd subsystem
type SystemProfileSystemdState string

// SystemProfileByHostOut defines model for SystemProfileByHostOut.
type SystemProfileByHostOut struct {
	// Count The number of items on the current page
	Count Count `json:"count"`

	// Page The page number
	Page Page `json:"page"`

	// PerPage The number of items to return per page
	PerPage PerPage `json:"per_page"`

	// Results Actual host search query result entries.
	Results []HostSystemProfileOut `json:"results"`

	// Total Total number of items
	Total Total `json:"total"`
}

// SystemProfileDiskDevice Representation of one mounted device
type SystemProfileDiskDevice struct {
	Device *string `json:"device,omitempty"`

	// Label User-defined mount label
	Label *string `json:"label,omitempty"`

	// MountPoint The mount point
	MountPoint *string `json:"mount_point,omitempty"`

	// Options An arbitrary object that does not allow empty string keys.
	Options *SystemProfileNestedObject `json:"options,omitempty"`

	// Type The mount type
	Type *string `json:"type,omitempty"`
}

// SystemProfileDnfModule Representation of one DNF module
type SystemProfileDnfModule struct {
	Name   *string `json:"name,omitempty"`
	Stream *string `json:"stream,omitempty"`
}

// SystemProfileInstalledProduct Representation of one installed product
type SystemProfileInstalledProduct struct {
	// Id The product ID
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	// Status Subscription status for product
	Status *string `json:"status,omitempty"`
}

// SystemProfileNestedObject An arbitrary object that does not allow empty string keys.
type SystemProfileNestedObject map[string]SystemProfileNestedObject_AdditionalProperties

// SystemProfileNestedObject1 defines model for .
type SystemProfileNestedObject1 = interface{}

// SystemProfileNestedObject_AdditionalProperties defines model for SystemProfileNestedObject.AdditionalProperties.
type SystemProfileNestedObject_AdditionalProperties struct {
	union json.RawMessage
}

// SystemProfileNetworkInterface Representation of one network interface
type SystemProfileNetworkInterface struct {
	Ipv4Addresses *[]string `json:"ipv4_addresses,omitempty"`
	Ipv6Addresses *[]string `json:"ipv6_addresses,omitempty"`

	// MacAddress MAC address (with or without colons)
	MacAddress *string `json:"mac_address,omitempty"`

	// Mtu MTU (Maximum transmission unit)
	Mtu *int32 `json:"mtu,omitempty"`

	// Name Name of interface
	Name *string `json:"name,omitempty"`

	// State Interface state (UP, DOWN, UNKNOWN)
	State *string `json:"state,omitempty"`

	// Type Interface type (ether, loopback)
	Type *string `json:"type,omitempty"`
}

// SystemProfileYumRepo Representation of one yum repository
type SystemProfileYumRepo struct {
	BaseUrl  *string `json:"base_url,omitempty"`
	Enabled  *bool   `json:"enabled,omitempty"`
	Gpgcheck *bool   `json:"gpgcheck,omitempty"`
	Id       *string `json:"id,omitempty"`

	// Mirrorlist URL of a mirrorlist for the repository
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// TimeStamp defines model for TimeStamp.
type TimeStamp = time.Time

// Total Total number of items
type Total = int

// BranchId defines model for branchId.
type BranchId = string

// FieldsParam An arbitrary object that does not allow empty string keys.
type FieldsParam = SystemProfileNestedObject

// HostIdList defines model for hostIdList.
type HostIdList = []NonStrictUUID

// HostOrderByParam defines model for hostOrderByParam.
type HostOrderByParam string

// HostOrderHowParam defines model for hostOrderHowParam.
type HostOrderHowParam string

// PageParam defines model for pageParam.
type PageParam = int

// PerPageParam defines model for perPageParam.
type PerPageParam = int

// ApiHostGetHostByIdParams defines parameters for ApiHostGetHostById.
type ApiHostGetHostByIdParams struct {
	// BranchId Filter by branch_id
	BranchId *BranchId `form:"branch_id,omitempty" json:"branch_id,omitempty"`

	// PerPage A number of items to return per page.
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page A page number of the items to return.
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// OrderBy Ordering field name
	OrderBy *ApiHostGetHostByIdParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderHow Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *ApiHostGetHostByIdParamsOrderHow `form:"order_how,omitempty" json:"order_how,omitempty"`

	// Fields Fetches only mentioned system_profile fields. For example, <br /><br /> &nbsp;&nbsp;&nbsp;&nbsp;{"system_profile": ["arch", "host_type"]} <br /><br /> which equates to the URL param: <br /><br /> &nbsp;&nbsp;&nbsp;&nbsp;"?fields[system_profile]=arch,host_type"
	Fields *FieldsParam `json:"fields,omitempty"`
}

// ApiHostGetHostByIdParamsOrderBy defines parameters for ApiHostGetHostById.
type ApiHostGetHostByIdParamsOrderBy string

// ApiHostGetHostByIdParamsOrderHow defines parameters for ApiHostGetHostById.
type ApiHostGetHostByIdParamsOrderHow string

// ApiHostGetHostSystemProfileByIdParams defines parameters for ApiHostGetHostSystemProfileById.
type ApiHostGetHostSystemProfileByIdParams struct {
	// PerPage A number of items to return per page.
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page A page number of the items to return.
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// OrderBy Ordering field name
	OrderBy *ApiHostGetHostSystemProfileByIdParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// OrderHow Direction of the ordering; defaults to ASC for display_name, and to DESC for updated and operating_system
	OrderHow *ApiHostGetHostSystemProfileByIdParamsOrderHow `form:"order_how,omitempty" json:"order_how,omitempty"`

	// BranchId Filter by branch_id
	BranchId *BranchId `form:"branch_id,omitempty" json:"branch_id,omitempty"`

	// Fields Fetches only mentioned system_profile fields. For example, <br /><br /> &nbsp;&nbsp;&nbsp;&nbsp;{"system_profile": ["arch", "host_type"]} <br /><br /> which equates to the URL param: <br /><br /> &nbsp;&nbsp;&nbsp;&nbsp;"?fields[system_profile]=arch,host_type"
	Fields *FieldsParam `json:"fields,omitempty"`
}

// ApiHostGetHostSystemProfileByIdParamsOrderBy defines parameters for ApiHostGetHostSystemProfileById.
type ApiHostGetHostSystemProfileByIdParamsOrderBy string

// ApiHostGetHostSystemProfileByIdParamsOrderHow defines parameters for ApiHostGetHostSystemProfileById.
type ApiHostGetHostSystemProfileByIdParamsOrderHow string

// AsSystemProfileNestedObject returns the union data inside the SystemProfileNestedObject_AdditionalProperties as a SystemProfileNestedObject
func (t SystemProfileNestedObject_AdditionalProperties) AsSystemProfileNestedObject() (SystemProfileNestedObject, error) {
	var body SystemProfileNestedObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSystemProfileNestedObject overwrites any union data inside the SystemProfileNestedObject_AdditionalProperties as the provided SystemProfileNestedObject
func (t *SystemProfileNestedObject_AdditionalProperties) FromSystemProfileNestedObject(v SystemProfileNestedObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSystemProfileNestedObject performs a merge with any union data inside the SystemProfileNestedObject_AdditionalProperties, using the provided SystemProfileNestedObject
func (t *SystemProfileNestedObject_AdditionalProperties) MergeSystemProfileNestedObject(v SystemProfileNestedObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSystemProfileNestedObject1 returns the union data inside the SystemProfileNestedObject_AdditionalProperties as a SystemProfileNestedObject1
func (t SystemProfileNestedObject_AdditionalProperties) AsSystemProfileNestedObject1() (SystemProfileNestedObject1, error) {
	var body SystemProfileNestedObject1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSystemProfileNestedObject1 overwrites any union data inside the SystemProfileNestedObject_AdditionalProperties as the provided SystemProfileNestedObject1
func (t *SystemProfileNestedObject_AdditionalProperties) FromSystemProfileNestedObject1(v SystemProfileNestedObject1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSystemProfileNestedObject1 performs a merge with any union data inside the SystemProfileNestedObject_AdditionalProperties, using the provided SystemProfileNestedObject1
func (t *SystemProfileNestedObject_AdditionalProperties) MergeSystemProfileNestedObject1(v SystemProfileNestedObject1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SystemProfileNestedObject_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SystemProfileNestedObject_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiHostGetHostById request
	ApiHostGetHostById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiHostGetHostSystemProfileById request
	ApiHostGetHostSystemProfileById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiHostGetHostById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiHostGetHostByIdRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiHostGetHostSystemProfileById(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiHostGetHostSystemProfileByIdRequest(c.Server, hostIdList, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiHostGetHostByIdRequest generates requests for ApiHostGetHostById
func NewApiHostGetHostByIdRequest(server string, hostIdList HostIdList, params *ApiHostGetHostByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "host_id_list", runtime.ParamLocationPath, hostIdList)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BranchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_id", runtime.ParamLocationQuery, *params.BranchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderHow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_how", runtime.ParamLocationQuery, *params.OrderHow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiHostGetHostSystemProfileByIdRequest generates requests for ApiHostGetHostSystemProfileById
func NewApiHostGetHostSystemProfileByIdRequest(server string, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "host_id_list", runtime.ParamLocationPath, hostIdList)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/%s/system_profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderHow != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_how", runtime.ParamLocationQuery, *params.OrderHow); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BranchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_id", runtime.ParamLocationQuery, *params.BranchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiHostGetHostByIdWithResponse request
	ApiHostGetHostByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams, reqEditors ...RequestEditorFn) (*ApiHostGetHostByIdResponse, error)

	// ApiHostGetHostSystemProfileByIdWithResponse request
	ApiHostGetHostSystemProfileByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams, reqEditors ...RequestEditorFn) (*ApiHostGetHostSystemProfileByIdResponse, error)
}

type ApiHostGetHostByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostQueryOutput
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiHostGetHostSystemProfileByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemProfileByHostOut
}

// Status returns HTTPResponse.Status
func (r ApiHostGetHostSystemProfileByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiHostGetHostSystemProfileByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiHostGetHostByIdWithResponse request returning *ApiHostGetHostByIdResponse
func (c *ClientWithResponses) ApiHostGetHostByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostByIdParams, reqEditors ...RequestEditorFn) (*ApiHostGetHostByIdResponse, error) {
	rsp, err := c.ApiHostGetHostById(ctx, hostIdList, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostByIdResponse(rsp)
}

// ApiHostGetHostSystemProfileByIdWithResponse request returning *ApiHostGetHostSystemProfileByIdResponse
func (c *ClientWithResponses) ApiHostGetHostSystemProfileByIdWithResponse(ctx context.Context, hostIdList HostIdList, params *ApiHostGetHostSystemProfileByIdParams, reqEditors ...RequestEditorFn) (*ApiHostGetHostSystemProfileByIdResponse, error) {
	rsp, err := c.ApiHostGetHostSystemProfileById(ctx, hostIdList, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiHostGetHostSystemProfileByIdResponse(rsp)
}

// ParseApiHostGetHostByIdResponse parses an HTTP response from a ApiHostGetHostByIdWithResponse call
func ParseApiHostGetHostByIdResponse(rsp *http.Response) (*ApiHostGetHostByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostQueryOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiHostGetHostSystemProfileByIdResponse parses an HTTP response from a ApiHostGetHostSystemProfileByIdWithResponse call
func ParseApiHostGetHostSystemProfileByIdResponse(rsp *http.Response) (*ApiHostGetHostSystemProfileByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiHostGetHostSystemProfileByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemProfileByHostOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
