// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package inventory

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// Filter by 'ansible' field of system profile
type FilterAnsible struct {
	// Filter by 'controller_version' field of ansible
	Controller_version FilterStringWithWildcard `json:"controller_version"`
	// Filter by 'hub_version' field of ansible
	Hub_version FilterStringWithWildcard `json:"hub_version"`
	// Filter by 'catalog_worker_version' field of ansible
	Catalog_worker_version FilterStringWithWildcard `json:"catalog_worker_version"`
	// Filter by 'sso_version' field of ansible
	Sso_version FilterStringWithWildcard `json:"sso_version"`
}

// GetController_version returns FilterAnsible.Controller_version, and is useful for accessing the field via an interface.
func (v *FilterAnsible) GetController_version() FilterStringWithWildcard { return v.Controller_version }

// GetHub_version returns FilterAnsible.Hub_version, and is useful for accessing the field via an interface.
func (v *FilterAnsible) GetHub_version() FilterStringWithWildcard { return v.Hub_version }

// GetCatalog_worker_version returns FilterAnsible.Catalog_worker_version, and is useful for accessing the field via an interface.
func (v *FilterAnsible) GetCatalog_worker_version() FilterStringWithWildcard {
	return v.Catalog_worker_version
}

// GetSso_version returns FilterAnsible.Sso_version, and is useful for accessing the field via an interface.
func (v *FilterAnsible) GetSso_version() FilterStringWithWildcard { return v.Sso_version }

// Basic filter for boolean fields.
type FilterBoolean struct {
	// Compares the document field with the provided value.
	// If `null` is provided then documents where the given field does not exist are returned.
	Is bool `json:"is"`
}

// GetIs returns FilterBoolean.Is, and is useful for accessing the field via an interface.
func (v *FilterBoolean) GetIs() bool { return v.Is }

// Filter by 'disk_devices' field of system profile
type FilterDiskDevices struct {
	// Filter by 'device' field of disk_devices
	Device FilterString `json:"device"`
	// Filter by 'label' field of disk_devices
	Label FilterString `json:"label"`
	// Filter by 'mount_point' field of disk_devices
	Mount_point FilterString `json:"mount_point"`
	// Filter by 'type' field of disk_devices
	Type FilterString `json:"type"`
}

// GetDevice returns FilterDiskDevices.Device, and is useful for accessing the field via an interface.
func (v *FilterDiskDevices) GetDevice() FilterString { return v.Device }

// GetLabel returns FilterDiskDevices.Label, and is useful for accessing the field via an interface.
func (v *FilterDiskDevices) GetLabel() FilterString { return v.Label }

// GetMount_point returns FilterDiskDevices.Mount_point, and is useful for accessing the field via an interface.
func (v *FilterDiskDevices) GetMount_point() FilterString { return v.Mount_point }

// GetType returns FilterDiskDevices.Type, and is useful for accessing the field via an interface.
func (v *FilterDiskDevices) GetType() FilterString { return v.Type }

// Filter by 'dnf_modules' field of system profile
type FilterDnfModules struct {
	// Filter by 'name' field of dnf_modules
	Name FilterString `json:"name"`
	// Filter by 'stream' field of dnf_modules
	Stream FilterString `json:"stream"`
}

// GetName returns FilterDnfModules.Name, and is useful for accessing the field via an interface.
func (v *FilterDnfModules) GetName() FilterString { return v.Name }

// GetStream returns FilterDnfModules.Stream, and is useful for accessing the field via an interface.
func (v *FilterDnfModules) GetStream() FilterString { return v.Stream }

// Filter by 'installed_products' field of system profile
type FilterInstalledProducts struct {
	// Filter by 'name' field of installed_products
	Name FilterString `json:"name"`
	// Filter by 'id' field of installed_products
	Id FilterString `json:"id"`
	// Filter by 'status' field of installed_products
	Status FilterString `json:"status"`
}

// GetName returns FilterInstalledProducts.Name, and is useful for accessing the field via an interface.
func (v *FilterInstalledProducts) GetName() FilterString { return v.Name }

// GetId returns FilterInstalledProducts.Id, and is useful for accessing the field via an interface.
func (v *FilterInstalledProducts) GetId() FilterString { return v.Id }

// GetStatus returns FilterInstalledProducts.Status, and is useful for accessing the field via an interface.
func (v *FilterInstalledProducts) GetStatus() FilterString { return v.Status }

// Timestamp field filter with support for common operations.
type FilterInt struct {
	// Equal to
	Eq int `json:"eq"`
	// Less than
	Lt int `json:"lt"`
	// Less than or equal to
	Lte int `json:"lte"`
	// Greater than
	Gt int `json:"gt"`
	// Greater than or equal to
	Gte int `json:"gte"`
}

// GetEq returns FilterInt.Eq, and is useful for accessing the field via an interface.
func (v *FilterInt) GetEq() int { return v.Eq }

// GetLt returns FilterInt.Lt, and is useful for accessing the field via an interface.
func (v *FilterInt) GetLt() int { return v.Lt }

// GetLte returns FilterInt.Lte, and is useful for accessing the field via an interface.
func (v *FilterInt) GetLte() int { return v.Lte }

// GetGt returns FilterInt.Gt, and is useful for accessing the field via an interface.
func (v *FilterInt) GetGt() int { return v.Gt }

// GetGte returns FilterInt.Gte, and is useful for accessing the field via an interface.
func (v *FilterInt) GetGte() int { return v.Gte }

// Filter by 'mssql' field of system profile
type FilterMssql struct {
	// Filter by 'version' field of mssql
	Version FilterStringWithWildcard `json:"version"`
}

// GetVersion returns FilterMssql.Version, and is useful for accessing the field via an interface.
func (v *FilterMssql) GetVersion() FilterStringWithWildcard { return v.Version }

// Filter by 'network_interfaces' field of system profile
type FilterNetworkInterfaces struct {
	// Filter by 'ipv4_addresses' field of network_interfaces
	Ipv4_addresses FilterString `json:"ipv4_addresses"`
	// Filter by 'ipv6_addresses' field of network_interfaces
	Ipv6_addresses FilterString `json:"ipv6_addresses"`
	// Filter by 'mtu' field of network_interfaces
	Mtu FilterInt `json:"mtu"`
	// Filter by 'mac_address' field of network_interfaces
	Mac_address FilterString `json:"mac_address"`
	// Filter by 'name' field of network_interfaces
	Name FilterString `json:"name"`
	// Filter by 'state' field of network_interfaces
	State FilterString `json:"state"`
	// Filter by 'type' field of network_interfaces
	Type FilterString `json:"type"`
}

// GetIpv4_addresses returns FilterNetworkInterfaces.Ipv4_addresses, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetIpv4_addresses() FilterString { return v.Ipv4_addresses }

// GetIpv6_addresses returns FilterNetworkInterfaces.Ipv6_addresses, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetIpv6_addresses() FilterString { return v.Ipv6_addresses }

// GetMtu returns FilterNetworkInterfaces.Mtu, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetMtu() FilterInt { return v.Mtu }

// GetMac_address returns FilterNetworkInterfaces.Mac_address, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetMac_address() FilterString { return v.Mac_address }

// GetName returns FilterNetworkInterfaces.Name, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetName() FilterString { return v.Name }

// GetState returns FilterNetworkInterfaces.State, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetState() FilterString { return v.State }

// GetType returns FilterNetworkInterfaces.Type, and is useful for accessing the field via an interface.
func (v *FilterNetworkInterfaces) GetType() FilterString { return v.Type }

// Filter by 'operating_system' field of system profile
type FilterOperatingSystem struct {
	// Filter by 'major' field of operating_system
	Major FilterInt `json:"major"`
	// Filter by 'minor' field of operating_system
	Minor FilterInt `json:"minor"`
	// Filter by 'name' field of operating_system
	Name FilterString `json:"name"`
}

// GetMajor returns FilterOperatingSystem.Major, and is useful for accessing the field via an interface.
func (v *FilterOperatingSystem) GetMajor() FilterInt { return v.Major }

// GetMinor returns FilterOperatingSystem.Minor, and is useful for accessing the field via an interface.
func (v *FilterOperatingSystem) GetMinor() FilterInt { return v.Minor }

// GetName returns FilterOperatingSystem.Name, and is useful for accessing the field via an interface.
func (v *FilterOperatingSystem) GetName() FilterString { return v.Name }

// Per-reporter staleness filter.
type FilterPerReporterStaleness struct {
	Reporter           FilterString    `json:"reporter"`
	Stale_timestamp    FilterTimestamp `json:"stale_timestamp"`
	Last_check_in      FilterTimestamp `json:"last_check_in"`
	Check_in_succeeded FilterBoolean   `json:"check_in_succeeded"`
}

// GetReporter returns FilterPerReporterStaleness.Reporter, and is useful for accessing the field via an interface.
func (v *FilterPerReporterStaleness) GetReporter() FilterString { return v.Reporter }

// GetStale_timestamp returns FilterPerReporterStaleness.Stale_timestamp, and is useful for accessing the field via an interface.
func (v *FilterPerReporterStaleness) GetStale_timestamp() FilterTimestamp { return v.Stale_timestamp }

// GetLast_check_in returns FilterPerReporterStaleness.Last_check_in, and is useful for accessing the field via an interface.
func (v *FilterPerReporterStaleness) GetLast_check_in() FilterTimestamp { return v.Last_check_in }

// GetCheck_in_succeeded returns FilterPerReporterStaleness.Check_in_succeeded, and is useful for accessing the field via an interface.
func (v *FilterPerReporterStaleness) GetCheck_in_succeeded() FilterBoolean {
	return v.Check_in_succeeded
}

// Filter by 'rhsm' field of system profile
type FilterRhsm struct {
	// Filter by 'version' field of rhsm
	Version FilterString `json:"version"`
}

// GetVersion returns FilterRhsm.Version, and is useful for accessing the field via an interface.
func (v *FilterRhsm) GetVersion() FilterString { return v.Version }

// Filter by 'rpm_ostree_deployments' field of system profile
type FilterRpmOstreeDeployments struct {
	// Filter by 'id' field of rpm_ostree_deployments
	Id FilterString `json:"id"`
	// Filter by 'checksum' field of rpm_ostree_deployments
	Checksum FilterString `json:"checksum"`
	// Filter by 'origin' field of rpm_ostree_deployments
	Origin FilterString `json:"origin"`
	// Filter by 'osname' field of rpm_ostree_deployments
	Osname FilterString `json:"osname"`
	// Filter by 'version' field of rpm_ostree_deployments
	Version FilterString `json:"version"`
	// Filter by 'booted' field of rpm_ostree_deployments
	Booted FilterBoolean `json:"booted"`
	// Filter by 'pinned' field of rpm_ostree_deployments
	Pinned FilterBoolean `json:"pinned"`
}

// GetId returns FilterRpmOstreeDeployments.Id, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetId() FilterString { return v.Id }

// GetChecksum returns FilterRpmOstreeDeployments.Checksum, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetChecksum() FilterString { return v.Checksum }

// GetOrigin returns FilterRpmOstreeDeployments.Origin, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetOrigin() FilterString { return v.Origin }

// GetOsname returns FilterRpmOstreeDeployments.Osname, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetOsname() FilterString { return v.Osname }

// GetVersion returns FilterRpmOstreeDeployments.Version, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetVersion() FilterString { return v.Version }

// GetBooted returns FilterRpmOstreeDeployments.Booted, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetBooted() FilterBoolean { return v.Booted }

// GetPinned returns FilterRpmOstreeDeployments.Pinned, and is useful for accessing the field via an interface.
func (v *FilterRpmOstreeDeployments) GetPinned() FilterBoolean { return v.Pinned }

// Basic filter for string fields that allows filtering based on exact match.
type FilterString struct {
	// Compares the document field with the provided value.
	// If `null` is provided then documents where the given field does not exist are returned.
	Eq string `json:"eq"`
}

// GetEq returns FilterString.Eq, and is useful for accessing the field via an interface.
func (v *FilterString) GetEq() string { return v.Eq }

// String field filter that allows filtering based on exact match or using wildcards.
type FilterStringWithWildcard struct {
	// Compares the document field with the provided value.
	// If `null` is provided then documents where the given field does not exist are returned.
	Eq string `json:"eq"`
	// Compares the document field with the provided value.
	// Wildcards may be used in the query (e.g. `ki*y`).
	// Two types of wildcard operators are supported:
	// * `?`, which matches any single character
	// * `*`, which can match zero or more characters, including an empty one
	//
	// See [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html) for more details.
	Matches string `json:"matches"`
}

// GetEq returns FilterStringWithWildcard.Eq, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcard) GetEq() string { return v.Eq }

// GetMatches returns FilterStringWithWildcard.Matches, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcard) GetMatches() string { return v.Matches }

// String field filter that allows filtering based on exact match or using wildcards.
// In both cases the case of a letter can be ignored (case-insensitive matching) using the `_lc` suffixed operators.
type FilterStringWithWildcardWithLowercase struct {
	// Compares the document field with the provided value.
	// If `null` is provided then documents where the given field does not exist are returned.
	Eq string `json:"eq"`
	// This operator is like [FilterStringWithWildcard.eq](#filterstring) except that it performs case-insensitive matching.
	// Furthermore, unlike for `eq`, `null` is not an allowed value.
	Eq_lc string `json:"eq_lc"`
	// Compares the document field with the provided value.
	// Wildcards may be used in the query (e.g. `ki*y`).
	// Two types of wildcard operators are supported:
	// * `?`, which matches any single character
	// * `*`, which can match zero or more characters, including an empty one
	//
	// See [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html) for more details.
	Matches string `json:"matches"`
	// This operator is like [FilterStringWithWildcard.matches](#filterstringwithwildcard) except that it performs case-insensitive matching.
	Matches_lc string `json:"matches_lc"`
}

// GetEq returns FilterStringWithWildcardWithLowercase.Eq, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcardWithLowercase) GetEq() string { return v.Eq }

// GetEq_lc returns FilterStringWithWildcardWithLowercase.Eq_lc, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcardWithLowercase) GetEq_lc() string { return v.Eq_lc }

// GetMatches returns FilterStringWithWildcardWithLowercase.Matches, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcardWithLowercase) GetMatches() string { return v.Matches }

// GetMatches_lc returns FilterStringWithWildcardWithLowercase.Matches_lc, and is useful for accessing the field via an interface.
func (v *FilterStringWithWildcardWithLowercase) GetMatches_lc() string { return v.Matches_lc }

// Filter by 'system_purpose' field of system profile
type FilterSystemPurpose struct {
	// Filter by 'usage' field of system_purpose
	Usage FilterString `json:"usage"`
	// Filter by 'role' field of system_purpose
	Role FilterString `json:"role"`
	// Filter by 'sla' field of system_purpose
	Sla FilterString `json:"sla"`
}

// GetUsage returns FilterSystemPurpose.Usage, and is useful for accessing the field via an interface.
func (v *FilterSystemPurpose) GetUsage() FilterString { return v.Usage }

// GetRole returns FilterSystemPurpose.Role, and is useful for accessing the field via an interface.
func (v *FilterSystemPurpose) GetRole() FilterString { return v.Role }

// GetSla returns FilterSystemPurpose.Sla, and is useful for accessing the field via an interface.
func (v *FilterSystemPurpose) GetSla() FilterString { return v.Sla }

// Filters hosts by the presence of a host tag
type FilterTag struct {
	// Tag namespace
	Namespace FilterString `json:"namespace"`
	// Tag key
	Key FilterString `json:"key"`
	// Tag value
	Value FilterString `json:"value"`
}

// GetNamespace returns FilterTag.Namespace, and is useful for accessing the field via an interface.
func (v *FilterTag) GetNamespace() FilterString { return v.Namespace }

// GetKey returns FilterTag.Key, and is useful for accessing the field via an interface.
func (v *FilterTag) GetKey() FilterString { return v.Key }

// GetValue returns FilterTag.Value, and is useful for accessing the field via an interface.
func (v *FilterTag) GetValue() FilterString { return v.Value }

// Timestamp field filter with support for common operations.
type FilterTimestamp struct {
	// Less than
	Lt string `json:"lt"`
	// Less than or equal to
	Lte string `json:"lte"`
	// Greater than
	Gt string `json:"gt"`
	// Greater than or equal to
	Gte string `json:"gte"`
	// Equal
	Eq string `json:"eq"`
}

// GetLt returns FilterTimestamp.Lt, and is useful for accessing the field via an interface.
func (v *FilterTimestamp) GetLt() string { return v.Lt }

// GetLte returns FilterTimestamp.Lte, and is useful for accessing the field via an interface.
func (v *FilterTimestamp) GetLte() string { return v.Lte }

// GetGt returns FilterTimestamp.Gt, and is useful for accessing the field via an interface.
func (v *FilterTimestamp) GetGt() string { return v.Gt }

// GetGte returns FilterTimestamp.Gte, and is useful for accessing the field via an interface.
func (v *FilterTimestamp) GetGte() string { return v.Gte }

// GetEq returns FilterTimestamp.Eq, and is useful for accessing the field via an interface.
func (v *FilterTimestamp) GetEq() string { return v.Eq }

type HOSTS_ORDER_BY string

const (
	HOSTS_ORDER_BYDisplayName     HOSTS_ORDER_BY = "display_name"
	HOSTS_ORDER_BYModifiedOn      HOSTS_ORDER_BY = "modified_on"
	HOSTS_ORDER_BYOperatingSystem HOSTS_ORDER_BY = "operating_system"
)

// Defines criteria by which the hosts are filtered.
type HostFilter struct {
	// Apply logical conjunction on the given filtering criteria
	AND []*HostFilter `json:"AND"`
	// Apply logical disjunction on the given filtering criteria
	OR []*HostFilter `json:"OR"`
	// Negate the given filtering criteria
	NOT *HostFilter `json:"NOT"`
	// Filter by host id
	Id FilterStringWithWildcard `json:"id"`
	// Filter by insights id
	Insights_id FilterStringWithWildcard `json:"insights_id"`
	// Filter by display_name
	Display_name FilterStringWithWildcardWithLowercase `json:"display_name"`
	// Filter by fqdn
	Fqdn FilterStringWithWildcardWithLowercase `json:"fqdn"`
	// Filter by provider_type
	Provider_type FilterString `json:"provider_type"`
	// Filter by provider_id
	Provider_id FilterString `json:"provider_id"`
	// Filter by 'mssql' field of system profile
	Spf_mssql FilterMssql `json:"spf_mssql"`
	// Filter by 'ansible' field of system profile
	Spf_ansible FilterAnsible `json:"spf_ansible"`
	// Filter by 'system_purpose' field of system profile
	Spf_system_purpose FilterSystemPurpose `json:"spf_system_purpose"`
	// Filter by 'rhsm' field of system profile
	Spf_rhsm FilterRhsm `json:"spf_rhsm"`
	// Filter by 'rpm_ostree_deployments' field of system profile
	Spf_rpm_ostree_deployments FilterRpmOstreeDeployments `json:"spf_rpm_ostree_deployments"`
	// Filter by 'greenboot_fallback_detected' field of system profile
	Spf_greenboot_fallback_detected FilterBoolean `json:"spf_greenboot_fallback_detected"`
	// Filter by 'greenboot_status' field of system profile
	Spf_greenboot_status FilterString `json:"spf_greenboot_status"`
	// Filter by 'host_type' field of system profile
	Spf_host_type FilterString `json:"spf_host_type"`
	// Filter by 'is_marketplace' field of system profile
	Spf_is_marketplace FilterBoolean `json:"spf_is_marketplace"`
	// Filter by 'selinux_config_file' field of system profile
	Spf_selinux_config_file FilterString `json:"spf_selinux_config_file"`
	// Filter by 'selinux_current_mode' field of system profile
	Spf_selinux_current_mode FilterString `json:"spf_selinux_current_mode"`
	// Filter by 'tuned_profile' field of system profile
	Spf_tuned_profile FilterString `json:"spf_tuned_profile"`
	// Filter by 'sap_version' field of system profile
	Spf_sap_version FilterString `json:"spf_sap_version"`
	// Filter by 'sap_instance_number' field of system profile
	Spf_sap_instance_number FilterString `json:"spf_sap_instance_number"`
	// Filter by 'sap_sids' field of system profile
	Spf_sap_sids FilterString `json:"spf_sap_sids"`
	// Filter by 'sap_system' field of system profile
	Spf_sap_system FilterBoolean `json:"spf_sap_system"`
	// Filter by 'enabled_services' field of system profile
	Spf_enabled_services FilterString `json:"spf_enabled_services"`
	// Filter by 'installed_services' field of system profile
	Spf_installed_services FilterString `json:"spf_installed_services"`
	// Filter by 'gpg_pubkeys' field of system profile
	Spf_gpg_pubkeys FilterString `json:"spf_gpg_pubkeys"`
	// Filter by 'installed_packages' field of system profile
	Spf_installed_packages FilterString `json:"spf_installed_packages"`
	// Filter by 'captured_date' field of system profile
	Spf_captured_date FilterString `json:"spf_captured_date"`
	// Filter by 'insights_egg_version' field of system profile
	Spf_insights_egg_version FilterString `json:"spf_insights_egg_version"`
	// Filter by 'insights_client_version' field of system profile
	Spf_insights_client_version FilterStringWithWildcard `json:"spf_insights_client_version"`
	// Filter by 'installed_products' field of system profile
	Spf_installed_products FilterInstalledProducts `json:"spf_installed_products"`
	// Filter by 'dnf_modules' field of system profile
	Spf_dnf_modules FilterDnfModules `json:"spf_dnf_modules"`
	// Filter by 'cloud_provider' field of system profile
	Spf_cloud_provider FilterString `json:"spf_cloud_provider"`
	// Filter by 'satellite_managed' field of system profile
	Spf_satellite_managed FilterBoolean `json:"spf_satellite_managed"`
	// Filter by 'katello_agent_running' field of system profile
	Spf_katello_agent_running FilterBoolean `json:"spf_katello_agent_running"`
	// Filter by 'subscription_auto_attach' field of system profile
	Spf_subscription_auto_attach FilterString `json:"spf_subscription_auto_attach"`
	// Filter by 'subscription_status' field of system profile
	Spf_subscription_status FilterString `json:"spf_subscription_status"`
	// Filter by 'last_boot_time' field of system profile
	Spf_last_boot_time FilterTimestamp `json:"spf_last_boot_time"`
	// Filter by 'kernel_modules' field of system profile
	Spf_kernel_modules FilterString `json:"spf_kernel_modules"`
	// Filter by 'arch' field of system profile
	Spf_arch FilterString `json:"spf_arch"`
	// Filter by 'os_kernel_version' field of system profile
	Spf_os_kernel_version FilterStringWithWildcard `json:"spf_os_kernel_version"`
	// Filter by 'os_release' field of system profile
	Spf_os_release FilterStringWithWildcard `json:"spf_os_release"`
	// Filter by 'operating_system' field of system profile
	Spf_operating_system FilterOperatingSystem `json:"spf_operating_system"`
	// Filter by 'cpu_flags' field of system profile
	Spf_cpu_flags FilterString `json:"spf_cpu_flags"`
	// Filter by 'bios_version' field of system profile
	Spf_bios_version FilterString `json:"spf_bios_version"`
	// Filter by 'bios_vendor' field of system profile
	Spf_bios_vendor FilterString `json:"spf_bios_vendor"`
	// Filter by 'disk_devices' field of system profile
	Spf_disk_devices FilterDiskDevices `json:"spf_disk_devices"`
	// Filter by 'network_interfaces' field of system profile
	Spf_network_interfaces FilterNetworkInterfaces `json:"spf_network_interfaces"`
	// Filter by 'infrastructure_vendor' field of system profile
	Spf_infrastructure_vendor FilterString `json:"spf_infrastructure_vendor"`
	// Filter by 'infrastructure_type' field of system profile
	Spf_infrastructure_type FilterString `json:"spf_infrastructure_type"`
	// Filter by 'system_memory_bytes' field of system profile
	Spf_system_memory_bytes FilterInt `json:"spf_system_memory_bytes"`
	// Filter by 'cores_per_socket' field of system profile
	Spf_cores_per_socket FilterInt `json:"spf_cores_per_socket"`
	// Filter by 'number_of_sockets' field of system profile
	Spf_number_of_sockets FilterInt `json:"spf_number_of_sockets"`
	// Filter by 'number_of_cpus' field of system profile
	Spf_number_of_cpus FilterInt `json:"spf_number_of_cpus"`
	// Filter by 'cpu_model' field of system profile
	Spf_cpu_model FilterString `json:"spf_cpu_model"`
	// Filter by 'rhc_config_state' field of system profile
	Spf_rhc_config_state FilterString `json:"spf_rhc_config_state"`
	// Filter by 'rhc_client_id' field of system profile
	Spf_rhc_client_id FilterString `json:"spf_rhc_client_id"`
	// Filter by 'owner_id' field of system profile
	Spf_owner_id FilterString `json:"spf_owner_id"`
	// Filter by the stale_timestamp value
	Stale_timestamp FilterTimestamp `json:"stale_timestamp"`
	// Filter by host tag. The tag namespace/key/value must match exactly what the host is tagged with
	Tag FilterTag `json:"tag"`
	// Filter by per_reporter_staleness sub-fields
	Per_reporter_staleness FilterPerReporterStaleness `json:"per_reporter_staleness"`
}

// GetAND returns HostFilter.AND, and is useful for accessing the field via an interface.
func (v *HostFilter) GetAND() []*HostFilter { return v.AND }

// GetOR returns HostFilter.OR, and is useful for accessing the field via an interface.
func (v *HostFilter) GetOR() []*HostFilter { return v.OR }

// GetNOT returns HostFilter.NOT, and is useful for accessing the field via an interface.
func (v *HostFilter) GetNOT() *HostFilter { return v.NOT }

// GetId returns HostFilter.Id, and is useful for accessing the field via an interface.
func (v *HostFilter) GetId() FilterStringWithWildcard { return v.Id }

// GetInsights_id returns HostFilter.Insights_id, and is useful for accessing the field via an interface.
func (v *HostFilter) GetInsights_id() FilterStringWithWildcard { return v.Insights_id }

// GetDisplay_name returns HostFilter.Display_name, and is useful for accessing the field via an interface.
func (v *HostFilter) GetDisplay_name() FilterStringWithWildcardWithLowercase { return v.Display_name }

// GetFqdn returns HostFilter.Fqdn, and is useful for accessing the field via an interface.
func (v *HostFilter) GetFqdn() FilterStringWithWildcardWithLowercase { return v.Fqdn }

// GetProvider_type returns HostFilter.Provider_type, and is useful for accessing the field via an interface.
func (v *HostFilter) GetProvider_type() FilterString { return v.Provider_type }

// GetProvider_id returns HostFilter.Provider_id, and is useful for accessing the field via an interface.
func (v *HostFilter) GetProvider_id() FilterString { return v.Provider_id }

// GetSpf_mssql returns HostFilter.Spf_mssql, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_mssql() FilterMssql { return v.Spf_mssql }

// GetSpf_ansible returns HostFilter.Spf_ansible, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_ansible() FilterAnsible { return v.Spf_ansible }

// GetSpf_system_purpose returns HostFilter.Spf_system_purpose, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_system_purpose() FilterSystemPurpose { return v.Spf_system_purpose }

// GetSpf_rhsm returns HostFilter.Spf_rhsm, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_rhsm() FilterRhsm { return v.Spf_rhsm }

// GetSpf_rpm_ostree_deployments returns HostFilter.Spf_rpm_ostree_deployments, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_rpm_ostree_deployments() FilterRpmOstreeDeployments {
	return v.Spf_rpm_ostree_deployments
}

// GetSpf_greenboot_fallback_detected returns HostFilter.Spf_greenboot_fallback_detected, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_greenboot_fallback_detected() FilterBoolean {
	return v.Spf_greenboot_fallback_detected
}

// GetSpf_greenboot_status returns HostFilter.Spf_greenboot_status, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_greenboot_status() FilterString { return v.Spf_greenboot_status }

// GetSpf_host_type returns HostFilter.Spf_host_type, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_host_type() FilterString { return v.Spf_host_type }

// GetSpf_is_marketplace returns HostFilter.Spf_is_marketplace, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_is_marketplace() FilterBoolean { return v.Spf_is_marketplace }

// GetSpf_selinux_config_file returns HostFilter.Spf_selinux_config_file, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_selinux_config_file() FilterString { return v.Spf_selinux_config_file }

// GetSpf_selinux_current_mode returns HostFilter.Spf_selinux_current_mode, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_selinux_current_mode() FilterString { return v.Spf_selinux_current_mode }

// GetSpf_tuned_profile returns HostFilter.Spf_tuned_profile, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_tuned_profile() FilterString { return v.Spf_tuned_profile }

// GetSpf_sap_version returns HostFilter.Spf_sap_version, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_sap_version() FilterString { return v.Spf_sap_version }

// GetSpf_sap_instance_number returns HostFilter.Spf_sap_instance_number, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_sap_instance_number() FilterString { return v.Spf_sap_instance_number }

// GetSpf_sap_sids returns HostFilter.Spf_sap_sids, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_sap_sids() FilterString { return v.Spf_sap_sids }

// GetSpf_sap_system returns HostFilter.Spf_sap_system, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_sap_system() FilterBoolean { return v.Spf_sap_system }

// GetSpf_enabled_services returns HostFilter.Spf_enabled_services, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_enabled_services() FilterString { return v.Spf_enabled_services }

// GetSpf_installed_services returns HostFilter.Spf_installed_services, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_installed_services() FilterString { return v.Spf_installed_services }

// GetSpf_gpg_pubkeys returns HostFilter.Spf_gpg_pubkeys, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_gpg_pubkeys() FilterString { return v.Spf_gpg_pubkeys }

// GetSpf_installed_packages returns HostFilter.Spf_installed_packages, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_installed_packages() FilterString { return v.Spf_installed_packages }

// GetSpf_captured_date returns HostFilter.Spf_captured_date, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_captured_date() FilterString { return v.Spf_captured_date }

// GetSpf_insights_egg_version returns HostFilter.Spf_insights_egg_version, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_insights_egg_version() FilterString { return v.Spf_insights_egg_version }

// GetSpf_insights_client_version returns HostFilter.Spf_insights_client_version, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_insights_client_version() FilterStringWithWildcard {
	return v.Spf_insights_client_version
}

// GetSpf_installed_products returns HostFilter.Spf_installed_products, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_installed_products() FilterInstalledProducts {
	return v.Spf_installed_products
}

// GetSpf_dnf_modules returns HostFilter.Spf_dnf_modules, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_dnf_modules() FilterDnfModules { return v.Spf_dnf_modules }

// GetSpf_cloud_provider returns HostFilter.Spf_cloud_provider, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_cloud_provider() FilterString { return v.Spf_cloud_provider }

// GetSpf_satellite_managed returns HostFilter.Spf_satellite_managed, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_satellite_managed() FilterBoolean { return v.Spf_satellite_managed }

// GetSpf_katello_agent_running returns HostFilter.Spf_katello_agent_running, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_katello_agent_running() FilterBoolean { return v.Spf_katello_agent_running }

// GetSpf_subscription_auto_attach returns HostFilter.Spf_subscription_auto_attach, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_subscription_auto_attach() FilterString {
	return v.Spf_subscription_auto_attach
}

// GetSpf_subscription_status returns HostFilter.Spf_subscription_status, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_subscription_status() FilterString { return v.Spf_subscription_status }

// GetSpf_last_boot_time returns HostFilter.Spf_last_boot_time, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_last_boot_time() FilterTimestamp { return v.Spf_last_boot_time }

// GetSpf_kernel_modules returns HostFilter.Spf_kernel_modules, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_kernel_modules() FilterString { return v.Spf_kernel_modules }

// GetSpf_arch returns HostFilter.Spf_arch, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_arch() FilterString { return v.Spf_arch }

// GetSpf_os_kernel_version returns HostFilter.Spf_os_kernel_version, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_os_kernel_version() FilterStringWithWildcard {
	return v.Spf_os_kernel_version
}

// GetSpf_os_release returns HostFilter.Spf_os_release, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_os_release() FilterStringWithWildcard { return v.Spf_os_release }

// GetSpf_operating_system returns HostFilter.Spf_operating_system, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_operating_system() FilterOperatingSystem { return v.Spf_operating_system }

// GetSpf_cpu_flags returns HostFilter.Spf_cpu_flags, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_cpu_flags() FilterString { return v.Spf_cpu_flags }

// GetSpf_bios_version returns HostFilter.Spf_bios_version, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_bios_version() FilterString { return v.Spf_bios_version }

// GetSpf_bios_vendor returns HostFilter.Spf_bios_vendor, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_bios_vendor() FilterString { return v.Spf_bios_vendor }

// GetSpf_disk_devices returns HostFilter.Spf_disk_devices, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_disk_devices() FilterDiskDevices { return v.Spf_disk_devices }

// GetSpf_network_interfaces returns HostFilter.Spf_network_interfaces, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_network_interfaces() FilterNetworkInterfaces {
	return v.Spf_network_interfaces
}

// GetSpf_infrastructure_vendor returns HostFilter.Spf_infrastructure_vendor, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_infrastructure_vendor() FilterString { return v.Spf_infrastructure_vendor }

// GetSpf_infrastructure_type returns HostFilter.Spf_infrastructure_type, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_infrastructure_type() FilterString { return v.Spf_infrastructure_type }

// GetSpf_system_memory_bytes returns HostFilter.Spf_system_memory_bytes, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_system_memory_bytes() FilterInt { return v.Spf_system_memory_bytes }

// GetSpf_cores_per_socket returns HostFilter.Spf_cores_per_socket, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_cores_per_socket() FilterInt { return v.Spf_cores_per_socket }

// GetSpf_number_of_sockets returns HostFilter.Spf_number_of_sockets, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_number_of_sockets() FilterInt { return v.Spf_number_of_sockets }

// GetSpf_number_of_cpus returns HostFilter.Spf_number_of_cpus, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_number_of_cpus() FilterInt { return v.Spf_number_of_cpus }

// GetSpf_cpu_model returns HostFilter.Spf_cpu_model, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_cpu_model() FilterString { return v.Spf_cpu_model }

// GetSpf_rhc_config_state returns HostFilter.Spf_rhc_config_state, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_rhc_config_state() FilterString { return v.Spf_rhc_config_state }

// GetSpf_rhc_client_id returns HostFilter.Spf_rhc_client_id, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_rhc_client_id() FilterString { return v.Spf_rhc_client_id }

// GetSpf_owner_id returns HostFilter.Spf_owner_id, and is useful for accessing the field via an interface.
func (v *HostFilter) GetSpf_owner_id() FilterString { return v.Spf_owner_id }

// GetStale_timestamp returns HostFilter.Stale_timestamp, and is useful for accessing the field via an interface.
func (v *HostFilter) GetStale_timestamp() FilterTimestamp { return v.Stale_timestamp }

// GetTag returns HostFilter.Tag, and is useful for accessing the field via an interface.
func (v *HostFilter) GetTag() FilterTag { return v.Tag }

// GetPer_reporter_staleness returns HostFilter.Per_reporter_staleness, and is useful for accessing the field via an interface.
func (v *HostFilter) GetPer_reporter_staleness() FilterPerReporterStaleness {
	return v.Per_reporter_staleness
}

type ORDER_DIR string

const (
	ORDER_DIRAsc  ORDER_DIR = "ASC"
	ORDER_DIRDesc ORDER_DIR = "DESC"
)

// __getHostDetailsInput is used internally by genqlient
type __getHostDetailsInput struct {
	Filter    HostFilter     `json:"filter"`
	Order_by  HOSTS_ORDER_BY `json:"order_by"`
	Order_how ORDER_DIR      `json:"order_how"`
	Limit     int            `json:"limit"`
	Offset    int            `json:"offset"`
}

// GetFilter returns __getHostDetailsInput.Filter, and is useful for accessing the field via an interface.
func (v *__getHostDetailsInput) GetFilter() HostFilter { return v.Filter }

// GetOrder_by returns __getHostDetailsInput.Order_by, and is useful for accessing the field via an interface.
func (v *__getHostDetailsInput) GetOrder_by() HOSTS_ORDER_BY { return v.Order_by }

// GetOrder_how returns __getHostDetailsInput.Order_how, and is useful for accessing the field via an interface.
func (v *__getHostDetailsInput) GetOrder_how() ORDER_DIR { return v.Order_how }

// GetLimit returns __getHostDetailsInput.Limit, and is useful for accessing the field via an interface.
func (v *__getHostDetailsInput) GetLimit() int { return v.Limit }

// GetOffset returns __getHostDetailsInput.Offset, and is useful for accessing the field via an interface.
func (v *__getHostDetailsInput) GetOffset() int { return v.Offset }

// __getSystemProfileFactsInput is used internally by genqlient
type __getSystemProfileFactsInput struct {
	Filter    HostFilter     `json:"filter"`
	Order_by  HOSTS_ORDER_BY `json:"order_by"`
	Order_how ORDER_DIR      `json:"order_how"`
	Limit     int            `json:"limit"`
	Offset    int            `json:"offset"`
}

// GetFilter returns __getSystemProfileFactsInput.Filter, and is useful for accessing the field via an interface.
func (v *__getSystemProfileFactsInput) GetFilter() HostFilter { return v.Filter }

// GetOrder_by returns __getSystemProfileFactsInput.Order_by, and is useful for accessing the field via an interface.
func (v *__getSystemProfileFactsInput) GetOrder_by() HOSTS_ORDER_BY { return v.Order_by }

// GetOrder_how returns __getSystemProfileFactsInput.Order_how, and is useful for accessing the field via an interface.
func (v *__getSystemProfileFactsInput) GetOrder_how() ORDER_DIR { return v.Order_how }

// GetLimit returns __getSystemProfileFactsInput.Limit, and is useful for accessing the field via an interface.
func (v *__getSystemProfileFactsInput) GetLimit() int { return v.Limit }

// GetOffset returns __getSystemProfileFactsInput.Offset, and is useful for accessing the field via an interface.
func (v *__getSystemProfileFactsInput) GetOffset() int { return v.Offset }

// getHostDetailsHosts includes the requested fields of the GraphQL type Hosts.
type getHostDetailsHosts struct {
	Data []getHostDetailsHostsDataHost `json:"data"`
}

// GetData returns getHostDetailsHosts.Data, and is useful for accessing the field via an interface.
func (v *getHostDetailsHosts) GetData() []getHostDetailsHostsDataHost { return v.Data }

// getHostDetailsHostsDataHost includes the requested fields of the GraphQL type Host.
// The GraphQL type's documentation follows.
//
// Inventory host
type getHostDetailsHostsDataHost struct {
	Id           string `json:"id"`
	Display_name string `json:"display_name"`
	// Facts of a host. The subset of keys can be requested using `filter`.
	Facts map[string]interface{} `json:"facts"`
	// Canonical facts of a host. The subset of keys can be requested using `filter`.
	Canonical_facts map[string]interface{} `json:"canonical_facts"`
}

// GetId returns getHostDetailsHostsDataHost.Id, and is useful for accessing the field via an interface.
func (v *getHostDetailsHostsDataHost) GetId() string { return v.Id }

// GetDisplay_name returns getHostDetailsHostsDataHost.Display_name, and is useful for accessing the field via an interface.
func (v *getHostDetailsHostsDataHost) GetDisplay_name() string { return v.Display_name }

// GetFacts returns getHostDetailsHostsDataHost.Facts, and is useful for accessing the field via an interface.
func (v *getHostDetailsHostsDataHost) GetFacts() map[string]interface{} { return v.Facts }

// GetCanonical_facts returns getHostDetailsHostsDataHost.Canonical_facts, and is useful for accessing the field via an interface.
func (v *getHostDetailsHostsDataHost) GetCanonical_facts() map[string]interface{} {
	return v.Canonical_facts
}

// getHostDetailsResponse is returned by getHostDetails on success.
type getHostDetailsResponse struct {
	// Fetches a list of hosts based on the given filtering, ordering and pagination criteria.
	Hosts getHostDetailsHosts `json:"hosts"`
}

// GetHosts returns getHostDetailsResponse.Hosts, and is useful for accessing the field via an interface.
func (v *getHostDetailsResponse) GetHosts() getHostDetailsHosts { return v.Hosts }

// getSystemProfileFactsHosts includes the requested fields of the GraphQL type Hosts.
type getSystemProfileFactsHosts struct {
	Data []getSystemProfileFactsHostsDataHost `json:"data"`
}

// GetData returns getSystemProfileFactsHosts.Data, and is useful for accessing the field via an interface.
func (v *getSystemProfileFactsHosts) GetData() []getSystemProfileFactsHostsDataHost { return v.Data }

// getSystemProfileFactsHostsDataHost includes the requested fields of the GraphQL type Host.
// The GraphQL type's documentation follows.
//
// Inventory host
type getSystemProfileFactsHostsDataHost struct {
	Id string `json:"id"`
	// System profile of a host. The subset of keys can be requested using `filter`.
	System_profile_facts map[string]interface{} `json:"system_profile_facts"`
}

// GetId returns getSystemProfileFactsHostsDataHost.Id, and is useful for accessing the field via an interface.
func (v *getSystemProfileFactsHostsDataHost) GetId() string { return v.Id }

// GetSystem_profile_facts returns getSystemProfileFactsHostsDataHost.System_profile_facts, and is useful for accessing the field via an interface.
func (v *getSystemProfileFactsHostsDataHost) GetSystem_profile_facts() map[string]interface{} {
	return v.System_profile_facts
}

// getSystemProfileFactsResponse is returned by getSystemProfileFacts on success.
type getSystemProfileFactsResponse struct {
	// Fetches a list of hosts based on the given filtering, ordering and pagination criteria.
	Hosts getSystemProfileFactsHosts `json:"hosts"`
}

// GetHosts returns getSystemProfileFactsResponse.Hosts, and is useful for accessing the field via an interface.
func (v *getSystemProfileFactsResponse) GetHosts() getSystemProfileFactsHosts { return v.Hosts }

// Queries used to reach out to host inventory
func getHostDetails(
	ctx context.Context,
	client graphql.Client,
	filter HostFilter,
	order_by HOSTS_ORDER_BY,
	order_how ORDER_DIR,
	limit int,
	offset int,
) (*getHostDetailsResponse, error) {
	req := &graphql.Request{
		OpName: "getHostDetails",
		Query: `
query getHostDetails ($filter: HostFilter, $order_by: HOSTS_ORDER_BY, $order_how: ORDER_DIR, $limit: Int, $offset: Int) {
	hosts(filter: $filter, order_by: $order_by, order_how: $order_how, limit: $limit, offset: $offset) {
		data {
			id
			display_name
			facts
			canonical_facts(filter: ["fqdn"])
		}
	}
}
`,
		Variables: &__getHostDetailsInput{
			Filter:    filter,
			Order_by:  order_by,
			Order_how: order_how,
			Limit:     limit,
			Offset:    offset,
		},
	}
	var err error

	var data getHostDetailsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSystemProfileFacts(
	ctx context.Context,
	client graphql.Client,
	filter HostFilter,
	order_by HOSTS_ORDER_BY,
	order_how ORDER_DIR,
	limit int,
	offset int,
) (*getSystemProfileFactsResponse, error) {
	req := &graphql.Request{
		OpName: "getSystemProfileFacts",
		Query: `
query getSystemProfileFacts ($filter: HostFilter, $order_by: HOSTS_ORDER_BY, $order_how: ORDER_DIR, $limit: Int, $offset: Int) {
	hosts(filter: $filter, order_by: $order_by, order_how: $order_how, limit: $limit, offset: $offset) {
		data {
			id
			system_profile_facts(filter: ["rhc_client_id"])
		}
	}
}
`,
		Variables: &__getSystemProfileFactsInput{
			Filter:    filter,
			Order_by:  order_by,
			Order_how: order_how,
			Limit:     limit,
			Offset:    offset,
		},
	}
	var err error

	var data getSystemProfileFactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
