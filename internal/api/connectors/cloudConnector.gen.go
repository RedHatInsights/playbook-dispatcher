// Package connectors provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package connectors

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// ConnectionDisconnectRequest defines model for ConnectionDisconnectRequest.
type ConnectionDisconnectRequest struct {
	Account *string `json:"account,omitempty"`
	Message *string `json:"message,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionListAccountResponse defines model for ConnectionListAccountResponse.
type ConnectionListAccountResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseMeta)
	PaginatedResponseMeta `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseLinks)
	PaginatedResponseLinks `yaml:",inline"`
}

// ConnectionListResponse defines model for ConnectionListResponse.
type ConnectionListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseMeta)
	PaginatedResponseMeta `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseLinks)
	PaginatedResponseLinks `yaml:",inline"`
}

// ConnectionPingResponse defines model for ConnectionPingResponse.
type ConnectionPingResponse struct {
	Payload *Payload          `json:"payload,omitempty"`
	Status  *ConnectionStatus `json:"status,omitempty"`
}

// ConnectionReconnectRequest defines model for ConnectionReconnectRequest.
type ConnectionReconnectRequest struct {
	Account *string `json:"account,omitempty"`
	Delay   *int    `json:"delay,omitempty"`
	Message *string `json:"message,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionStatus defines model for ConnectionStatus.
type ConnectionStatus string

// List of ConnectionStatus
const (
	ConnectionStatus_connected    ConnectionStatus = "connected"
	ConnectionStatus_disconnected ConnectionStatus = "disconnected"
)

// ConnectionStatusRequest defines model for ConnectionStatusRequest.
type ConnectionStatusRequest struct {
	Account *string `json:"account,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionStatusResponse defines model for ConnectionStatusResponse.
type ConnectionStatusResponse struct {
	Dispatchers *map[string]interface{} `json:"dispatchers,omitempty"`
	Status      *ConnectionStatus       `json:"status,omitempty"`
}

// MessageRequest defines model for MessageRequest.
type MessageRequest struct {
	Account   *string                  `json:"account,omitempty"`
	Directive *string                  `json:"directive,omitempty"`
	Metadata  *MessageRequest_Metadata `json:"metadata,omitempty"`
	Payload   *string                  `json:"payload,omitempty"`
	Recipient *string                  `json:"recipient,omitempty"`
}

// MessageRequest_Metadata defines model for MessageRequest.Metadata.
type MessageRequest_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Id *string `json:"id,omitempty"`
}

// PaginatedResponseLinks defines model for PaginatedResponseLinks.
type PaginatedResponseLinks struct {
	Links *struct {
		First *string `json:"first,omitempty"`
		Last  *string `json:"last,omitempty"`
		Next  *string `json:"next,omitempty"`
		Prev  *string `json:"prev,omitempty"`
	} `json:"links,omitempty"`
}

// PaginatedResponseMeta defines model for PaginatedResponseMeta.
type PaginatedResponseMeta struct {
	Meta *struct {
		Count *int `json:"count,omitempty"`
	} `json:"meta,omitempty"`
}

// Payload defines model for Payload.
type Payload struct {
	Account      *string                 `json:"account,omitempty"`
	Code         *int                    `json:"code,omitempty"`
	InResponseTo *string                 `json:"in_response_to,omitempty"`
	MessageId    *string                 `json:"message_id,omitempty"`
	MessageType  *string                 `json:"message_type,omitempty"`
	Payload      *map[string]interface{} `json:"payload,omitempty"`
	Sender       *string                 `json:"sender,omitempty"`
	Serial       *int                    `json:"serial,omitempty"`
}

// AccountID defines model for AccountID.
type AccountID string

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// GetConnectionParams defines parameters for GetConnection.
type GetConnectionParams struct {

	// limit
	Limit *Limit `json:"limit,omitempty"`

	// offset
	Offset *Offset `json:"offset,omitempty"`
}

// PostConnectionDisconnectJSONBody defines parameters for PostConnectionDisconnect.
type PostConnectionDisconnectJSONBody ConnectionDisconnectRequest

// PostConnectionPingJSONBody defines parameters for PostConnectionPing.
type PostConnectionPingJSONBody ConnectionStatusRequest

// PostConnectionReconnectJSONBody defines parameters for PostConnectionReconnect.
type PostConnectionReconnectJSONBody ConnectionReconnectRequest

// V1ConnectionStatusJSONBody defines parameters for V1ConnectionStatus.
type V1ConnectionStatusJSONBody ConnectionStatusRequest

// GetConnectionAccountParams defines parameters for GetConnectionAccount.
type GetConnectionAccountParams struct {

	// limit
	Limit *Limit `json:"limit,omitempty"`

	// offset
	Offset *Offset `json:"offset,omitempty"`
}

// V1ConnectionStatusMultitenantJSONBody defines parameters for V1ConnectionStatusMultitenant.
type V1ConnectionStatusMultitenantJSONBody ConnectionStatusRequest

// PostMessageJSONBody defines parameters for PostMessage.
type PostMessageJSONBody MessageRequest

// PostConnectionDisconnectRequestBody defines body for PostConnectionDisconnect for application/json ContentType.
type PostConnectionDisconnectJSONRequestBody PostConnectionDisconnectJSONBody

// PostConnectionPingRequestBody defines body for PostConnectionPing for application/json ContentType.
type PostConnectionPingJSONRequestBody PostConnectionPingJSONBody

// PostConnectionReconnectRequestBody defines body for PostConnectionReconnect for application/json ContentType.
type PostConnectionReconnectJSONRequestBody PostConnectionReconnectJSONBody

// V1ConnectionStatusRequestBody defines body for V1ConnectionStatus for application/json ContentType.
type V1ConnectionStatusJSONRequestBody V1ConnectionStatusJSONBody

// V1ConnectionStatusMultitenantRequestBody defines body for V1ConnectionStatusMultitenant for application/json ContentType.
type V1ConnectionStatusMultitenantJSONRequestBody V1ConnectionStatusMultitenantJSONBody

// PostMessageRequestBody defines body for PostMessage for application/json ContentType.
type PostMessageJSONRequestBody PostMessageJSONBody

// Getter for additional properties for MessageRequest_Metadata. Returns the specified
// element and whether it was found
func (a MessageRequest_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MessageRequest_Metadata
func (a *MessageRequest_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MessageRequest_Metadata to handle AdditionalProperties
func (a *MessageRequest_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MessageRequest_Metadata to handle AdditionalProperties
func (a MessageRequest_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConnection request
	GetConnection(ctx context.Context, params *GetConnectionParams) (*http.Response, error)

	// PostConnectionDisconnect request  with any body
	PostConnectionDisconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostConnectionDisconnect(ctx context.Context, body PostConnectionDisconnectJSONRequestBody) (*http.Response, error)

	// PostConnectionPing request  with any body
	PostConnectionPingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostConnectionPing(ctx context.Context, body PostConnectionPingJSONRequestBody) (*http.Response, error)

	// PostConnectionReconnect request  with any body
	PostConnectionReconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostConnectionReconnect(ctx context.Context, body PostConnectionReconnectJSONRequestBody) (*http.Response, error)

	// V1ConnectionStatus request  with any body
	V1ConnectionStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	V1ConnectionStatus(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*http.Response, error)

	// GetConnectionAccount request
	GetConnectionAccount(ctx context.Context, account AccountID, params *GetConnectionAccountParams) (*http.Response, error)

	// V1ConnectionStatusMultitenant request  with any body
	V1ConnectionStatusMultitenantWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	V1ConnectionStatusMultitenant(ctx context.Context, body V1ConnectionStatusMultitenantJSONRequestBody) (*http.Response, error)

	// PostMessage request  with any body
	PostMessageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostMessage(ctx context.Context, body PostMessageJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetConnection(ctx context.Context, params *GetConnectionParams) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionDisconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostConnectionDisconnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionDisconnect(ctx context.Context, body PostConnectionDisconnectJSONRequestBody) (*http.Response, error) {
	req, err := NewPostConnectionDisconnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionPingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostConnectionPingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionPing(ctx context.Context, body PostConnectionPingJSONRequestBody) (*http.Response, error) {
	req, err := NewPostConnectionPingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionReconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostConnectionReconnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionReconnect(ctx context.Context, body PostConnectionReconnectJSONRequestBody) (*http.Response, error) {
	req, err := NewPostConnectionReconnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewV1ConnectionStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatus(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*http.Response, error) {
	req, err := NewV1ConnectionStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionAccount(ctx context.Context, account AccountID, params *GetConnectionAccountParams) (*http.Response, error) {
	req, err := NewGetConnectionAccountRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusMultitenantWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewV1ConnectionStatusMultitenantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusMultitenant(ctx context.Context, body V1ConnectionStatusMultitenantJSONRequestBody) (*http.Response, error) {
	req, err := NewV1ConnectionStatusMultitenantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessage(ctx context.Context, body PostMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewPostMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetConnectionRequest generates requests for GetConnection
func NewGetConnectionRequest(server string, params *GetConnectionParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConnectionDisconnectRequest calls the generic PostConnectionDisconnect builder with application/json body
func NewPostConnectionDisconnectRequest(server string, body PostConnectionDisconnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConnectionDisconnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConnectionDisconnectRequestWithBody generates requests for PostConnectionDisconnect with any type of body
func NewPostConnectionDisconnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection/disconnect")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostConnectionPingRequest calls the generic PostConnectionPing builder with application/json body
func NewPostConnectionPingRequest(server string, body PostConnectionPingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConnectionPingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConnectionPingRequestWithBody generates requests for PostConnectionPing with any type of body
func NewPostConnectionPingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection/ping")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostConnectionReconnectRequest calls the generic PostConnectionReconnect builder with application/json body
func NewPostConnectionReconnectRequest(server string, body PostConnectionReconnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConnectionReconnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConnectionReconnectRequestWithBody generates requests for PostConnectionReconnect with any type of body
func NewPostConnectionReconnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection/reconnect")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewV1ConnectionStatusRequest calls the generic V1ConnectionStatus builder with application/json body
func NewV1ConnectionStatusRequest(server string, body V1ConnectionStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ConnectionStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewV1ConnectionStatusRequestWithBody generates requests for V1ConnectionStatus with any type of body
func NewV1ConnectionStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection/status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetConnectionAccountRequest generates requests for GetConnectionAccount
func NewGetConnectionAccountRequest(server string, account AccountID, params *GetConnectionAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "account", account)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1ConnectionStatusMultitenantRequest calls the generic V1ConnectionStatusMultitenant builder with application/json body
func NewV1ConnectionStatusMultitenantRequest(server string, body V1ConnectionStatusMultitenantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ConnectionStatusMultitenantRequestWithBody(server, "application/json", bodyReader)
}

// NewV1ConnectionStatusMultitenantRequestWithBody generates requests for V1ConnectionStatusMultitenant with any type of body
func NewV1ConnectionStatusMultitenantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/connection_status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostMessageRequest calls the generic PostMessage builder with application/json body
func NewPostMessageRequest(server string, body PostMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessageRequestWithBody generates requests for PostMessage with any type of body
func NewPostMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/message")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConnection request
	GetConnectionWithResponse(ctx context.Context, params *GetConnectionParams) (*GetConnectionResponse, error)

	// PostConnectionDisconnect request  with any body
	PostConnectionDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionDisconnectResponse, error)

	PostConnectionDisconnectWithResponse(ctx context.Context, body PostConnectionDisconnectJSONRequestBody) (*PostConnectionDisconnectResponse, error)

	// PostConnectionPing request  with any body
	PostConnectionPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionPingResponse, error)

	PostConnectionPingWithResponse(ctx context.Context, body PostConnectionPingJSONRequestBody) (*PostConnectionPingResponse, error)

	// PostConnectionReconnect request  with any body
	PostConnectionReconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionReconnectResponse, error)

	PostConnectionReconnectWithResponse(ctx context.Context, body PostConnectionReconnectJSONRequestBody) (*PostConnectionReconnectResponse, error)

	// V1ConnectionStatus request  with any body
	V1ConnectionStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusResponse, error)

	V1ConnectionStatusWithResponse(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*V1ConnectionStatusResponse, error)

	// GetConnectionAccount request
	GetConnectionAccountWithResponse(ctx context.Context, account AccountID, params *GetConnectionAccountParams) (*GetConnectionAccountResponse, error)

	// V1ConnectionStatusMultitenant request  with any body
	V1ConnectionStatusMultitenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusMultitenantResponse, error)

	V1ConnectionStatusMultitenantWithResponse(ctx context.Context, body V1ConnectionStatusMultitenantJSONRequestBody) (*V1ConnectionStatusMultitenantResponse, error)

	// PostMessage request  with any body
	PostMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMessageResponse, error)

	PostMessageWithResponse(ctx context.Context, body PostMessageJSONRequestBody) (*PostMessageResponse, error)
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionListResponse
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectionDisconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConnectionDisconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectionDisconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectionPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionPingResponse
}

// Status returns HTTPResponse.Status
func (r PostConnectionPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectionPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectionReconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConnectionReconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectionReconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusResponse
}

// Status returns HTTPResponse.Status
func (r V1ConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionListAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetConnectionAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ConnectionStatusMultitenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ConnectionStatusResponse
}

// Status returns HTTPResponse.Status
func (r V1ConnectionStatusMultitenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ConnectionStatusMultitenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConnectionWithResponse request returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, params *GetConnectionParams) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// PostConnectionDisconnectWithBodyWithResponse request with arbitrary body returning *PostConnectionDisconnectResponse
func (c *ClientWithResponses) PostConnectionDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionDisconnectResponse, error) {
	rsp, err := c.PostConnectionDisconnectWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionDisconnectResponse(rsp)
}

func (c *ClientWithResponses) PostConnectionDisconnectWithResponse(ctx context.Context, body PostConnectionDisconnectJSONRequestBody) (*PostConnectionDisconnectResponse, error) {
	rsp, err := c.PostConnectionDisconnect(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionDisconnectResponse(rsp)
}

// PostConnectionPingWithBodyWithResponse request with arbitrary body returning *PostConnectionPingResponse
func (c *ClientWithResponses) PostConnectionPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionPingResponse, error) {
	rsp, err := c.PostConnectionPingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionPingResponse(rsp)
}

func (c *ClientWithResponses) PostConnectionPingWithResponse(ctx context.Context, body PostConnectionPingJSONRequestBody) (*PostConnectionPingResponse, error) {
	rsp, err := c.PostConnectionPing(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionPingResponse(rsp)
}

// PostConnectionReconnectWithBodyWithResponse request with arbitrary body returning *PostConnectionReconnectResponse
func (c *ClientWithResponses) PostConnectionReconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostConnectionReconnectResponse, error) {
	rsp, err := c.PostConnectionReconnectWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionReconnectResponse(rsp)
}

func (c *ClientWithResponses) PostConnectionReconnectWithResponse(ctx context.Context, body PostConnectionReconnectJSONRequestBody) (*PostConnectionReconnectResponse, error) {
	rsp, err := c.PostConnectionReconnect(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionReconnectResponse(rsp)
}

// V1ConnectionStatusWithBodyWithResponse request with arbitrary body returning *V1ConnectionStatusResponse
func (c *ClientWithResponses) V1ConnectionStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusResponse, error) {
	rsp, err := c.V1ConnectionStatusWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusResponse(rsp)
}

func (c *ClientWithResponses) V1ConnectionStatusWithResponse(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*V1ConnectionStatusResponse, error) {
	rsp, err := c.V1ConnectionStatus(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusResponse(rsp)
}

// GetConnectionAccountWithResponse request returning *GetConnectionAccountResponse
func (c *ClientWithResponses) GetConnectionAccountWithResponse(ctx context.Context, account AccountID, params *GetConnectionAccountParams) (*GetConnectionAccountResponse, error) {
	rsp, err := c.GetConnectionAccount(ctx, account, params)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionAccountResponse(rsp)
}

// V1ConnectionStatusMultitenantWithBodyWithResponse request with arbitrary body returning *V1ConnectionStatusMultitenantResponse
func (c *ClientWithResponses) V1ConnectionStatusMultitenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusMultitenantResponse, error) {
	rsp, err := c.V1ConnectionStatusMultitenantWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusMultitenantResponse(rsp)
}

func (c *ClientWithResponses) V1ConnectionStatusMultitenantWithResponse(ctx context.Context, body V1ConnectionStatusMultitenantJSONRequestBody) (*V1ConnectionStatusMultitenantResponse, error) {
	rsp, err := c.V1ConnectionStatusMultitenant(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusMultitenantResponse(rsp)
}

// PostMessageWithBodyWithResponse request with arbitrary body returning *PostMessageResponse
func (c *ClientWithResponses) PostMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostMessageResponse, error) {
	rsp, err := c.PostMessageWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageResponse(rsp)
}

func (c *ClientWithResponses) PostMessageWithResponse(ctx context.Context, body PostMessageJSONRequestBody) (*PostMessageResponse, error) {
	rsp, err := c.PostMessage(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageResponse(rsp)
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConnectionDisconnectResponse parses an HTTP response from a PostConnectionDisconnectWithResponse call
func ParsePostConnectionDisconnectResponse(rsp *http.Response) (*PostConnectionDisconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConnectionDisconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostConnectionPingResponse parses an HTTP response from a PostConnectionPingWithResponse call
func ParsePostConnectionPingResponse(rsp *http.Response) (*PostConnectionPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConnectionPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionPingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConnectionReconnectResponse parses an HTTP response from a PostConnectionReconnectWithResponse call
func ParsePostConnectionReconnectResponse(rsp *http.Response) (*PostConnectionReconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConnectionReconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseV1ConnectionStatusResponse parses an HTTP response from a V1ConnectionStatusWithResponse call
func ParseV1ConnectionStatusResponse(rsp *http.Response) (*V1ConnectionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &V1ConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConnectionAccountResponse parses an HTTP response from a GetConnectionAccountWithResponse call
func ParseGetConnectionAccountResponse(rsp *http.Response) (*GetConnectionAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionListAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1ConnectionStatusMultitenantResponse parses an HTTP response from a V1ConnectionStatusMultitenantWithResponse call
func ParseV1ConnectionStatusMultitenantResponse(rsp *http.Response) (*V1ConnectionStatusMultitenantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &V1ConnectionStatusMultitenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostMessageResponse parses an HTTP response from a PostMessageWithResponse call
func ParsePostMessageResponse(rsp *http.Response) (*PostMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
