// Package connectors provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package connectors

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// ConnectionDisconnectRequest defines model for ConnectionDisconnectRequest.
type ConnectionDisconnectRequest struct {
	Account *string `json:"account,omitempty"`
	Message *string `json:"message,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionListAccountResponse defines model for ConnectionListAccountResponse.
type ConnectionListAccountResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseMeta)
	PaginatedResponseMeta `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseLinks)
	PaginatedResponseLinks `yaml:",inline"`
}

// ConnectionListByAccountResponseV2 defines model for ConnectionListByAccountResponseV2.
type ConnectionListByAccountResponseV2 struct {
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseMeta)
	PaginatedResponseMeta `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseLinks)
	PaginatedResponseLinks `yaml:",inline"`
}

// ConnectionListResponse defines model for ConnectionListResponse.
type ConnectionListResponse struct {
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseMeta)
	PaginatedResponseMeta `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/PaginatedResponseLinks)
	PaginatedResponseLinks `yaml:",inline"`
}

// ConnectionPingResponse defines model for ConnectionPingResponse.
type ConnectionPingResponse struct {
	Payload *Payload          `json:"payload,omitempty"`
	Status  *ConnectionStatus `json:"status,omitempty"`
}

// ConnectionReconnectRequest defines model for ConnectionReconnectRequest.
type ConnectionReconnectRequest struct {
	Account *string `json:"account,omitempty"`
	Delay   *int    `json:"delay,omitempty"`
	Message *string `json:"message,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionStatus defines model for ConnectionStatus.
type ConnectionStatus string

// List of ConnectionStatus
const (
	ConnectionStatus_connected    ConnectionStatus = "connected"
	ConnectionStatus_disconnected ConnectionStatus = "disconnected"
)

// ConnectionStatusRequest defines model for ConnectionStatusRequest.
type ConnectionStatusRequest struct {
	Account *string `json:"account,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
}

// ConnectionStatusResponse defines model for ConnectionStatusResponse.
type ConnectionStatusResponse struct {
	Dispatchers *map[string]interface{} `json:"dispatchers,omitempty"`
	Status      *ConnectionStatus       `json:"status,omitempty"`
}

// ConnectionStatusResponseV2 defines model for ConnectionStatusResponseV2.
type ConnectionStatusResponseV2 struct {
	// Embedded struct due to allOf(#/components/schemas/ConnectionV2)
	ConnectionV2 `yaml:",inline"`
}

// ConnectionV2 defines model for ConnectionV2.
type ConnectionV2 struct {
	Account        *string                 `json:"account,omitempty"`
	CanonicalFacts *map[string]interface{} `json:"canonical_facts,omitempty"`
	ClientId       *string                 `json:"client_id,omitempty"`
	Dispatchers    *map[string]interface{} `json:"dispatchers,omitempty"`
	OrgId          *string                 `json:"org_id,omitempty"`
	Tags           *map[string]interface{} `json:"tags,omitempty"`
}

// MessageRequest defines model for MessageRequest.
type MessageRequest struct {
	Account   *string                  `json:"account,omitempty"`
	Directive *string                  `json:"directive,omitempty"`
	Metadata  *MessageRequest_Metadata `json:"metadata,omitempty"`
	Payload   *string                  `json:"payload,omitempty"`
	Recipient *string                  `json:"recipient,omitempty"`
}

// MessageRequest_Metadata defines model for MessageRequest.Metadata.
type MessageRequest_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// MessageRequestV2 defines model for MessageRequestV2.
type MessageRequestV2 struct {
	Directive *string                    `json:"directive,omitempty"`
	Metadata  *MessageRequestV2_Metadata `json:"metadata,omitempty"`
	Payload   *string                    `json:"payload,omitempty"`
}

// MessageRequestV2_Metadata defines model for MessageRequestV2.Metadata.
type MessageRequestV2_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Id *string `json:"id,omitempty"`
}

// PaginatedResponseLinks defines model for PaginatedResponseLinks.
type PaginatedResponseLinks struct {
	Links *struct {
		First *string `json:"first,omitempty"`
		Last  *string `json:"last,omitempty"`
		Next  *string `json:"next,omitempty"`
		Prev  *string `json:"prev,omitempty"`
	} `json:"links,omitempty"`
}

// PaginatedResponseMeta defines model for PaginatedResponseMeta.
type PaginatedResponseMeta struct {
	Meta *struct {
		Count *int `json:"count,omitempty"`
	} `json:"meta,omitempty"`
}

// Payload defines model for Payload.
type Payload struct {
	Account      *string                 `json:"account,omitempty"`
	Code         *int                    `json:"code,omitempty"`
	InResponseTo *string                 `json:"in_response_to,omitempty"`
	MessageId    *string                 `json:"message_id,omitempty"`
	MessageType  *string                 `json:"message_type,omitempty"`
	Payload      *map[string]interface{} `json:"payload,omitempty"`
	Sender       *string                 `json:"sender,omitempty"`
	Serial       *int                    `json:"serial,omitempty"`
}

// AccountID defines model for AccountID.
type AccountID string

// ClientID defines model for ClientID.
type ClientID string

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// GetV1ConnectionParams defines parameters for GetV1Connection.
type GetV1ConnectionParams struct {

	// limit
	Limit *Limit `json:"limit,omitempty"`

	// offset
	Offset *Offset `json:"offset,omitempty"`
}

// PostV1ConnectionDisconnectJSONBody defines parameters for PostV1ConnectionDisconnect.
type PostV1ConnectionDisconnectJSONBody ConnectionDisconnectRequest

// PostV1ConnectionPingJSONBody defines parameters for PostV1ConnectionPing.
type PostV1ConnectionPingJSONBody ConnectionStatusRequest

// PostV1ConnectionReconnectJSONBody defines parameters for PostV1ConnectionReconnect.
type PostV1ConnectionReconnectJSONBody ConnectionReconnectRequest

// V1ConnectionStatusJSONBody defines parameters for V1ConnectionStatus.
type V1ConnectionStatusJSONBody ConnectionStatusRequest

// GetV1ConnectionAccountParams defines parameters for GetV1ConnectionAccount.
type GetV1ConnectionAccountParams struct {

	// limit
	Limit *Limit `json:"limit,omitempty"`

	// offset
	Offset *Offset `json:"offset,omitempty"`
}

// V1ConnectionStatusMultiorgJSONBody defines parameters for V1ConnectionStatusMultiorg.
type V1ConnectionStatusMultiorgJSONBody ConnectionStatusRequest

// PostV1MessageJSONBody defines parameters for PostV1Message.
type PostV1MessageJSONBody MessageRequest

// PostV2ConnectionsClientIdMessageJSONBody defines parameters for PostV2ConnectionsClientIdMessage.
type PostV2ConnectionsClientIdMessageJSONBody MessageRequestV2

// PostV1ConnectionDisconnectRequestBody defines body for PostV1ConnectionDisconnect for application/json ContentType.
type PostV1ConnectionDisconnectJSONRequestBody PostV1ConnectionDisconnectJSONBody

// PostV1ConnectionPingRequestBody defines body for PostV1ConnectionPing for application/json ContentType.
type PostV1ConnectionPingJSONRequestBody PostV1ConnectionPingJSONBody

// PostV1ConnectionReconnectRequestBody defines body for PostV1ConnectionReconnect for application/json ContentType.
type PostV1ConnectionReconnectJSONRequestBody PostV1ConnectionReconnectJSONBody

// V1ConnectionStatusRequestBody defines body for V1ConnectionStatus for application/json ContentType.
type V1ConnectionStatusJSONRequestBody V1ConnectionStatusJSONBody

// V1ConnectionStatusMultiorgRequestBody defines body for V1ConnectionStatusMultiorg for application/json ContentType.
type V1ConnectionStatusMultiorgJSONRequestBody V1ConnectionStatusMultiorgJSONBody

// PostV1MessageRequestBody defines body for PostV1Message for application/json ContentType.
type PostV1MessageJSONRequestBody PostV1MessageJSONBody

// PostV2ConnectionsClientIdMessageRequestBody defines body for PostV2ConnectionsClientIdMessage for application/json ContentType.
type PostV2ConnectionsClientIdMessageJSONRequestBody PostV2ConnectionsClientIdMessageJSONBody

// Getter for additional properties for MessageRequest_Metadata. Returns the specified
// element and whether it was found
func (a MessageRequest_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MessageRequest_Metadata
func (a *MessageRequest_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MessageRequest_Metadata to handle AdditionalProperties
func (a *MessageRequest_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MessageRequest_Metadata to handle AdditionalProperties
func (a MessageRequest_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MessageRequestV2_Metadata. Returns the specified
// element and whether it was found
func (a MessageRequestV2_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MessageRequestV2_Metadata
func (a *MessageRequestV2_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MessageRequestV2_Metadata to handle AdditionalProperties
func (a *MessageRequestV2_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MessageRequestV2_Metadata to handle AdditionalProperties
func (a MessageRequestV2_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Connection request
	GetV1Connection(ctx context.Context, params *GetV1ConnectionParams) (*http.Response, error)

	// PostV1ConnectionDisconnect request  with any body
	PostV1ConnectionDisconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostV1ConnectionDisconnect(ctx context.Context, body PostV1ConnectionDisconnectJSONRequestBody) (*http.Response, error)

	// PostV1ConnectionPing request  with any body
	PostV1ConnectionPingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostV1ConnectionPing(ctx context.Context, body PostV1ConnectionPingJSONRequestBody) (*http.Response, error)

	// PostV1ConnectionReconnect request  with any body
	PostV1ConnectionReconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostV1ConnectionReconnect(ctx context.Context, body PostV1ConnectionReconnectJSONRequestBody) (*http.Response, error)

	// V1ConnectionStatus request  with any body
	V1ConnectionStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	V1ConnectionStatus(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*http.Response, error)

	// GetV1ConnectionAccount request
	GetV1ConnectionAccount(ctx context.Context, account AccountID, params *GetV1ConnectionAccountParams) (*http.Response, error)

	// V1ConnectionStatusMultiorg request  with any body
	V1ConnectionStatusMultiorgWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	V1ConnectionStatusMultiorg(ctx context.Context, body V1ConnectionStatusMultiorgJSONRequestBody) (*http.Response, error)

	// PostV1Message request  with any body
	PostV1MessageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostV1Message(ctx context.Context, body PostV1MessageJSONRequestBody) (*http.Response, error)

	// GetV2Connections request
	GetV2Connections(ctx context.Context) (*http.Response, error)

	// PostV2ConnectionsClientIdMessage request  with any body
	PostV2ConnectionsClientIdMessageWithBody(ctx context.Context, clientId ClientID, contentType string, body io.Reader) (*http.Response, error)

	PostV2ConnectionsClientIdMessage(ctx context.Context, clientId ClientID, body PostV2ConnectionsClientIdMessageJSONRequestBody) (*http.Response, error)

	// V2ConnectionStatusMultiorg request
	V2ConnectionStatusMultiorg(ctx context.Context, clientId ClientID) (*http.Response, error)
}

func (c *Client) GetV1Connection(ctx context.Context, params *GetV1ConnectionParams) (*http.Response, error) {
	req, err := NewGetV1ConnectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionDisconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV1ConnectionDisconnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionDisconnect(ctx context.Context, body PostV1ConnectionDisconnectJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV1ConnectionDisconnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionPingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV1ConnectionPingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionPing(ctx context.Context, body PostV1ConnectionPingJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV1ConnectionPingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionReconnectWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV1ConnectionReconnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ConnectionReconnect(ctx context.Context, body PostV1ConnectionReconnectJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV1ConnectionReconnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewV1ConnectionStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatus(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*http.Response, error) {
	req, err := NewV1ConnectionStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ConnectionAccount(ctx context.Context, account AccountID, params *GetV1ConnectionAccountParams) (*http.Response, error) {
	req, err := NewGetV1ConnectionAccountRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusMultiorgWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewV1ConnectionStatusMultiorgRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V1ConnectionStatusMultiorg(ctx context.Context, body V1ConnectionStatusMultiorgJSONRequestBody) (*http.Response, error) {
	req, err := NewV1ConnectionStatusMultiorgRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MessageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV1MessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Message(ctx context.Context, body PostV1MessageJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV1MessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Connections(ctx context.Context) (*http.Response, error) {
	req, err := NewGetV2ConnectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ConnectionsClientIdMessageWithBody(ctx context.Context, clientId ClientID, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostV2ConnectionsClientIdMessageRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ConnectionsClientIdMessage(ctx context.Context, clientId ClientID, body PostV2ConnectionsClientIdMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewPostV2ConnectionsClientIdMessageRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) V2ConnectionStatusMultiorg(ctx context.Context, clientId ClientID) (*http.Response, error) {
	req, err := NewV2ConnectionStatusMultiorgRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetV1ConnectionRequest generates requests for GetV1Connection
func NewGetV1ConnectionRequest(server string, params *GetV1ConnectionParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ConnectionDisconnectRequest calls the generic PostV1ConnectionDisconnect builder with application/json body
func NewPostV1ConnectionDisconnectRequest(server string, body PostV1ConnectionDisconnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ConnectionDisconnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ConnectionDisconnectRequestWithBody generates requests for PostV1ConnectionDisconnect with any type of body
func NewPostV1ConnectionDisconnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection/disconnect")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostV1ConnectionPingRequest calls the generic PostV1ConnectionPing builder with application/json body
func NewPostV1ConnectionPingRequest(server string, body PostV1ConnectionPingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ConnectionPingRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ConnectionPingRequestWithBody generates requests for PostV1ConnectionPing with any type of body
func NewPostV1ConnectionPingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection/ping")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostV1ConnectionReconnectRequest calls the generic PostV1ConnectionReconnect builder with application/json body
func NewPostV1ConnectionReconnectRequest(server string, body PostV1ConnectionReconnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ConnectionReconnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ConnectionReconnectRequestWithBody generates requests for PostV1ConnectionReconnect with any type of body
func NewPostV1ConnectionReconnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection/reconnect")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewV1ConnectionStatusRequest calls the generic V1ConnectionStatus builder with application/json body
func NewV1ConnectionStatusRequest(server string, body V1ConnectionStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ConnectionStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewV1ConnectionStatusRequestWithBody generates requests for V1ConnectionStatus with any type of body
func NewV1ConnectionStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection/status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetV1ConnectionAccountRequest generates requests for GetV1ConnectionAccount
func NewGetV1ConnectionAccountRequest(server string, account AccountID, params *GetV1ConnectionAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "account", account)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1ConnectionStatusMultiorgRequest calls the generic V1ConnectionStatusMultiorg builder with application/json body
func NewV1ConnectionStatusMultiorgRequest(server string, body V1ConnectionStatusMultiorgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ConnectionStatusMultiorgRequestWithBody(server, "application/json", bodyReader)
}

// NewV1ConnectionStatusMultiorgRequestWithBody generates requests for V1ConnectionStatusMultiorg with any type of body
func NewV1ConnectionStatusMultiorgRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/connection_status")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostV1MessageRequest calls the generic PostV1Message builder with application/json body
func NewPostV1MessageRequest(server string, body PostV1MessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MessageRequestWithBody generates requests for PostV1Message with any type of body
func NewPostV1MessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/message")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetV2ConnectionsRequest generates requests for GetV2Connections
func NewGetV2ConnectionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v2/connections")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ConnectionsClientIdMessageRequest calls the generic PostV2ConnectionsClientIdMessage builder with application/json body
func NewPostV2ConnectionsClientIdMessageRequest(server string, clientId ClientID, body PostV2ConnectionsClientIdMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ConnectionsClientIdMessageRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewPostV2ConnectionsClientIdMessageRequestWithBody generates requests for PostV2ConnectionsClientIdMessage with any type of body
func NewPostV2ConnectionsClientIdMessageRequestWithBody(server string, clientId ClientID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "client_id", clientId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v2/connections/%s/message", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewV2ConnectionStatusMultiorgRequest generates requests for V2ConnectionStatusMultiorg
func NewV2ConnectionStatusMultiorgRequest(server string, clientId ClientID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "client_id", clientId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v2/connections/%s/status", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1Connection request
	GetV1ConnectionWithResponse(ctx context.Context, params *GetV1ConnectionParams) (*GetV1ConnectionResponse, error)

	// PostV1ConnectionDisconnect request  with any body
	PostV1ConnectionDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionDisconnectResponse, error)

	PostV1ConnectionDisconnectWithResponse(ctx context.Context, body PostV1ConnectionDisconnectJSONRequestBody) (*PostV1ConnectionDisconnectResponse, error)

	// PostV1ConnectionPing request  with any body
	PostV1ConnectionPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionPingResponse, error)

	PostV1ConnectionPingWithResponse(ctx context.Context, body PostV1ConnectionPingJSONRequestBody) (*PostV1ConnectionPingResponse, error)

	// PostV1ConnectionReconnect request  with any body
	PostV1ConnectionReconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionReconnectResponse, error)

	PostV1ConnectionReconnectWithResponse(ctx context.Context, body PostV1ConnectionReconnectJSONRequestBody) (*PostV1ConnectionReconnectResponse, error)

	// V1ConnectionStatus request  with any body
	V1ConnectionStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusResponse, error)

	V1ConnectionStatusWithResponse(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*V1ConnectionStatusResponse, error)

	// GetV1ConnectionAccount request
	GetV1ConnectionAccountWithResponse(ctx context.Context, account AccountID, params *GetV1ConnectionAccountParams) (*GetV1ConnectionAccountResponse, error)

	// V1ConnectionStatusMultiorg request  with any body
	V1ConnectionStatusMultiorgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusMultiorgResponse, error)

	V1ConnectionStatusMultiorgWithResponse(ctx context.Context, body V1ConnectionStatusMultiorgJSONRequestBody) (*V1ConnectionStatusMultiorgResponse, error)

	// PostV1Message request  with any body
	PostV1MessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1MessageResponse, error)

	PostV1MessageWithResponse(ctx context.Context, body PostV1MessageJSONRequestBody) (*PostV1MessageResponse, error)

	// GetV2Connections request
	GetV2ConnectionsWithResponse(ctx context.Context) (*GetV2ConnectionsResponse, error)

	// PostV2ConnectionsClientIdMessage request  with any body
	PostV2ConnectionsClientIdMessageWithBodyWithResponse(ctx context.Context, clientId ClientID, contentType string, body io.Reader) (*PostV2ConnectionsClientIdMessageResponse, error)

	PostV2ConnectionsClientIdMessageWithResponse(ctx context.Context, clientId ClientID, body PostV2ConnectionsClientIdMessageJSONRequestBody) (*PostV2ConnectionsClientIdMessageResponse, error)

	// V2ConnectionStatusMultiorg request
	V2ConnectionStatusMultiorgWithResponse(ctx context.Context, clientId ClientID) (*V2ConnectionStatusMultiorgResponse, error)
}

type GetV1ConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionListResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ConnectionDisconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ConnectionDisconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ConnectionDisconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ConnectionPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionPingResponse
}

// Status returns HTTPResponse.Status
func (r PostV1ConnectionPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ConnectionPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ConnectionReconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ConnectionReconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ConnectionReconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusResponse
}

// Status returns HTTPResponse.Status
func (r V1ConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ConnectionAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionListAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ConnectionAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ConnectionAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ConnectionStatusMultiorgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusResponse
}

// Status returns HTTPResponse.Status
func (r V1ConnectionStatusMultiorgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ConnectionStatusMultiorgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostV1MessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionListByAccountResponseV2
}

// Status returns HTTPResponse.Status
func (r GetV2ConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ConnectionsClientIdMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageResponse
}

// Status returns HTTPResponse.Status
func (r PostV2ConnectionsClientIdMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ConnectionsClientIdMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2ConnectionStatusMultiorgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusResponseV2
}

// Status returns HTTPResponse.Status
func (r V2ConnectionStatusMultiorgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2ConnectionStatusMultiorgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1ConnectionWithResponse request returning *GetV1ConnectionResponse
func (c *ClientWithResponses) GetV1ConnectionWithResponse(ctx context.Context, params *GetV1ConnectionParams) (*GetV1ConnectionResponse, error) {
	rsp, err := c.GetV1Connection(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ConnectionResponse(rsp)
}

// PostV1ConnectionDisconnectWithBodyWithResponse request with arbitrary body returning *PostV1ConnectionDisconnectResponse
func (c *ClientWithResponses) PostV1ConnectionDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionDisconnectResponse, error) {
	rsp, err := c.PostV1ConnectionDisconnectWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionDisconnectResponse(rsp)
}

func (c *ClientWithResponses) PostV1ConnectionDisconnectWithResponse(ctx context.Context, body PostV1ConnectionDisconnectJSONRequestBody) (*PostV1ConnectionDisconnectResponse, error) {
	rsp, err := c.PostV1ConnectionDisconnect(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionDisconnectResponse(rsp)
}

// PostV1ConnectionPingWithBodyWithResponse request with arbitrary body returning *PostV1ConnectionPingResponse
func (c *ClientWithResponses) PostV1ConnectionPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionPingResponse, error) {
	rsp, err := c.PostV1ConnectionPingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionPingResponse(rsp)
}

func (c *ClientWithResponses) PostV1ConnectionPingWithResponse(ctx context.Context, body PostV1ConnectionPingJSONRequestBody) (*PostV1ConnectionPingResponse, error) {
	rsp, err := c.PostV1ConnectionPing(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionPingResponse(rsp)
}

// PostV1ConnectionReconnectWithBodyWithResponse request with arbitrary body returning *PostV1ConnectionReconnectResponse
func (c *ClientWithResponses) PostV1ConnectionReconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1ConnectionReconnectResponse, error) {
	rsp, err := c.PostV1ConnectionReconnectWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionReconnectResponse(rsp)
}

func (c *ClientWithResponses) PostV1ConnectionReconnectWithResponse(ctx context.Context, body PostV1ConnectionReconnectJSONRequestBody) (*PostV1ConnectionReconnectResponse, error) {
	rsp, err := c.PostV1ConnectionReconnect(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ConnectionReconnectResponse(rsp)
}

// V1ConnectionStatusWithBodyWithResponse request with arbitrary body returning *V1ConnectionStatusResponse
func (c *ClientWithResponses) V1ConnectionStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusResponse, error) {
	rsp, err := c.V1ConnectionStatusWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusResponse(rsp)
}

func (c *ClientWithResponses) V1ConnectionStatusWithResponse(ctx context.Context, body V1ConnectionStatusJSONRequestBody) (*V1ConnectionStatusResponse, error) {
	rsp, err := c.V1ConnectionStatus(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusResponse(rsp)
}

// GetV1ConnectionAccountWithResponse request returning *GetV1ConnectionAccountResponse
func (c *ClientWithResponses) GetV1ConnectionAccountWithResponse(ctx context.Context, account AccountID, params *GetV1ConnectionAccountParams) (*GetV1ConnectionAccountResponse, error) {
	rsp, err := c.GetV1ConnectionAccount(ctx, account, params)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ConnectionAccountResponse(rsp)
}

// V1ConnectionStatusMultiorgWithBodyWithResponse request with arbitrary body returning *V1ConnectionStatusMultiorgResponse
func (c *ClientWithResponses) V1ConnectionStatusMultiorgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*V1ConnectionStatusMultiorgResponse, error) {
	rsp, err := c.V1ConnectionStatusMultiorgWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusMultiorgResponse(rsp)
}

func (c *ClientWithResponses) V1ConnectionStatusMultiorgWithResponse(ctx context.Context, body V1ConnectionStatusMultiorgJSONRequestBody) (*V1ConnectionStatusMultiorgResponse, error) {
	rsp, err := c.V1ConnectionStatusMultiorg(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseV1ConnectionStatusMultiorgResponse(rsp)
}

// PostV1MessageWithBodyWithResponse request with arbitrary body returning *PostV1MessageResponse
func (c *ClientWithResponses) PostV1MessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostV1MessageResponse, error) {
	rsp, err := c.PostV1MessageWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MessageResponse(rsp)
}

func (c *ClientWithResponses) PostV1MessageWithResponse(ctx context.Context, body PostV1MessageJSONRequestBody) (*PostV1MessageResponse, error) {
	rsp, err := c.PostV1Message(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MessageResponse(rsp)
}

// GetV2ConnectionsWithResponse request returning *GetV2ConnectionsResponse
func (c *ClientWithResponses) GetV2ConnectionsWithResponse(ctx context.Context) (*GetV2ConnectionsResponse, error) {
	rsp, err := c.GetV2Connections(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ConnectionsResponse(rsp)
}

// PostV2ConnectionsClientIdMessageWithBodyWithResponse request with arbitrary body returning *PostV2ConnectionsClientIdMessageResponse
func (c *ClientWithResponses) PostV2ConnectionsClientIdMessageWithBodyWithResponse(ctx context.Context, clientId ClientID, contentType string, body io.Reader) (*PostV2ConnectionsClientIdMessageResponse, error) {
	rsp, err := c.PostV2ConnectionsClientIdMessageWithBody(ctx, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ConnectionsClientIdMessageResponse(rsp)
}

func (c *ClientWithResponses) PostV2ConnectionsClientIdMessageWithResponse(ctx context.Context, clientId ClientID, body PostV2ConnectionsClientIdMessageJSONRequestBody) (*PostV2ConnectionsClientIdMessageResponse, error) {
	rsp, err := c.PostV2ConnectionsClientIdMessage(ctx, clientId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ConnectionsClientIdMessageResponse(rsp)
}

// V2ConnectionStatusMultiorgWithResponse request returning *V2ConnectionStatusMultiorgResponse
func (c *ClientWithResponses) V2ConnectionStatusMultiorgWithResponse(ctx context.Context, clientId ClientID) (*V2ConnectionStatusMultiorgResponse, error) {
	rsp, err := c.V2ConnectionStatusMultiorg(ctx, clientId)
	if err != nil {
		return nil, err
	}
	return ParseV2ConnectionStatusMultiorgResponse(rsp)
}

// ParseGetV1ConnectionResponse parses an HTTP response from a GetV1ConnectionWithResponse call
func ParseGetV1ConnectionResponse(rsp *http.Response) (*GetV1ConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetV1ConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ConnectionDisconnectResponse parses an HTTP response from a PostV1ConnectionDisconnectWithResponse call
func ParsePostV1ConnectionDisconnectResponse(rsp *http.Response) (*PostV1ConnectionDisconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostV1ConnectionDisconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostV1ConnectionPingResponse parses an HTTP response from a PostV1ConnectionPingWithResponse call
func ParsePostV1ConnectionPingResponse(rsp *http.Response) (*PostV1ConnectionPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostV1ConnectionPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionPingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ConnectionReconnectResponse parses an HTTP response from a PostV1ConnectionReconnectWithResponse call
func ParsePostV1ConnectionReconnectResponse(rsp *http.Response) (*PostV1ConnectionReconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostV1ConnectionReconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseV1ConnectionStatusResponse parses an HTTP response from a V1ConnectionStatusWithResponse call
func ParseV1ConnectionStatusResponse(rsp *http.Response) (*V1ConnectionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &V1ConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ConnectionAccountResponse parses an HTTP response from a GetV1ConnectionAccountWithResponse call
func ParseGetV1ConnectionAccountResponse(rsp *http.Response) (*GetV1ConnectionAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetV1ConnectionAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionListAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1ConnectionStatusMultiorgResponse parses an HTTP response from a V1ConnectionStatusMultiorgWithResponse call
func ParseV1ConnectionStatusMultiorgResponse(rsp *http.Response) (*V1ConnectionStatusMultiorgResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &V1ConnectionStatusMultiorgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MessageResponse parses an HTTP response from a PostV1MessageWithResponse call
func ParsePostV1MessageResponse(rsp *http.Response) (*PostV1MessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostV1MessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV2ConnectionsResponse parses an HTTP response from a GetV2ConnectionsWithResponse call
func ParseGetV2ConnectionsResponse(rsp *http.Response) (*GetV2ConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetV2ConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionListByAccountResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2ConnectionsClientIdMessageResponse parses an HTTP response from a PostV2ConnectionsClientIdMessageWithResponse call
func ParsePostV2ConnectionsClientIdMessageResponse(rsp *http.Response) (*PostV2ConnectionsClientIdMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostV2ConnectionsClientIdMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseV2ConnectionStatusMultiorgResponse parses an HTTP response from a V2ConnectionStatusMultiorgWithResponse call
func ParseV2ConnectionStatusMultiorgResponse(rsp *http.Response) (*V2ConnectionStatusMultiorgResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &V2ConnectionStatusMultiorgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
